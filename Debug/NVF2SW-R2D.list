
NVF2SW-R2D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf50  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800c010  0800c010  0000d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c414  0800c414  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c414  0800c414  0000e1e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c414  0800c414  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c414  0800c414  0000d414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c418  0800c418  0000d418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c41c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001518  200001e4  0800c600  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016fc  0800c600  0000e6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158f3  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4c  00000000  00000000  00023aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00027950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eaf  00000000  00000000  00028ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e290  00000000  00000000  00029b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2c9  00000000  00000000  00047ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee2a  00000000  00000000  000640a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102ed2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000486c  00000000  00000000  00102f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00107784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bff8 	.word	0x0800bff8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800bff8 	.word	0x0800bff8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <init_app>:
/* extern variables */
extern CAN_HandleTypeDef hcan;
canbus_msg msg = {.id=MY_CAN_ID, .dlc=8};

void init_app(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
    init_canhw(&hcan);
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <init_app+0x18>)
 800024a:	0018      	movs	r0, r3
 800024c:	f000 f82b 	bl	80002a6 <init_canhw>
    init_r2d();
 8000250:	f000 fc83 	bl	8000b5a <init_r2d>
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	200002ec 	.word	0x200002ec

08000260 <task_app>:
    deinit_r2d();
    deinit_canhw(&hcan);
}

void task_app()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
    task_canhw(&hcan);
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <task_app+0x18>)
 8000266:	0018      	movs	r0, r3
 8000268:	f000 f815 	bl	8000296 <task_canhw>
    task_r2d();
 800026c:	f000 fc88 	bl	8000b80 <task_r2d>
}
 8000270:	46c0      	nop			@ (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	200002ec 	.word	0x200002ec

0800027c <cb_app>:

void cb_app(canbus_msg *rxmsg, CAN_RxHeaderTypeDef *rxHeader)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
	cb_r2d(rxmsg);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fc6b 	bl	8000b64 <cb_r2d>
}
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b002      	add	sp, #8
 8000294:	bd80      	pop	{r7, pc}

08000296 <task_canhw>:
#include "can.h"

#if defined(HAL_CAN_MODULE_ENABLED)

void task_canhw(CAN_HandleTypeDef *hcan)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b082      	sub	sp, #8
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
    
}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b002      	add	sp, #8
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <init_canhw>:

void init_canhw(CAN_HandleTypeDef *hcan)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b082      	sub	sp, #8
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
    _canhw_set_filter(hcan);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 f80d 	bl	80002d0 <_canhw_set_filter>
    _canhw_set_irq(hcan);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 f833 	bl	8000324 <_canhw_set_irq>
    _canhw_start(hcan);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 f83c 	bl	800033e <_canhw_start>
}
 80002c6:	46c0      	nop			@ (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b002      	add	sp, #8
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <_canhw_set_filter>:
void deinit_canhw(CAN_HandleTypeDef *hcan)
{
}

void _canhw_set_filter(CAN_HandleTypeDef *hcan)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    static CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; // set fifo assignment
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <_canhw_set_filter+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterIdLow = 0x000;                     // accept all from 0x00
 80002de:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <_canhw_set_filter+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterIdHigh = 0x7FF << 5;               // accept all to 0x7FF
 80002e4:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <_canhw_set_filter+0x4c>)
 80002e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <_canhw_set_filter+0x50>)
 80002e8:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterMaskIdHigh = 0x000;
 80002ea:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <_canhw_set_filter+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x000;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <_canhw_set_filter+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // set filter scale
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <_canhw_set_filter+0x4c>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <_canhw_set_filter+0x4c>)
 80002fe:	2201      	movs	r2, #1
 8000300:	621a      	str	r2, [r3, #32]

    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; // set CAN FILTER to send to FIFO0
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <_canhw_set_filter+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]

    HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8000308:	4a04      	ldr	r2, [pc, #16]	@ (800031c <_canhw_set_filter+0x4c>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	0011      	movs	r1, r2
 800030e:	0018      	movs	r0, r3
 8000310:	f001 fe06 	bl	8001f20 <HAL_CAN_ConfigFilter>
    return;
 8000314:	46c0      	nop			@ (mov r8, r8)
}
 8000316:	46bd      	mov	sp, r7
 8000318:	b002      	add	sp, #8
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000200 	.word	0x20000200
 8000320:	0000ffe0 	.word	0x0000ffe0

08000324 <_canhw_set_irq>:

void _canhw_set_irq(CAN_HandleTypeDef *hcan)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2102      	movs	r1, #2
 8000330:	0018      	movs	r0, r3
 8000332:	f002 fa1f 	bl	8002774 <HAL_CAN_ActivateNotification>
}
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b002      	add	sp, #8
 800033c:	bd80      	pop	{r7, pc}

0800033e <_canhw_start>:

void _canhw_start(CAN_HandleTypeDef *hcan)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	b082      	sub	sp, #8
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
    HAL_CAN_Start(hcan);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	0018      	movs	r0, r3
 800034a:	f001 ff5f 	bl	800220c <HAL_CAN_Start>
}
 800034e:	46c0      	nop			@ (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b002      	add	sp, #8
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <_debug_canhw_senderror>:

void _debug_canhw_senderror(HAL_StatusTypeDef can_txstatus)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	0002      	movs	r2, r0
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	701a      	strb	r2, [r3, #0]
    static char error_msg[32];
    switch (can_txstatus)
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b03      	cmp	r3, #3
 800036a:	d015      	beq.n	8000398 <_debug_canhw_senderror+0x40>
 800036c:	dc1d      	bgt.n	80003aa <_debug_canhw_senderror+0x52>
 800036e:	2b01      	cmp	r3, #1
 8000370:	d002      	beq.n	8000378 <_debug_canhw_senderror+0x20>
 8000372:	2b02      	cmp	r3, #2
 8000374:	d007      	beq.n	8000386 <_debug_canhw_senderror+0x2e>
 8000376:	e018      	b.n	80003aa <_debug_canhw_senderror+0x52>
    {
    case HAL_ERROR:
        strcpy(error_msg, "CAN: HAL Error\n");
 8000378:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <_debug_canhw_senderror+0x70>)
 800037a:	4a14      	ldr	r2, [pc, #80]	@ (80003cc <_debug_canhw_senderror+0x74>)
 800037c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800037e:	c313      	stmia	r3!, {r0, r1, r4}
 8000380:	6812      	ldr	r2, [r2, #0]
 8000382:	601a      	str	r2, [r3, #0]
        break;
 8000384:	e017      	b.n	80003b6 <_debug_canhw_senderror+0x5e>
    case HAL_BUSY:
        strcpy(error_msg, "CAN: Peripheral Busy\n");
 8000386:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <_debug_canhw_senderror+0x70>)
 8000388:	4a11      	ldr	r2, [pc, #68]	@ (80003d0 <_debug_canhw_senderror+0x78>)
 800038a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800038c:	c313      	stmia	r3!, {r0, r1, r4}
 800038e:	ca03      	ldmia	r2!, {r0, r1}
 8000390:	c303      	stmia	r3!, {r0, r1}
 8000392:	8812      	ldrh	r2, [r2, #0]
 8000394:	801a      	strh	r2, [r3, #0]
        break;
 8000396:	e00e      	b.n	80003b6 <_debug_canhw_senderror+0x5e>
    case HAL_TIMEOUT:
        strcpy(error_msg, "CAN: Mailbox Timeout\n");
 8000398:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <_debug_canhw_senderror+0x70>)
 800039a:	4a0e      	ldr	r2, [pc, #56]	@ (80003d4 <_debug_canhw_senderror+0x7c>)
 800039c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800039e:	c313      	stmia	r3!, {r0, r1, r4}
 80003a0:	ca03      	ldmia	r2!, {r0, r1}
 80003a2:	c303      	stmia	r3!, {r0, r1}
 80003a4:	8812      	ldrh	r2, [r2, #0]
 80003a6:	801a      	strh	r2, [r3, #0]
        break;
 80003a8:	e005      	b.n	80003b6 <_debug_canhw_senderror+0x5e>
    default:
        strcpy(error_msg, "CAN: Unknown Error\n");
 80003aa:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <_debug_canhw_senderror+0x70>)
 80003ac:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <_debug_canhw_senderror+0x80>)
 80003ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003b0:	c313      	stmia	r3!, {r0, r1, r4}
 80003b2:	ca03      	ldmia	r2!, {r0, r1}
 80003b4:	c303      	stmia	r3!, {r0, r1}
    }

    usb_vcptx(error_msg);
 80003b6:	4b04      	ldr	r3, [pc, #16]	@ (80003c8 <_debug_canhw_senderror+0x70>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 feb2 	bl	8001122 <usb_vcptx>
}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b003      	add	sp, #12
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	20000228 	.word	0x20000228
 80003cc:	0800c010 	.word	0x0800c010
 80003d0:	0800c020 	.word	0x0800c020
 80003d4:	0800c038 	.word	0x0800c038
 80003d8:	0800c050 	.word	0x0800c050

080003dc <_debug_can_print_msg>:

void _debug_can_print_msg(canbus_msg *cmsg)
{
 80003dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003de:	b087      	sub	sp, #28
 80003e0:	af04      	add	r7, sp, #16
 80003e2:	6078      	str	r0, [r7, #4]
    static char msg[64];
    sprintf(msg, "%08X::%08X::%08X -> %08X %08X \n", cmsg->ts_rx, cmsg->id, cmsg->dlc, cmsg->data32[0], cmsg->data32[1]);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681d      	ldr	r5, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689e      	ldr	r6, [r3, #8]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6919      	ldr	r1, [r3, #16]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4c08      	ldr	r4, [pc, #32]	@ (800041c <_debug_can_print_msg+0x40>)
 80003fa:	4809      	ldr	r0, [pc, #36]	@ (8000420 <_debug_can_print_msg+0x44>)
 80003fc:	9302      	str	r3, [sp, #8]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	9200      	str	r2, [sp, #0]
 8000402:	0033      	movs	r3, r6
 8000404:	002a      	movs	r2, r5
 8000406:	0021      	movs	r1, r4
 8000408:	f00b f958 	bl	800b6bc <siprintf>
    usb_vcptx(msg);
 800040c:	4b04      	ldr	r3, [pc, #16]	@ (8000420 <_debug_can_print_msg+0x44>)
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fe87 	bl	8001122 <usb_vcptx>
    return;
 8000414:	46c0      	nop			@ (mov r8, r8)
}
 8000416:	46bd      	mov	sp, r7
 8000418:	b003      	add	sp, #12
 800041a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041c:	0800c064 	.word	0x0800c064
 8000420:	20000248 	.word	0x20000248

08000424 <cb_can_rx>:

void cb_can_rx(CAN_HandleTypeDef *hcan, canbus_msg *rxmsg, CAN_RxHeaderTypeDef *rxHeader)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rxHeader, rxmsg->data);
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	3310      	adds	r3, #16
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	68f8      	ldr	r0, [r7, #12]
 8000438:	2100      	movs	r1, #0
 800043a:	f002 f85f 	bl	80024fc <HAL_CAN_GetRxMessage>
    rxmsg->dlc = rxHeader->DLC;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	691a      	ldr	r2, [r3, #16]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	60da      	str	r2, [r3, #12]
    rxmsg->id = rxHeader->StdId;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	609a      	str	r2, [r3, #8]
    rxmsg->ts_rx = rxHeader->Timestamp;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	601a      	str	r2, [r3, #0]

    _debug_can_print_msg(rxmsg);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	0018      	movs	r0, r3
 800045a:	f7ff ffbf 	bl	80003dc <_debug_can_print_msg>
    return;
 800045e:	46c0      	nop			@ (mov r8, r8)
}
 8000460:	46bd      	mov	sp, r7
 8000462:	b004      	add	sp, #16
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <canhw_send>:

void canhw_send(CAN_HandleTypeDef *hcan, canbus_msg *msg)
{
 8000468:	b5b0      	push	{r4, r5, r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
    static CAN_TxHeaderTypeDef txHeader;
    static uint8_t txData[8];
    static uint32_t txMailbox;

    txHeader.StdId = msg->id;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	689a      	ldr	r2, [r3, #8]
 8000476:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <canhw_send+0x78>)
 8000478:	601a      	str	r2, [r3, #0]
    txHeader.IDE = CAN_ID_STD;
 800047a:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <canhw_send+0x78>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
    txHeader.RTR = CAN_RTR_DATA;
 8000480:	4b17      	ldr	r3, [pc, #92]	@ (80004e0 <canhw_send+0x78>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
    txHeader.DLC = msg->dlc;
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	68da      	ldr	r2, [r3, #12]
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <canhw_send+0x78>)
 800048c:	611a      	str	r2, [r3, #16]
    txHeader.TransmitGlobalTime = ENABLE;
 800048e:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <canhw_send+0x78>)
 8000490:	2201      	movs	r2, #1
 8000492:	751a      	strb	r2, [r3, #20]
    msg->ts_tx = HAL_GetTick();
 8000494:	f000 fedc 	bl	8001250 <HAL_GetTick>
 8000498:	0002      	movs	r2, r0
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	605a      	str	r2, [r3, #4]

    memcpy(txData, msg->data, 8);
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	3310      	adds	r3, #16
 80004a2:	4a10      	ldr	r2, [pc, #64]	@ (80004e4 <canhw_send+0x7c>)
 80004a4:	0010      	movs	r0, r2
 80004a6:	0019      	movs	r1, r3
 80004a8:	2308      	movs	r3, #8
 80004aa:	001a      	movs	r2, r3
 80004ac:	f00b f95a 	bl	800b764 <memcpy>
//    usb_vcptx("tx: ");
//    _debug_can_print_msg(msg);
    HAL_StatusTypeDef txStatus = HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox);
 80004b0:	250f      	movs	r5, #15
 80004b2:	197c      	adds	r4, r7, r5
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <canhw_send+0x80>)
 80004b6:	4a0b      	ldr	r2, [pc, #44]	@ (80004e4 <canhw_send+0x7c>)
 80004b8:	4909      	ldr	r1, [pc, #36]	@ (80004e0 <canhw_send+0x78>)
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f001 feec 	bl	8002298 <HAL_CAN_AddTxMessage>
 80004c0:	0003      	movs	r3, r0
 80004c2:	7023      	strb	r3, [r4, #0]

    // if no errors, exit from function
    if (txStatus == HAL_OK)
 80004c4:	197b      	adds	r3, r7, r5
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d005      	beq.n	80004d8 <canhw_send+0x70>
        return;

    // debug errors if exist
    _debug_canhw_senderror(txStatus);
 80004cc:	197b      	adds	r3, r7, r5
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	0018      	movs	r0, r3
 80004d2:	f7ff ff41 	bl	8000358 <_debug_canhw_senderror>
    return;
 80004d6:	e000      	b.n	80004da <canhw_send+0x72>
        return;
 80004d8:	46c0      	nop			@ (mov r8, r8)
}
 80004da:	46bd      	mov	sp, r7
 80004dc:	b004      	add	sp, #16
 80004de:	bdb0      	pop	{r4, r5, r7, pc}
 80004e0:	20000288 	.word	0x20000288
 80004e4:	200002a0 	.word	0x200002a0
 80004e8:	200002a8 	.word	0x200002a8

080004ec <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
canbus_msg rxmsg;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	static CAN_RxHeaderTypeDef rxHeader;
	cb_can_rx(hcan, &rxmsg, &rxHeader);
 80004f4:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004f6:	4908      	ldr	r1, [pc, #32]	@ (8000518 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff ff92 	bl	8000424 <cb_can_rx>
	cb_app(&rxmsg, &rxHeader);
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000502:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000504:	0011      	movs	r1, r2
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff feb8 	bl	800027c <cb_app>
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200003bc 	.word	0x200003bc
 8000518:	200003a4 	.word	0x200003a4

0800051c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  if (htim == &htim16)
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4b04      	ldr	r3, [pc, #16]	@ (8000538 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000528:	429a      	cmp	r2, r3
 800052a:	d101      	bne.n	8000530 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    task_app();
 800052c:	f7ff fe98 	bl	8000260 <task_app>
  }
}
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}
 8000538:	2000035c 	.word	0x2000035c

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fe2c 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f816 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f9c6 	bl	80008d8 <MX_GPIO_Init>
  MX_ADC_Init();
 800054c:	f000 f86e 	bl	800062c <MX_ADC_Init>
  MX_CAN_Init();
 8000550:	f000 f908 	bl	8000764 <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 8000554:	f00a fb74 	bl	800ac40 <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 8000558:	f000 f994 	bl	8000884 <MX_TIM16_Init>
  MX_TIM15_Init();
 800055c:	f000 f93a 	bl	80007d4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000560:	4b03      	ldr	r3, [pc, #12]	@ (8000570 <main+0x34>)
 8000562:	0018      	movs	r0, r3
 8000564:	f005 feb0 	bl	80062c8 <HAL_TIM_Base_Start_IT>

  init_app();
 8000568:	f7ff fe6c 	bl	8000244 <init_app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	e7fd      	b.n	800056c <main+0x30>
 8000570:	2000035c 	.word	0x2000035c

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b099      	sub	sp, #100	@ 0x64
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	242c      	movs	r4, #44	@ 0x2c
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	2334      	movs	r3, #52	@ 0x34
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f00b f8b9 	bl	800b6fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	231c      	movs	r3, #28
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	0018      	movs	r0, r3
 8000590:	2310      	movs	r3, #16
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f00b f8b1 	bl	800b6fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059a:	003b      	movs	r3, r7
 800059c:	0018      	movs	r0, r3
 800059e:	231c      	movs	r3, #28
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f00b f8aa 	bl	800b6fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 80005a8:	0021      	movs	r1, r4
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2230      	movs	r2, #48	@ 0x30
 80005ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2201      	movs	r2, #1
 80005b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2210      	movs	r2, #16
 80005c0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	0018      	movs	r0, r3
 80005cc:	f004 fd0c 	bl	8004fe8 <HAL_RCC_OscConfig>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005d4:	f000 fab2 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	211c      	movs	r1, #28
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2207      	movs	r2, #7
 80005de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2203      	movs	r2, #3
 80005e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2101      	movs	r1, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f005 fa0c 	bl	8005a14 <HAL_RCC_ClockConfig>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000600:	f000 fa9c 	bl	8000b3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000604:	003b      	movs	r3, r7
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	0292      	lsls	r2, r2, #10
 800060a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800060c:	003b      	movs	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000612:	003b      	movs	r3, r7
 8000614:	0018      	movs	r0, r3
 8000616:	f005 fbd7 	bl	8005dc8 <HAL_RCCEx_PeriphCLKConfig>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061e:	f000 fa8d 	bl	8000b3c <Error_Handler>
  }
}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b019      	add	sp, #100	@ 0x64
 8000628:	bd90      	pop	{r4, r7, pc}
	...

0800062c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	0018      	movs	r0, r3
 8000636:	230c      	movs	r3, #12
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f00b f85e 	bl	800b6fc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000640:	4b46      	ldr	r3, [pc, #280]	@ (800075c <MX_ADC_Init+0x130>)
 8000642:	4a47      	ldr	r2, [pc, #284]	@ (8000760 <MX_ADC_Init+0x134>)
 8000644:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000646:	4b45      	ldr	r3, [pc, #276]	@ (800075c <MX_ADC_Init+0x130>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	4b43      	ldr	r3, [pc, #268]	@ (800075c <MX_ADC_Init+0x130>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b42      	ldr	r3, [pc, #264]	@ (800075c <MX_ADC_Init+0x130>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000658:	4b40      	ldr	r3, [pc, #256]	@ (800075c <MX_ADC_Init+0x130>)
 800065a:	2201      	movs	r2, #1
 800065c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065e:	4b3f      	ldr	r3, [pc, #252]	@ (800075c <MX_ADC_Init+0x130>)
 8000660:	2204      	movs	r2, #4
 8000662:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000664:	4b3d      	ldr	r3, [pc, #244]	@ (800075c <MX_ADC_Init+0x130>)
 8000666:	2200      	movs	r2, #0
 8000668:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800066a:	4b3c      	ldr	r3, [pc, #240]	@ (800075c <MX_ADC_Init+0x130>)
 800066c:	2200      	movs	r2, #0
 800066e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000670:	4b3a      	ldr	r3, [pc, #232]	@ (800075c <MX_ADC_Init+0x130>)
 8000672:	2200      	movs	r2, #0
 8000674:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b39      	ldr	r3, [pc, #228]	@ (800075c <MX_ADC_Init+0x130>)
 8000678:	2200      	movs	r2, #0
 800067a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b37      	ldr	r3, [pc, #220]	@ (800075c <MX_ADC_Init+0x130>)
 800067e:	22c2      	movs	r2, #194	@ 0xc2
 8000680:	32ff      	adds	r2, #255	@ 0xff
 8000682:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000684:	4b35      	ldr	r3, [pc, #212]	@ (800075c <MX_ADC_Init+0x130>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800068a:	4b34      	ldr	r3, [pc, #208]	@ (800075c <MX_ADC_Init+0x130>)
 800068c:	2224      	movs	r2, #36	@ 0x24
 800068e:	2100      	movs	r1, #0
 8000690:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000692:	4b32      	ldr	r3, [pc, #200]	@ (800075c <MX_ADC_Init+0x130>)
 8000694:	2201      	movs	r2, #1
 8000696:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000698:	4b30      	ldr	r3, [pc, #192]	@ (800075c <MX_ADC_Init+0x130>)
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fde2 	bl	8001264 <HAL_ADC_Init>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006a4:	f000 fa4a 	bl	8000b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	0152      	lsls	r2, r2, #5
 80006b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	0552      	lsls	r2, r2, #21
 80006bc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	4b26      	ldr	r3, [pc, #152]	@ (800075c <MX_ADC_Init+0x130>)
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 f81b 	bl	8001700 <HAL_ADC_ConfigChannel>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80006ce:	f000 fa35 	bl	8000b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006d8:	1d3a      	adds	r2, r7, #4
 80006da:	4b20      	ldr	r3, [pc, #128]	@ (800075c <MX_ADC_Init+0x130>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f80e 	bl	8001700 <HAL_ADC_ConfigChannel>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80006e8:	f000 fa28 	bl	8000b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2209      	movs	r2, #9
 80006f0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006f2:	1d3a      	adds	r2, r7, #4
 80006f4:	4b19      	ldr	r3, [pc, #100]	@ (800075c <MX_ADC_Init+0x130>)
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 f801 	bl	8001700 <HAL_ADC_ConfigChannel>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000702:	f000 fa1b 	bl	8000b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2210      	movs	r2, #16
 800070a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800070c:	1d3a      	adds	r2, r7, #4
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_ADC_Init+0x130>)
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fff4 	bl	8001700 <HAL_ADC_ConfigChannel>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800071c:	f000 fa0e 	bl	8000b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2211      	movs	r2, #17
 8000724:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_ADC_Init+0x130>)
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f000 ffe7 	bl	8001700 <HAL_ADC_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000736:	f000 fa01 	bl	8000b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2212      	movs	r2, #18
 800073e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000740:	1d3a      	adds	r2, r7, #4
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_ADC_Init+0x130>)
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f000 ffda 	bl	8001700 <HAL_ADC_ConfigChannel>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000750:	f000 f9f4 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b004      	add	sp, #16
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200002ac 	.word	0x200002ac
 8000760:	40012400 	.word	0x40012400

08000764 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <MX_CAN_Init+0x68>)
 800076a:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <MX_CAN_Init+0x6c>)
 800076c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800076e:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_CAN_Init+0x68>)
 8000770:	2210      	movs	r2, #16
 8000772:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000774:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <MX_CAN_Init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_CAN_Init+0x68>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_CAN_Init+0x68>)
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	0292      	lsls	r2, r2, #10
 8000786:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000788:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_CAN_Init+0x68>)
 800078a:	2280      	movs	r2, #128	@ 0x80
 800078c:	0352      	lsls	r2, r2, #13
 800078e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_CAN_Init+0x68>)
 8000792:	2201      	movs	r2, #1
 8000794:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <MX_CAN_Init+0x68>)
 8000798:	2200      	movs	r2, #0
 800079a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800079c:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_CAN_Init+0x68>)
 800079e:	2200      	movs	r2, #0
 80007a0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_CAN_Init+0x68>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_CAN_Init+0x68>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_CAN_Init+0x68>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007b4:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <MX_CAN_Init+0x68>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 f95e 	bl	8001a78 <HAL_CAN_Init>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007c0:	f000 f9bc 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	200002ec 	.word	0x200002ec
 80007d0:	40006400 	.word	0x40006400

080007d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	2308      	movs	r3, #8
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	0018      	movs	r0, r3
 80007e0:	2310      	movs	r3, #16
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f00a ff89 	bl	800b6fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	003b      	movs	r3, r7
 80007ec:	0018      	movs	r0, r3
 80007ee:	2308      	movs	r3, #8
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f00a ff82 	bl	800b6fc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_TIM15_Init+0xa4>)
 80007fa:	4a20      	ldr	r2, [pc, #128]	@ (800087c <MX_TIM15_Init+0xa8>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_TIM15_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_TIM15_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_TIM15_Init+0xa4>)
 800080c:	4a1c      	ldr	r2, [pc, #112]	@ (8000880 <MX_TIM15_Init+0xac>)
 800080e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_TIM15_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_TIM15_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_TIM15_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_TIM15_Init+0xa4>)
 8000824:	0018      	movs	r0, r3
 8000826:	f005 fc4d 	bl	80060c4 <HAL_TIM_Base_Init>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800082e:	f000 f985 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	2108      	movs	r1, #8
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2280      	movs	r2, #128	@ 0x80
 8000838:	0152      	lsls	r2, r2, #5
 800083a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800083c:	187a      	adds	r2, r7, r1
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_TIM15_Init+0xa4>)
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f005 fec2 	bl	80065cc <HAL_TIM_ConfigClockSource>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800084c:	f000 f976 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	003b      	movs	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800085c:	003a      	movs	r2, r7
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_TIM15_Init+0xa4>)
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f006 fb16 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 800086c:	f000 f966 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b006      	add	sp, #24
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000314 	.word	0x20000314
 800087c:	40014000 	.word	0x40014000
 8000880:	0000ffff 	.word	0x0000ffff

08000884 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_TIM16_Init+0x48>)
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <MX_TIM16_Init+0x4c>)
 800088c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 480-1;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <MX_TIM16_Init+0x48>)
 8000890:	22e0      	movs	r2, #224	@ 0xe0
 8000892:	32ff      	adds	r2, #255	@ 0xff
 8000894:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_TIM16_Init+0x48>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_TIM16_Init+0x48>)
 800089e:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <MX_TIM16_Init+0x50>)
 80008a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <MX_TIM16_Init+0x48>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_TIM16_Init+0x48>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ae:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <MX_TIM16_Init+0x48>)
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <MX_TIM16_Init+0x48>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f005 fc04 	bl	80060c4 <HAL_TIM_Base_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80008c0:	f000 f93c 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	2000035c 	.word	0x2000035c
 80008d0:	40014400 	.word	0x40014400
 80008d4:	0000270f 	.word	0x0000270f

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b08b      	sub	sp, #44	@ 0x2c
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	2414      	movs	r4, #20
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	0018      	movs	r0, r3
 80008e4:	2314      	movs	r3, #20
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f00a ff07 	bl	800b6fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b8e      	ldr	r3, [pc, #568]	@ (8000b28 <MX_GPIO_Init+0x250>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4b8d      	ldr	r3, [pc, #564]	@ (8000b28 <MX_GPIO_Init+0x250>)
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	0309      	lsls	r1, r1, #12
 80008f8:	430a      	orrs	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	4b8a      	ldr	r3, [pc, #552]	@ (8000b28 <MX_GPIO_Init+0x250>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	031b      	lsls	r3, r3, #12
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b87      	ldr	r3, [pc, #540]	@ (8000b28 <MX_GPIO_Init+0x250>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	4b86      	ldr	r3, [pc, #536]	@ (8000b28 <MX_GPIO_Init+0x250>)
 8000910:	2180      	movs	r1, #128	@ 0x80
 8000912:	03c9      	lsls	r1, r1, #15
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b83      	ldr	r3, [pc, #524]	@ (8000b28 <MX_GPIO_Init+0x250>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	2380      	movs	r3, #128	@ 0x80
 800091e:	03db      	lsls	r3, r3, #15
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b80      	ldr	r3, [pc, #512]	@ (8000b28 <MX_GPIO_Init+0x250>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b28 <MX_GPIO_Init+0x250>)
 800092c:	2180      	movs	r1, #128	@ 0x80
 800092e:	0289      	lsls	r1, r1, #10
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b7c      	ldr	r3, [pc, #496]	@ (8000b28 <MX_GPIO_Init+0x250>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	@ 0x80
 800093a:	029b      	lsls	r3, r3, #10
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b79      	ldr	r3, [pc, #484]	@ (8000b28 <MX_GPIO_Init+0x250>)
 8000944:	695a      	ldr	r2, [r3, #20]
 8000946:	4b78      	ldr	r3, [pc, #480]	@ (8000b28 <MX_GPIO_Init+0x250>)
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	02c9      	lsls	r1, r1, #11
 800094c:	430a      	orrs	r2, r1
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	4b75      	ldr	r3, [pc, #468]	@ (8000b28 <MX_GPIO_Init+0x250>)
 8000952:	695a      	ldr	r2, [r3, #20]
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	02db      	lsls	r3, r3, #11
 8000958:	4013      	ands	r3, r2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R2D_LED_Pin|R3_Pin, GPIO_PIN_RESET);
 800095e:	2388      	movs	r3, #136	@ 0x88
 8000960:	0059      	lsls	r1, r3, #1
 8000962:	2390      	movs	r3, #144	@ 0x90
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	2200      	movs	r2, #0
 8000968:	0018      	movs	r0, r3
 800096a:	f002 fcb3 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_LED_Pin|R8_Pin|R7_Pin|R6_Pin
 800096e:	23fc      	movs	r3, #252	@ 0xfc
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	486e      	ldr	r0, [pc, #440]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000974:	2200      	movs	r2, #0
 8000976:	0019      	movs	r1, r3
 8000978:	f002 fcac 	bl	80032d4 <HAL_GPIO_WritePin>
                          |R5_Pin|R4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	22e0      	movs	r2, #224	@ 0xe0
 8000980:	0212      	lsls	r2, r2, #8
 8000982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2203      	movs	r2, #3
 8000988:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	193b      	adds	r3, r7, r4
 8000992:	4a67      	ldr	r2, [pc, #412]	@ (8000b30 <MX_GPIO_Init+0x258>)
 8000994:	0019      	movs	r1, r3
 8000996:	0010      	movs	r0, r2
 8000998:	f002 fa30 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2203      	movs	r2, #3
 80009a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2203      	movs	r2, #3
 80009a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	4a60      	ldr	r2, [pc, #384]	@ (8000b34 <MX_GPIO_Init+0x25c>)
 80009b2:	0019      	movs	r1, r3
 80009b4:	0010      	movs	r0, r2
 80009b6:	f002 fa21 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	4a5e      	ldr	r2, [pc, #376]	@ (8000b38 <MX_GPIO_Init+0x260>)
 80009be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2203      	movs	r2, #3
 80009c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	193a      	adds	r2, r7, r4
 80009ce:	2390      	movs	r3, #144	@ 0x90
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 fa11 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : R2D_LED_Pin */
  GPIO_InitStruct.Pin = R2D_LED_Pin;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2210      	movs	r2, #16
 80009de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2201      	movs	r2, #1
 80009e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2201      	movs	r2, #1
 80009ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R2D_LED_GPIO_Port, &GPIO_InitStruct);
 80009f2:	193a      	adds	r2, r7, r4
 80009f4:	2390      	movs	r3, #144	@ 0x90
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 f9fe 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : R2D_BTN_NO_Pin R2D_SW_NO_Pin */
  GPIO_InitStruct.Pin = R2D_BTN_NO_Pin|R2D_SW_NO_Pin;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	22a0      	movs	r2, #160	@ 0xa0
 8000a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	2202      	movs	r2, #2
 8000a10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	193a      	adds	r2, r7, r4
 8000a14:	2390      	movs	r3, #144	@ 0x90
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f002 f9ee 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : R2D_SW_NC_Pin */
  GPIO_InitStruct.Pin = R2D_SW_NC_Pin;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2240      	movs	r2, #64	@ 0x40
 8000a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(R2D_SW_NC_GPIO_Port, &GPIO_InitStruct);
 8000a32:	193a      	adds	r2, r7, r4
 8000a34:	2390      	movs	r3, #144	@ 0x90
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 f9de 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
 8000a40:	0021      	movs	r1, r4
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	22c4      	movs	r2, #196	@ 0xc4
 8000a4c:	0392      	lsls	r2, r2, #14
 8000a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	000c      	movs	r4, r1
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	4a34      	ldr	r2, [pc, #208]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0010      	movs	r0, r2
 8000a60:	f002 f9cc 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_KEY_Pin */
  GPIO_InitStruct.Pin = USR_KEY_Pin;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2204      	movs	r2, #4
 8000a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_KEY_GPIO_Port, &GPIO_InitStruct);
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	4a2c      	ldr	r2, [pc, #176]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f002 f9bd 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a82:	0021      	movs	r1, r4
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2280      	movs	r2, #128	@ 0x80
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a8c:	000c      	movs	r4, r1
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2211      	movs	r2, #17
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f002 f9a8 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : R8_Pin R7_Pin R6_Pin R5_Pin
                           R4_Pin */
  GPIO_InitStruct.Pin = R8_Pin|R7_Pin|R6_Pin|R5_Pin
 8000aac:	0021      	movs	r1, r4
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	22f8      	movs	r2, #248	@ 0xf8
 8000ab2:	0212      	lsls	r2, r2, #8
 8000ab4:	601a      	str	r2, [r3, #0]
                          |R4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	000c      	movs	r4, r1
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2201      	movs	r2, #1
 8000abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000ace:	0019      	movs	r1, r3
 8000ad0:	0010      	movs	r0, r2
 8000ad2:	f002 f993 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : R3_Pin */
  GPIO_InitStruct.Pin = R3_Pin;
 8000ad6:	0021      	movs	r1, r4
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	0052      	lsls	r2, r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	000c      	movs	r4, r1
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(R3_GPIO_Port, &GPIO_InitStruct);
 8000af4:	193a      	adds	r2, r7, r4
 8000af6:	2390      	movs	r3, #144	@ 0x90
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 f97d 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	22f8      	movs	r2, #248	@ 0xf8
 8000b06:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	f002 f96e 	bl	8002dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b00b      	add	sp, #44	@ 0x2c
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	48000800 	.word	0x48000800
 8000b34:	48001400 	.word	0x48001400
 8000b38:	0000860c 	.word	0x0000860c

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	e7fd      	b.n	8000b44 <Error_Handler+0x8>

08000b48 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <init_r2d>:
R2D_report_t r2d_report;

extern CAN_HandleTypeDef hcan;
extern canbus_msg msg;

void init_r2d(void) {}
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <cb_r2d>:
void deinit_r2d(void) {}

#if R2D_IS_DASH
void cb_r2d(const canbus_msg* msg)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if (msg->data[CAN_DATA_IDX_NETWORK] != CAN_R2DN) return;					/* message not from the right network */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7d1b      	ldrb	r3, [r3, #20]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d100      	bne.n	8000b76 <cb_r2d+0x12>
	if (msg->id != CAN_R2DN_VCU) return;										/* message not from VCU */
 8000b74:	e000      	b.n	8000b78 <cb_r2d+0x14>
	if (msg->data[CAN_DATA_IDX_NETWORK] != CAN_R2DN) return;					/* message not from the right network */
 8000b76:	46c0      	nop			@ (mov r8, r8)
		case CAN_R2DN_VCU_REPORT:
			break;
		default:
			return;
	}
}
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <task_r2d>:
}
#endif

#if R2D_IS_DASH
void task_r2d(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	_r2d_getStatus(&r2d_status);
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <task_r2d+0x30>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 f818 	bl	8000bbc <_r2d_getStatus>
	_r2d_status2can(&r2d_status, &msg);
 8000b8c:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <task_r2d+0x34>)
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <task_r2d+0x30>)
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 f8ac 	bl	8000cf0 <_r2d_status2can>
	canhw_send(&hcan, &msg);
 8000b98:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <task_r2d+0x34>)
 8000b9a:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <task_r2d+0x38>)
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fc62 	bl	8000468 <canhw_send>
	_r2d_task();
 8000ba4:	f000 f8e8 	bl	8000d78 <_r2d_task>
}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	200003e0 	.word	0x200003e0
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	200002ec 	.word	0x200002ec

08000bbc <_r2d_getStatus>:
	_r2d_task();
}
#endif

void _r2d_getStatus(R2D_status_t* r2d_status)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	R2D_SW_NC = HAL_GPIO_ReadPin(R2D_SW_NC_GPIO_Port, R2D_SW_NC_Pin);
 8000bc4:	2390      	movs	r3, #144	@ 0x90
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 fb56 	bl	800327c <HAL_GPIO_ReadPin>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	1e5a      	subs	r2, r3, #1
 8000bd4:	4193      	sbcs	r3, r2
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd8 <_r2d_getStatus+0x11c>)
 8000bda:	701a      	strb	r2, [r3, #0]
	R2D_SW_NO = HAL_GPIO_ReadPin(R2D_SW_NO_GPIO_Port, R2D_SW_NO_Pin);
 8000bdc:	2390      	movs	r3, #144	@ 0x90
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 fb4a 	bl	800327c <HAL_GPIO_ReadPin>
 8000be8:	0003      	movs	r3, r0
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	4193      	sbcs	r3, r2
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <_r2d_getStatus+0x120>)
 8000bf2:	701a      	strb	r2, [r3, #0]
	R2D_BTN_NO = HAL_GPIO_ReadPin(R2D_BTN_NO_GPIO_Port, R2D_BTN_NO_Pin);
 8000bf4:	2390      	movs	r3, #144	@ 0x90
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 fb3e 	bl	800327c <HAL_GPIO_ReadPin>
 8000c00:	0003      	movs	r3, r0
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	4193      	sbcs	r3, r2
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b35      	ldr	r3, [pc, #212]	@ (8000ce0 <_r2d_getStatus+0x124>)
 8000c0a:	701a      	strb	r2, [r3, #0]
	USR_BTN_NO = HAL_GPIO_ReadPin(USR_KEY_GPIO_Port, USR_KEY_Pin);
 8000c0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <_r2d_getStatus+0x128>)
 8000c0e:	2104      	movs	r1, #4
 8000c10:	0018      	movs	r0, r3
 8000c12:	f002 fb33 	bl	800327c <HAL_GPIO_ReadPin>
 8000c16:	0003      	movs	r3, r0
 8000c18:	1e5a      	subs	r2, r3, #1
 8000c1a:	4193      	sbcs	r3, r2
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ce8 <_r2d_getStatus+0x12c>)
 8000c20:	701a      	strb	r2, [r3, #0]

	r2d_status->isUser = USR_BTN_NO;
 8000c22:	4b31      	ldr	r3, [pc, #196]	@ (8000ce8 <_r2d_getStatus+0x12c>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	70da      	strb	r2, [r3, #3]
	hasError = (R2D_SW_NC == R2D_SW_NO);
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <_r2d_getStatus+0x11c>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <_r2d_getStatus+0x120>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	425a      	negs	r2, r3
 8000c36:	4153      	adcs	r3, r2
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <_r2d_getStatus+0x130>)
 8000c3c:	701a      	strb	r2, [r3, #0]
	r2d_status->hasError = hasError;
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cec <_r2d_getStatus+0x130>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	701a      	strb	r2, [r3, #0]
	if (hasError)
 8000c46:	4b29      	ldr	r3, [pc, #164]	@ (8000cec <_r2d_getStatus+0x130>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <_r2d_getStatus+0xa0>
	{
		r2d_status->isDeactivated = 1;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	709a      	strb	r2, [r3, #2]
		r2d_status->isTriggered = 0;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	705a      	strb	r2, [r3, #1]
		return;
 8000c5a:	e03a      	b.n	8000cd2 <_r2d_getStatus+0x116>
	}

	//	condition is that NC is closed, NO is open
		r2d_status->isDeactivated = ((hasError) || (!hasError && R2D_SW_NC));
 8000c5c:	4b23      	ldr	r3, [pc, #140]	@ (8000cec <_r2d_getStatus+0x130>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10a      	bne.n	8000c7a <_r2d_getStatus+0xbe>
 8000c64:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <_r2d_getStatus+0x130>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4053      	eors	r3, r2
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <_r2d_getStatus+0xc2>
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <_r2d_getStatus+0x11c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <_r2d_getStatus+0xc2>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <_r2d_getStatus+0xc4>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	1c1a      	adds	r2, r3, #0
 8000c82:	2301      	movs	r3, #1
 8000c84:	4013      	ands	r3, r2
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	709a      	strb	r2, [r3, #2]

	//	can only be triggered on 1 condition
	//	if is !isDeactivated AND button is pressed.
		r2d_status->isTriggered = (!hasError && !R2D_SW_NC && R2D_SW_NO && !R2D_BTN_NO);
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <_r2d_getStatus+0x130>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4053      	eors	r3, r2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d013      	beq.n	8000cc2 <_r2d_getStatus+0x106>
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <_r2d_getStatus+0x11c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00c      	beq.n	8000cc2 <_r2d_getStatus+0x106>
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <_r2d_getStatus+0x120>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d008      	beq.n	8000cc2 <_r2d_getStatus+0x106>
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <_r2d_getStatus+0x124>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4053      	eors	r3, r2
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <_r2d_getStatus+0x106>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <_r2d_getStatus+0x108>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	1c1a      	adds	r2, r3, #0
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4013      	ands	r3, r2
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	705a      	strb	r2, [r3, #1]

	return;
 8000cd0:	46c0      	nop			@ (mov r8, r8)
}
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200003d8 	.word	0x200003d8
 8000cdc:	200003d9 	.word	0x200003d9
 8000ce0:	200003da 	.word	0x200003da
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	200003db 	.word	0x200003db
 8000cec:	200003dc 	.word	0x200003dc

08000cf0 <_r2d_status2can>:

void _r2d_status2can(const R2D_status_t* r2d_status, canbus_msg* msg)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	msg->dlc = 8;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	60da      	str	r2, [r3, #12]
	msg->data32[0] = 0x00;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
	msg->data32[1] = 0x00;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]

	msg->data[CAN_DATA_IDX_MSGTYPE] = CAN_R2DN_DASH_STATUS;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	755a      	strb	r2, [r3, #21]
	msg->data[0] |= (r2d_status->hasError) * R2D_HAS_ERROR;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	7c1b      	ldrb	r3, [r3, #16]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	741a      	strb	r2, [r3, #16]
	msg->data[0] |= (r2d_status->isTriggered) * R2D_IS_TRIGGERED;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	7c1b      	ldrb	r3, [r3, #16]
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	785b      	ldrb	r3, [r3, #1]
 8000d2c:	18db      	adds	r3, r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	741a      	strb	r2, [r3, #16]
	msg->data[0] |= (r2d_status->isDeactivated) * R2D_IS_DEACTIVATED;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	7c1b      	ldrb	r3, [r3, #16]
 8000d40:	b25a      	sxtb	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	741a      	strb	r2, [r3, #16]
	msg->data[0] |= (r2d_status->isUser) * R2D_USR_TRIG;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	7c1b      	ldrb	r3, [r3, #16]
 8000d5a:	b25a      	sxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	741a      	strb	r2, [r3, #16]

	return;
 8000d70:	46c0      	nop			@ (mov r8, r8)
}
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_r2d_task>:
	r2d_report->r2dState = msg->data[0];
	return;
}

void _r2d_task()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	#if R2D_IS_DASH
	_r2d_handle_led();
 8000d7c:	f000 f804 	bl	8000d88 <_r2d_handle_led>
	#endif
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <_r2d_handle_led>:

void _r2d_handle_led()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	// use watchdog
	switch (r2d_report.r2dState)
 8000d8c:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <_r2d_handle_led+0x68>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d005      	beq.n	8000da0 <_r2d_handle_led+0x18>
 8000d94:	dc28      	bgt.n	8000de8 <_r2d_handle_led+0x60>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d014      	beq.n	8000dc4 <_r2d_handle_led+0x3c>
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d124      	bne.n	8000de8 <_r2d_handle_led+0x60>
	{
		case R2D_STATE_READY:
			// flash
			break;
 8000d9e:	e023      	b.n	8000de8 <_r2d_handle_led+0x60>
		case R2D_STATE_ACTIVE:
			if (R2D_LED_STATE != 1)
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <_r2d_handle_led+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2201      	movs	r2, #1
 8000da6:	4053      	eors	r3, r2
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d019      	beq.n	8000de2 <_r2d_handle_led+0x5a>
			{
				HAL_GPIO_WritePin(R2D_LED_GPIO_Port, R2D_LED_Pin, 1);
 8000dae:	2390      	movs	r3, #144	@ 0x90
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	2201      	movs	r2, #1
 8000db4:	2110      	movs	r1, #16
 8000db6:	0018      	movs	r0, r3
 8000db8:	f002 fa8c 	bl	80032d4 <HAL_GPIO_WritePin>
				R2D_LED_STATE = 1;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <_r2d_handle_led+0x6c>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000dc2:	e00e      	b.n	8000de2 <_r2d_handle_led+0x5a>
		case R2D_STATE_DEACTIVE:
			if (R2D_LED_STATE != 0)
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <_r2d_handle_led+0x6c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00c      	beq.n	8000de6 <_r2d_handle_led+0x5e>
			{
				HAL_GPIO_WritePin(R2D_LED_GPIO_Port, R2D_LED_Pin, 0);
 8000dcc:	2390      	movs	r3, #144	@ 0x90
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 fa7d 	bl	80032d4 <HAL_GPIO_WritePin>
				R2D_LED_STATE = 0;
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <_r2d_handle_led+0x6c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000de0:	e001      	b.n	8000de6 <_r2d_handle_led+0x5e>
			break;
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	e000      	b.n	8000de8 <_r2d_handle_led+0x60>
			break;
 8000de6:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	200003e4 	.word	0x200003e4
 8000df4:	200003dd 	.word	0x200003dd

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	619a      	str	r2, [r3, #24]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0549      	lsls	r1, r1, #21
 8000e20:	430a      	orrs	r2, r1
 8000e22:	61da      	str	r2, [r3, #28]
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_MspInit+0x44>)
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	055b      	lsls	r3, r3, #21
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b08b      	sub	sp, #44	@ 0x2c
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	2414      	movs	r4, #20
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f00a fc52 	bl	800b6fc <memset>
  if(hadc->Instance==ADC1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a27      	ldr	r2, [pc, #156]	@ (8000efc <HAL_ADC_MspInit+0xbc>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d148      	bne.n	8000ef4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000e64:	699a      	ldr	r2, [r3, #24]
 8000e66:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000e68:	2180      	movs	r1, #128	@ 0x80
 8000e6a:	0089      	lsls	r1, r1, #2
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	619a      	str	r2, [r3, #24]
 8000e70:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000e84:	2180      	movs	r1, #128	@ 0x80
 8000e86:	0289      	lsls	r1, r1, #10
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000ea0:	2180      	movs	r1, #128	@ 0x80
 8000ea2:	02c9      	lsls	r1, r1, #11
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	615a      	str	r2, [r3, #20]
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_ADC_MspInit+0xc0>)
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	2380      	movs	r3, #128	@ 0x80
 8000eae:	02db      	lsls	r3, r3, #11
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2203      	movs	r2, #3
 8000eba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	193a      	adds	r2, r7, r4
 8000eca:	2390      	movs	r3, #144	@ 0x90
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 ff93 	bl	8002dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2202      	movs	r2, #2
 8000eda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2203      	movs	r2, #3
 8000ee0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <HAL_ADC_MspInit+0xc4>)
 8000eec:	0019      	movs	r1, r3
 8000eee:	0010      	movs	r0, r2
 8000ef0:	f001 ff84 	bl	8002dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b00b      	add	sp, #44	@ 0x2c
 8000efa:	bd90      	pop	{r4, r7, pc}
 8000efc:	40012400 	.word	0x40012400
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000400 	.word	0x48000400

08000f08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b08b      	sub	sp, #44	@ 0x2c
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	2414      	movs	r4, #20
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	0018      	movs	r0, r3
 8000f16:	2314      	movs	r3, #20
 8000f18:	001a      	movs	r2, r3
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f00a fbee 	bl	800b6fc <memset>
  if(hcan->Instance==CAN)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a20      	ldr	r2, [pc, #128]	@ (8000fa8 <HAL_CAN_MspInit+0xa0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d13a      	bne.n	8000fa0 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_CAN_MspInit+0xa4>)
 8000f2c:	69da      	ldr	r2, [r3, #28]
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <HAL_CAN_MspInit+0xa4>)
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	0489      	lsls	r1, r1, #18
 8000f34:	430a      	orrs	r2, r1
 8000f36:	61da      	str	r2, [r3, #28]
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <HAL_CAN_MspInit+0xa4>)
 8000f3a:	69da      	ldr	r2, [r3, #28]
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	049b      	lsls	r3, r3, #18
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <HAL_CAN_MspInit+0xa4>)
 8000f48:	695a      	ldr	r2, [r3, #20]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_CAN_MspInit+0xa4>)
 8000f4c:	2180      	movs	r1, #128	@ 0x80
 8000f4e:	02c9      	lsls	r1, r1, #11
 8000f50:	430a      	orrs	r2, r1
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_CAN_MspInit+0xa4>)
 8000f56:	695a      	ldr	r2, [r3, #20]
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	02db      	lsls	r3, r3, #11
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	22c0      	movs	r2, #192	@ 0xc0
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	0021      	movs	r1, r4
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2202      	movs	r2, #2
 8000f70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2204      	movs	r2, #4
 8000f82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <HAL_CAN_MspInit+0xa8>)
 8000f88:	0019      	movs	r1, r3
 8000f8a:	0010      	movs	r0, r2
 8000f8c:	f001 ff36 	bl	8002dfc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	201e      	movs	r0, #30
 8000f96:	f001 fee7 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000f9a:	201e      	movs	r0, #30
 8000f9c:	f001 ff04 	bl	8002da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b00b      	add	sp, #44	@ 0x2c
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	40006400 	.word	0x40006400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <HAL_TIM_Base_MspInit+0x70>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <HAL_TIM_Base_MspInit+0x74>)
 8000fc8:	699a      	ldr	r2, [r3, #24]
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <HAL_TIM_Base_MspInit+0x74>)
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	0249      	lsls	r1, r1, #9
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	619a      	str	r2, [r3, #24]
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_TIM_Base_MspInit+0x74>)
 8000fd6:	699a      	ldr	r2, [r3, #24]
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	025b      	lsls	r3, r3, #9
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000fe2:	e01a      	b.n	800101a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a10      	ldr	r2, [pc, #64]	@ (800102c <HAL_TIM_Base_MspInit+0x78>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d115      	bne.n	800101a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_TIM_Base_MspInit+0x74>)
 8000ff0:	699a      	ldr	r2, [r3, #24]
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_TIM_Base_MspInit+0x74>)
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0289      	lsls	r1, r1, #10
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_TIM_Base_MspInit+0x74>)
 8000ffe:	699a      	ldr	r2, [r3, #24]
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	029b      	lsls	r3, r3, #10
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2015      	movs	r0, #21
 8001010:	f001 feaa 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001014:	2015      	movs	r0, #21
 8001016:	f001 fec7 	bl	8002da8 <HAL_NVIC_EnableIRQ>
}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b004      	add	sp, #16
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	40014000 	.word	0x40014000
 8001028:	40021000 	.word	0x40021000
 800102c:	40014400 	.word	0x40014400

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	e7fd      	b.n	8001034 <NMI_Handler+0x4>

08001038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	e7fd      	b.n	800103c <HardFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f8e8 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <TIM16_IRQHandler+0x14>)
 800106a:	0018      	movs	r0, r3
 800106c:	f005 f9c0 	bl	80063f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	2000035c 	.word	0x2000035c

0800107c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <CEC_CAN_IRQHandler+0x14>)
 8001082:	0018      	movs	r0, r3
 8001084:	f001 fbb0 	bl	80027e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	200002ec 	.word	0x200002ec

08001094 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <USB_IRQHandler+0x14>)
 800109a:	0018      	movs	r0, r3
 800109c:	f002 fa7c 	bl	8003598 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	200010b8 	.word	0x200010b8

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	@ (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	18d3      	adds	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f00a fb16 	bl	800b70c <__errno>
 80010e0:	0003      	movs	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	425b      	negs	r3, r3
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	18d2      	adds	r2, r2, r3
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <_sbrk+0x64>)
 80010fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b006      	add	sp, #24
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20004000 	.word	0x20004000
 800110c:	00000400 	.word	0x00000400
 8001110:	200003e8 	.word	0x200003e8
 8001114:	20001700 	.word	0x20001700

08001118 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <usb_vcptx>:
/* inc copyright */

#include "usb.h"

void usb_vcptx(const char* msg)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS(msg, strlen(msg));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	0018      	movs	r0, r3
 800112e:	f7fe ffeb 	bl	8000108 <strlen>
 8001132:	0003      	movs	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0011      	movs	r1, r2
 800113a:	0018      	movs	r0, r3
 800113c:	f009 fe04 	bl	800ad48 <CDC_Transmit_FS>
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}

08001148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800114c:	f7ff ffe4 	bl	8001118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	@ (8001188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	@ (8001194 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001176:	f00a facf 	bl	800b718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117a:	f7ff f9df 	bl	800053c <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   r0, =_estack
 8001180:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800118c:	0800c41c 	.word	0x0800c41c
  ldr r2, =_sbss
 8001190:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001194:	200016fc 	.word	0x200016fc

08001198 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_COMP_IRQHandler>
	...

0800119c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <HAL_Init+0x24>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_Init+0x24>)
 80011a6:	2110      	movs	r1, #16
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f809 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b2:	f7ff fe21 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	40022000 	.word	0x40022000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_InitTick+0x5c>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <HAL_InitTick+0x60>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	0019      	movs	r1, r3
 80011d6:	23fa      	movs	r3, #250	@ 0xfa
 80011d8:	0098      	lsls	r0, r3, #2
 80011da:	f7fe ffa7 	bl	800012c <__udivsi3>
 80011de:	0003      	movs	r3, r0
 80011e0:	0019      	movs	r1, r3
 80011e2:	0020      	movs	r0, r4
 80011e4:	f7fe ffa2 	bl	800012c <__udivsi3>
 80011e8:	0003      	movs	r3, r0
 80011ea:	0018      	movs	r0, r3
 80011ec:	f001 fdf8 	bl	8002de0 <HAL_SYSTICK_Config>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e00f      	b.n	8001218 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d80b      	bhi.n	8001216 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	2301      	movs	r3, #1
 8001202:	425b      	negs	r3, r3
 8001204:	2200      	movs	r2, #0
 8001206:	0018      	movs	r0, r3
 8001208:	f001 fdae 	bl	8002d68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_InitTick+0x64>)
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b003      	add	sp, #12
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	20000018 	.word	0x20000018
 8001224:	20000020 	.word	0x20000020
 8001228:	2000001c 	.word	0x2000001c

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <HAL_IncTick+0x1c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	001a      	movs	r2, r3
 8001236:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_IncTick+0x20>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	18d2      	adds	r2, r2, r3
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_IncTick+0x20>)
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	20000020 	.word	0x20000020
 800124c:	200003ec 	.word	0x200003ec

08001250 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b02      	ldr	r3, [pc, #8]	@ (8001260 <HAL_GetTick+0x10>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	200003ec 	.word	0x200003ec

08001264 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800126c:	230f      	movs	r3, #15
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e237      	b.n	80016f2 <HAL_ADC_Init+0x48e>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4ac5      	ldr	r2, [pc, #788]	@ (800159c <HAL_ADC_Init+0x338>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d007      	beq.n	800129c <HAL_ADC_Init+0x38>
 800128c:	239a      	movs	r3, #154	@ 0x9a
 800128e:	33ff      	adds	r3, #255	@ 0xff
 8001290:	001a      	movs	r2, r3
 8001292:	4bc3      	ldr	r3, [pc, #780]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f7ff fc56 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d012      	beq.n	80012ca <HAL_ADC_Init+0x66>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	05db      	lsls	r3, r3, #23
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d00c      	beq.n	80012ca <HAL_ADC_Init+0x66>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	061b      	lsls	r3, r3, #24
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d006      	beq.n	80012ca <HAL_ADC_Init+0x66>
 80012bc:	23cd      	movs	r3, #205	@ 0xcd
 80012be:	005a      	lsls	r2, r3, #1
 80012c0:	4bb7      	ldr	r3, [pc, #732]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff fc3f 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d013      	beq.n	80012fa <HAL_ADC_Init+0x96>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d00f      	beq.n	80012fa <HAL_ADC_Init+0x96>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d00b      	beq.n	80012fa <HAL_ADC_Init+0x96>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b18      	cmp	r3, #24
 80012e8:	d007      	beq.n	80012fa <HAL_ADC_Init+0x96>
 80012ea:	239c      	movs	r3, #156	@ 0x9c
 80012ec:	33ff      	adds	r3, #255	@ 0xff
 80012ee:	001a      	movs	r2, r3
 80012f0:	4bab      	ldr	r3, [pc, #684]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 80012f2:	0011      	movs	r1, r2
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff fc27 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00a      	beq.n	8001318 <HAL_ADC_Init+0xb4>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b20      	cmp	r3, #32
 8001308:	d006      	beq.n	8001318 <HAL_ADC_Init+0xb4>
 800130a:	23ce      	movs	r3, #206	@ 0xce
 800130c:	005a      	lsls	r2, r3, #1
 800130e:	4ba4      	ldr	r3, [pc, #656]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 8001310:	0011      	movs	r1, r2
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff fc18 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d00b      	beq.n	8001338 <HAL_ADC_Init+0xd4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d007      	beq.n	8001338 <HAL_ADC_Init+0xd4>
 8001328:	239e      	movs	r3, #158	@ 0x9e
 800132a:	33ff      	adds	r3, #255	@ 0xff
 800132c:	001a      	movs	r2, r3
 800132e:	4b9c      	ldr	r3, [pc, #624]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fc08 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7e9b      	ldrb	r3, [r3, #26]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00a      	beq.n	8001356 <HAL_ADC_Init+0xf2>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e9b      	ldrb	r3, [r3, #26]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d006      	beq.n	8001356 <HAL_ADC_Init+0xf2>
 8001348:	23cf      	movs	r3, #207	@ 0xcf
 800134a:	005a      	lsls	r2, r3, #1
 800134c:	4b94      	ldr	r3, [pc, #592]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff fbf9 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7edb      	ldrb	r3, [r3, #27]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_ADC_Init+0x112>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7edb      	ldrb	r3, [r3, #27]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d007      	beq.n	8001376 <HAL_ADC_Init+0x112>
 8001366:	23a0      	movs	r3, #160	@ 0xa0
 8001368:	33ff      	adds	r3, #255	@ 0xff
 800136a:	001a      	movs	r2, r3
 800136c:	4b8c      	ldr	r3, [pc, #560]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 800136e:	0011      	movs	r1, r2
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff fbe9 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d018      	beq.n	80013b0 <HAL_ADC_Init+0x14c>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	2380      	movs	r3, #128	@ 0x80
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	429a      	cmp	r2, r3
 8001388:	d012      	beq.n	80013b0 <HAL_ADC_Init+0x14c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1a      	ldr	r2, [r3, #32]
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	429a      	cmp	r2, r3
 8001394:	d00c      	beq.n	80013b0 <HAL_ADC_Init+0x14c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1a      	ldr	r2, [r3, #32]
 800139a:	23c0      	movs	r3, #192	@ 0xc0
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	429a      	cmp	r2, r3
 80013a0:	d006      	beq.n	80013b0 <HAL_ADC_Init+0x14c>
 80013a2:	23d0      	movs	r3, #208	@ 0xd0
 80013a4:	005a      	lsls	r2, r3, #1
 80013a6:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 80013a8:	0011      	movs	r1, r2
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff fbcc 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01f      	beq.n	80013f8 <HAL_ADC_Init+0x194>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	2b40      	cmp	r3, #64	@ 0x40
 80013be:	d01b      	beq.n	80013f8 <HAL_ADC_Init+0x194>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	2b80      	cmp	r3, #128	@ 0x80
 80013c6:	d017      	beq.n	80013f8 <HAL_ADC_Init+0x194>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80013ce:	d013      	beq.n	80013f8 <HAL_ADC_Init+0x194>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69da      	ldr	r2, [r3, #28]
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	429a      	cmp	r2, r3
 80013da:	d00d      	beq.n	80013f8 <HAL_ADC_Init+0x194>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	23c2      	movs	r3, #194	@ 0xc2
 80013e2:	33ff      	adds	r3, #255	@ 0xff
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d007      	beq.n	80013f8 <HAL_ADC_Init+0x194>
 80013e8:	23a2      	movs	r3, #162	@ 0xa2
 80013ea:	33ff      	adds	r3, #255	@ 0xff
 80013ec:	001a      	movs	r2, r3
 80013ee:	4b6c      	ldr	r3, [pc, #432]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff fba8 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2224      	movs	r2, #36	@ 0x24
 80013fc:	5c9b      	ldrb	r3, [r3, r2]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_ADC_Init+0x1b6>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2224      	movs	r2, #36	@ 0x24
 8001406:	5c9b      	ldrb	r3, [r3, r2]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d006      	beq.n	800141a <HAL_ADC_Init+0x1b6>
 800140c:	23d1      	movs	r3, #209	@ 0xd1
 800140e:	005a      	lsls	r2, r3, #1
 8001410:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fb97 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00b      	beq.n	800143a <HAL_ADC_Init+0x1d6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b08      	cmp	r3, #8
 8001428:	d007      	beq.n	800143a <HAL_ADC_Init+0x1d6>
 800142a:	23a4      	movs	r3, #164	@ 0xa4
 800142c:	33ff      	adds	r3, #255	@ 0xff
 800142e:	001a      	movs	r2, r3
 8001430:	4b5b      	ldr	r3, [pc, #364]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff fb87 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143e:	2b01      	cmp	r3, #1
 8001440:	d00a      	beq.n	8001458 <HAL_ADC_Init+0x1f4>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_ADC_Init+0x1f4>
 800144a:	23d2      	movs	r3, #210	@ 0xd2
 800144c:	005a      	lsls	r2, r3, #1
 800144e:	4b54      	ldr	r3, [pc, #336]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff fb78 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7e1b      	ldrb	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <HAL_ADC_Init+0x214>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e1b      	ldrb	r3, [r3, #24]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d007      	beq.n	8001478 <HAL_ADC_Init+0x214>
 8001468:	23a6      	movs	r3, #166	@ 0xa6
 800146a:	33ff      	adds	r3, #255	@ 0xff
 800146c:	001a      	movs	r2, r3
 800146e:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 8001470:	0011      	movs	r1, r2
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff fb68 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7e5b      	ldrb	r3, [r3, #25]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00a      	beq.n	8001496 <HAL_ADC_Init+0x232>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e5b      	ldrb	r3, [r3, #25]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d006      	beq.n	8001496 <HAL_ADC_Init+0x232>
 8001488:	23d3      	movs	r3, #211	@ 0xd3
 800148a:	005a      	lsls	r2, r3, #1
 800148c:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <HAL_ADC_Init+0x33c>)
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff fb59 	bl	8000b48 <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10a      	bne.n	80014b4 <HAL_ADC_Init+0x250>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2234      	movs	r2, #52	@ 0x34
 80014a8:	2100      	movs	r1, #0
 80014aa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff fcc6 	bl	8000e40 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b8:	2210      	movs	r2, #16
 80014ba:	4013      	ands	r3, r2
 80014bc:	d000      	beq.n	80014c0 <HAL_ADC_Init+0x25c>
 80014be:	e10b      	b.n	80016d8 <HAL_ADC_Init+0x474>
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d000      	beq.n	80014cc <HAL_ADC_Init+0x268>
 80014ca:	e105      	b.n	80016d8 <HAL_ADC_Init+0x474>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80014d6:	d000      	beq.n	80014da <HAL_ADC_Init+0x276>
 80014d8:	e0fe      	b.n	80016d8 <HAL_ADC_Init+0x474>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014de:	4a31      	ldr	r2, [pc, #196]	@ (80015a4 <HAL_ADC_Init+0x340>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	2202      	movs	r2, #2
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2203      	movs	r2, #3
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d112      	bne.n	800151e <HAL_ADC_Init+0x2ba>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	2b01      	cmp	r3, #1
 8001504:	d009      	beq.n	800151a <HAL_ADC_Init+0x2b6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	401a      	ands	r2, r3
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	429a      	cmp	r2, r3
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x2ba>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_ADC_Init+0x2bc>
 800151e:	2300      	movs	r3, #0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d116      	bne.n	8001552 <HAL_ADC_Init+0x2ee>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2218      	movs	r2, #24
 800152c:	4393      	bics	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	0899      	lsrs	r1, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4912      	ldr	r1, [pc, #72]	@ (80015a8 <HAL_ADC_Init+0x344>)
 800155e:	400a      	ands	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7e1b      	ldrb	r3, [r3, #24]
 8001566:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e5b      	ldrb	r3, [r3, #25]
 800156c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800156e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7e9b      	ldrb	r3, [r3, #26]
 8001574:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001576:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157c:	2b01      	cmp	r3, #1
 800157e:	d002      	beq.n	8001586 <HAL_ADC_Init+0x322>
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	e000      	b.n	8001588 <HAL_ADC_Init+0x324>
 8001586:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001588:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800158e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d109      	bne.n	80015ac <HAL_ADC_Init+0x348>
 8001598:	2304      	movs	r3, #4
 800159a:	e008      	b.n	80015ae <HAL_ADC_Init+0x34a>
 800159c:	40012400 	.word	0x40012400
 80015a0:	0800c084 	.word	0x0800c084
 80015a4:	fffffefd 	.word	0xfffffefd
 80015a8:	fffe0219 	.word	0xfffe0219
 80015ac:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80015ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2124      	movs	r1, #36	@ 0x24
 80015b4:	5c5b      	ldrb	r3, [r3, r1]
 80015b6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	4313      	orrs	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7edb      	ldrb	r3, [r3, #27]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d115      	bne.n	80015f4 <HAL_ADC_Init+0x390>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e9b      	ldrb	r3, [r3, #26]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_Init+0x378>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2280      	movs	r2, #128	@ 0x80
 80015d4:	0252      	lsls	r2, r2, #9
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	e00b      	b.n	80015f4 <HAL_ADC_Init+0x390>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e0:	2220      	movs	r2, #32
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ec:	2201      	movs	r2, #1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	23c2      	movs	r3, #194	@ 0xc2
 80015fa:	33ff      	adds	r3, #255	@ 0xff
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d007      	beq.n	8001610 <HAL_ADC_Init+0x3ac>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001608:	4313      	orrs	r3, r2
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	4313      	orrs	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68d9      	ldr	r1, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	430a      	orrs	r2, r1
 800161e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	429a      	cmp	r2, r3
 800162a:	d01b      	beq.n	8001664 <HAL_ADC_Init+0x400>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d017      	beq.n	8001664 <HAL_ADC_Init+0x400>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	2b02      	cmp	r3, #2
 800163a:	d013      	beq.n	8001664 <HAL_ADC_Init+0x400>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	2b03      	cmp	r3, #3
 8001642:	d00f      	beq.n	8001664 <HAL_ADC_Init+0x400>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001648:	2b04      	cmp	r3, #4
 800164a:	d00b      	beq.n	8001664 <HAL_ADC_Init+0x400>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001650:	2b05      	cmp	r3, #5
 8001652:	d007      	beq.n	8001664 <HAL_ADC_Init+0x400>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	2b06      	cmp	r3, #6
 800165a:	d003      	beq.n	8001664 <HAL_ADC_Init+0x400>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001660:	2b07      	cmp	r3, #7
 8001662:	d112      	bne.n	800168a <HAL_ADC_Init+0x426>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2107      	movs	r1, #7
 8001670:	438a      	bics	r2, r1
 8001672:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6959      	ldr	r1, [r3, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167e:	2207      	movs	r2, #7
 8001680:	401a      	ands	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4a1a      	ldr	r2, [pc, #104]	@ (80016fc <HAL_ADC_Init+0x498>)
 8001692:	4013      	ands	r3, r2
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	429a      	cmp	r2, r3
 8001698:	d10b      	bne.n	80016b2 <HAL_ADC_Init+0x44e>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a4:	2203      	movs	r2, #3
 80016a6:	4393      	bics	r3, r2
 80016a8:	2201      	movs	r2, #1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016b0:	e01c      	b.n	80016ec <HAL_ADC_Init+0x488>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	2212      	movs	r2, #18
 80016b8:	4393      	bics	r3, r2
 80016ba:	2210      	movs	r2, #16
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c6:	2201      	movs	r2, #1
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80016ce:	230f      	movs	r3, #15
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016d6:	e009      	b.n	80016ec <HAL_ADC_Init+0x488>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016dc:	2210      	movs	r2, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80016e4:	230f      	movs	r3, #15
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016ec:	230f      	movs	r3, #15
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	781b      	ldrb	r3, [r3, #0]
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b004      	add	sp, #16
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	833fffe7 	.word	0x833fffe7

08001700 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	230f      	movs	r3, #15
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4abc      	ldr	r2, [pc, #752]	@ (8001a0c <HAL_ADC_ConfigChannel+0x30c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d005      	beq.n	800172c <HAL_ADC_ConfigChannel+0x2c>
 8001720:	4abb      	ldr	r2, [pc, #748]	@ (8001a10 <HAL_ADC_ConfigChannel+0x310>)
 8001722:	4bbc      	ldr	r3, [pc, #752]	@ (8001a14 <HAL_ADC_ConfigChannel+0x314>)
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff fa0e 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d04d      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d049      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d045      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d041      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d03d      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d039      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b06      	cmp	r3, #6
 8001762:	d035      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b07      	cmp	r3, #7
 800176a:	d031      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d02d      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b09      	cmp	r3, #9
 800177a:	d029      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b0a      	cmp	r3, #10
 8001782:	d025      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b0b      	cmp	r3, #11
 800178a:	d021      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d01d      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b0d      	cmp	r3, #13
 800179a:	d019      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b0e      	cmp	r3, #14
 80017a2:	d015      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d011      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d00d      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b11      	cmp	r3, #17
 80017ba:	d009      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b12      	cmp	r3, #18
 80017c2:	d005      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xd0>
 80017c4:	4a94      	ldr	r2, [pc, #592]	@ (8001a18 <HAL_ADC_ConfigChannel+0x318>)
 80017c6:	4b93      	ldr	r3, [pc, #588]	@ (8001a14 <HAL_ADC_ConfigChannel+0x314>)
 80017c8:	0011      	movs	r1, r2
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7ff f9bc 	bl	8000b48 <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	015b      	lsls	r3, r3, #5
 80017d8:	429a      	cmp	r2, r3
 80017da:	d00a      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0xf2>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a8e      	ldr	r2, [pc, #568]	@ (8001a1c <HAL_ADC_ConfigChannel+0x31c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d005      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0xf2>
 80017e6:	4a8e      	ldr	r2, [pc, #568]	@ (8001a20 <HAL_ADC_ConfigChannel+0x320>)
 80017e8:	4b8a      	ldr	r3, [pc, #552]	@ (8001a14 <HAL_ADC_ConfigChannel+0x314>)
 80017ea:	0011      	movs	r1, r2
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff f9ab 	bl	8000b48 <assert_failed>
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	055b      	lsls	r3, r3, #21
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d043      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001802:	2b01      	cmp	r3, #1
 8001804:	d03f      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180a:	2b02      	cmp	r3, #2
 800180c:	d03b      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001812:	2b03      	cmp	r3, #3
 8001814:	d037      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181a:	2b04      	cmp	r3, #4
 800181c:	d033      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001822:	2b05      	cmp	r3, #5
 8001824:	d02f      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182a:	2b06      	cmp	r3, #6
 800182c:	d02b      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001832:	2b07      	cmp	r3, #7
 8001834:	d027      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	055b      	lsls	r3, r3, #21
 800183e:	429a      	cmp	r2, r3
 8001840:	d021      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d01d      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d019      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d015      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b04      	cmp	r3, #4
 8001860:	d011      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b05      	cmp	r3, #5
 8001868:	d00d      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d009      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b07      	cmp	r3, #7
 8001878:	d005      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x186>
 800187a:	4a6a      	ldr	r2, [pc, #424]	@ (8001a24 <HAL_ADC_ConfigChannel+0x324>)
 800187c:	4b65      	ldr	r3, [pc, #404]	@ (8001a14 <HAL_ADC_ConfigChannel+0x314>)
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff f961 	bl	8000b48 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2234      	movs	r2, #52	@ 0x34
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x194>
 8001890:	2302      	movs	r3, #2
 8001892:	e0e9      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x368>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2234      	movs	r2, #52	@ 0x34
 8001898:	2101      	movs	r1, #1
 800189a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d000      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x1aa>
 80018a8:	e0cd      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x346>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a5b      	ldr	r2, [pc, #364]	@ (8001a1c <HAL_ADC_ConfigChannel+0x31c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d100      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x1b6>
 80018b4:	e083      	b.n	80019be <HAL_ADC_ConfigChannel+0x2be>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	409a      	lsls	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d0:	2380      	movs	r3, #128	@ 0x80
 80018d2:	055b      	lsls	r3, r3, #21
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d037      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d033      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d02f      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d02b      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d027      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d023      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	2b06      	cmp	r3, #6
 8001906:	d01f      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	2b07      	cmp	r3, #7
 800190e:	d01b      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	2107      	movs	r1, #7
 800191c:	400b      	ands	r3, r1
 800191e:	429a      	cmp	r2, r3
 8001920:	d012      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x248>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2107      	movs	r1, #7
 800192e:	438a      	bics	r2, r1
 8001930:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6959      	ldr	r1, [r3, #20]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2207      	movs	r2, #7
 800193e:	401a      	ands	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b10      	cmp	r3, #16
 800194e:	d008      	beq.n	8001962 <HAL_ADC_ConfigChannel+0x262>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b11      	cmp	r3, #17
 8001956:	d004      	beq.n	8001962 <HAL_ADC_ConfigChannel+0x262>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d000      	beq.n	8001962 <HAL_ADC_ConfigChannel+0x262>
 8001960:	e07b      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <HAL_ADC_ConfigChannel+0x328>)
 8001964:	6819      	ldr	r1, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b10      	cmp	r3, #16
 800196c:	d009      	beq.n	8001982 <HAL_ADC_ConfigChannel+0x282>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b11      	cmp	r3, #17
 8001974:	d102      	bne.n	800197c <HAL_ADC_ConfigChannel+0x27c>
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	03db      	lsls	r3, r3, #15
 800197a:	e004      	b.n	8001986 <HAL_ADC_ConfigChannel+0x286>
 800197c:	2380      	movs	r3, #128	@ 0x80
 800197e:	045b      	lsls	r3, r3, #17
 8001980:	e001      	b.n	8001986 <HAL_ADC_ConfigChannel+0x286>
 8001982:	2380      	movs	r3, #128	@ 0x80
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	4a28      	ldr	r2, [pc, #160]	@ (8001a28 <HAL_ADC_ConfigChannel+0x328>)
 8001988:	430b      	orrs	r3, r1
 800198a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b10      	cmp	r3, #16
 8001992:	d162      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001994:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <HAL_ADC_ConfigChannel+0x32c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4925      	ldr	r1, [pc, #148]	@ (8001a30 <HAL_ADC_ConfigChannel+0x330>)
 800199a:	0018      	movs	r0, r3
 800199c:	f7fe fbc6 	bl	800012c <__udivsi3>
 80019a0:	0003      	movs	r3, r0
 80019a2:	001a      	movs	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	189b      	adds	r3, r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ae:	e002      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x2b6>
          {
            wait_loop_index--;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f9      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x2b0>
 80019bc:	e04d      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	4099      	lsls	r1, r3
 80019cc:	000b      	movs	r3, r1
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	400a      	ands	r2, r1
 80019d6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b10      	cmp	r3, #16
 80019de:	d007      	beq.n	80019f0 <HAL_ADC_ConfigChannel+0x2f0>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b11      	cmp	r3, #17
 80019e6:	d003      	beq.n	80019f0 <HAL_ADC_ConfigChannel+0x2f0>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d134      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_ADC_ConfigChannel+0x328>)
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d01f      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x33c>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b11      	cmp	r3, #17
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x308>
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_ADC_ConfigChannel+0x334>)
 8001a06:	e01a      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x33e>
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_ADC_ConfigChannel+0x338>)
 8001a0a:	e018      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x33e>
 8001a0c:	40012400 	.word	0x40012400
 8001a10:	0000076c 	.word	0x0000076c
 8001a14:	0800c084 	.word	0x0800c084
 8001a18:	0000076d 	.word	0x0000076d
 8001a1c:	00001001 	.word	0x00001001
 8001a20:	0000076e 	.word	0x0000076e
 8001a24:	00000772 	.word	0x00000772
 8001a28:	40012708 	.word	0x40012708
 8001a2c:	20000018 	.word	0x20000018
 8001a30:	000f4240 	.word	0x000f4240
 8001a34:	ffbfffff 	.word	0xffbfffff
 8001a38:	feffffff 	.word	0xfeffffff
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <HAL_ADC_ConfigChannel+0x370>)
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <HAL_ADC_ConfigChannel+0x374>)
 8001a40:	400b      	ands	r3, r1
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e009      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001a52:	230f      	movs	r3, #15
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2234      	movs	r2, #52	@ 0x34
 8001a5e:	2100      	movs	r1, #0
 8001a60:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a62:	230f      	movs	r3, #15
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	781b      	ldrb	r3, [r3, #0]
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	ff7fffff 	.word	0xff7fffff
 8001a74:	40012708 	.word	0x40012708

08001a78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e245      	b.n	8001f16 <HAL_CAN_Init+0x49e>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4ac6      	ldr	r2, [pc, #792]	@ (8001da8 <HAL_CAN_Init+0x330>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d006      	beq.n	8001aa2 <HAL_CAN_Init+0x2a>
 8001a94:	238f      	movs	r3, #143	@ 0x8f
 8001a96:	005a      	lsls	r2, r3, #1
 8001a98:	4bc4      	ldr	r3, [pc, #784]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff f853 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7e1b      	ldrb	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_CAN_Init+0x4a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7e1b      	ldrb	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d007      	beq.n	8001ac2 <HAL_CAN_Init+0x4a>
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	33ff      	adds	r3, #255	@ 0xff
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	4bbc      	ldr	r3, [pc, #752]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff f843 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7e5b      	ldrb	r3, [r3, #25]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_CAN_Init+0x68>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7e5b      	ldrb	r3, [r3, #25]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d006      	beq.n	8001ae0 <HAL_CAN_Init+0x68>
 8001ad2:	2390      	movs	r3, #144	@ 0x90
 8001ad4:	005a      	lsls	r2, r3, #1
 8001ad6:	4bb5      	ldr	r3, [pc, #724]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001ad8:	0011      	movs	r1, r2
 8001ada:	0018      	movs	r0, r3
 8001adc:	f7ff f834 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7e9b      	ldrb	r3, [r3, #26]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_CAN_Init+0x88>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7e9b      	ldrb	r3, [r3, #26]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d007      	beq.n	8001b00 <HAL_CAN_Init+0x88>
 8001af0:	2322      	movs	r3, #34	@ 0x22
 8001af2:	33ff      	adds	r3, #255	@ 0xff
 8001af4:	001a      	movs	r2, r3
 8001af6:	4bad      	ldr	r3, [pc, #692]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001af8:	0011      	movs	r1, r2
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff f824 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7edb      	ldrb	r3, [r3, #27]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00a      	beq.n	8001b1e <HAL_CAN_Init+0xa6>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7edb      	ldrb	r3, [r3, #27]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d006      	beq.n	8001b1e <HAL_CAN_Init+0xa6>
 8001b10:	2391      	movs	r3, #145	@ 0x91
 8001b12:	005a      	lsls	r2, r3, #1
 8001b14:	4ba5      	ldr	r3, [pc, #660]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001b16:	0011      	movs	r1, r2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff f815 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7f1b      	ldrb	r3, [r3, #28]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_CAN_Init+0xc6>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7f1b      	ldrb	r3, [r3, #28]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d007      	beq.n	8001b3e <HAL_CAN_Init+0xc6>
 8001b2e:	2324      	movs	r3, #36	@ 0x24
 8001b30:	33ff      	adds	r3, #255	@ 0xff
 8001b32:	001a      	movs	r2, r3
 8001b34:	4b9d      	ldr	r3, [pc, #628]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001b36:	0011      	movs	r1, r2
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff f805 	bl	8000b48 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7f5b      	ldrb	r3, [r3, #29]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00a      	beq.n	8001b5c <HAL_CAN_Init+0xe4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7f5b      	ldrb	r3, [r3, #29]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d006      	beq.n	8001b5c <HAL_CAN_Init+0xe4>
 8001b4e:	2392      	movs	r3, #146	@ 0x92
 8001b50:	005a      	lsls	r2, r3, #1
 8001b52:	4b96      	ldr	r3, [pc, #600]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001b54:	0011      	movs	r1, r2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7fe fff6 	bl	8000b48 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d019      	beq.n	8001b98 <HAL_CAN_Init+0x120>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	05db      	lsls	r3, r3, #23
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d013      	beq.n	8001b98 <HAL_CAN_Init+0x120>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	061b      	lsls	r3, r3, #24
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d00d      	beq.n	8001b98 <HAL_CAN_Init+0x120>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	23c0      	movs	r3, #192	@ 0xc0
 8001b82:	061b      	lsls	r3, r3, #24
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d007      	beq.n	8001b98 <HAL_CAN_Init+0x120>
 8001b88:	2326      	movs	r3, #38	@ 0x26
 8001b8a:	33ff      	adds	r3, #255	@ 0xff
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	4b87      	ldr	r3, [pc, #540]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001b90:	0011      	movs	r1, r2
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe ffd8 	bl	8000b48 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d018      	beq.n	8001bd2 <HAL_CAN_Init+0x15a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	045b      	lsls	r3, r3, #17
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d012      	beq.n	8001bd2 <HAL_CAN_Init+0x15a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	049b      	lsls	r3, r3, #18
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d00c      	beq.n	8001bd2 <HAL_CAN_Init+0x15a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	23c0      	movs	r3, #192	@ 0xc0
 8001bbe:	049b      	lsls	r3, r3, #18
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d006      	beq.n	8001bd2 <HAL_CAN_Init+0x15a>
 8001bc4:	2393      	movs	r3, #147	@ 0x93
 8001bc6:	005a      	lsls	r2, r3, #1
 8001bc8:	4b78      	ldr	r3, [pc, #480]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001bca:	0011      	movs	r1, r2
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe ffbb 	bl	8000b48 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d061      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	025b      	lsls	r3, r3, #9
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d05b      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	029b      	lsls	r3, r3, #10
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d055      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	23c0      	movs	r3, #192	@ 0xc0
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d04f      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	02db      	lsls	r3, r3, #11
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d049      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	23a0      	movs	r3, #160	@ 0xa0
 8001c10:	02db      	lsls	r3, r3, #11
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d043      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	23c0      	movs	r3, #192	@ 0xc0
 8001c1c:	02db      	lsls	r3, r3, #11
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d03d      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	23e0      	movs	r3, #224	@ 0xe0
 8001c28:	02db      	lsls	r3, r3, #11
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d037      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	031b      	lsls	r3, r3, #12
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d031      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	2390      	movs	r3, #144	@ 0x90
 8001c40:	031b      	lsls	r3, r3, #12
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d02b      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	23a0      	movs	r3, #160	@ 0xa0
 8001c4c:	031b      	lsls	r3, r3, #12
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d025      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	23b0      	movs	r3, #176	@ 0xb0
 8001c58:	031b      	lsls	r3, r3, #12
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d01f      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	23c0      	movs	r3, #192	@ 0xc0
 8001c64:	031b      	lsls	r3, r3, #12
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d019      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	23d0      	movs	r3, #208	@ 0xd0
 8001c70:	031b      	lsls	r3, r3, #12
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d013      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	23e0      	movs	r3, #224	@ 0xe0
 8001c7c:	031b      	lsls	r3, r3, #12
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d00d      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	23f0      	movs	r3, #240	@ 0xf0
 8001c88:	031b      	lsls	r3, r3, #12
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d007      	beq.n	8001c9e <HAL_CAN_Init+0x226>
 8001c8e:	2328      	movs	r3, #40	@ 0x28
 8001c90:	33ff      	adds	r3, #255	@ 0xff
 8001c92:	001a      	movs	r2, r3
 8001c94:	4b45      	ldr	r3, [pc, #276]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001c96:	0011      	movs	r1, r2
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe ff55 	bl	8000b48 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d030      	beq.n	8001d08 <HAL_CAN_Init+0x290>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	2380      	movs	r3, #128	@ 0x80
 8001cac:	035b      	lsls	r3, r3, #13
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d02a      	beq.n	8001d08 <HAL_CAN_Init+0x290>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	2380      	movs	r3, #128	@ 0x80
 8001cb8:	039b      	lsls	r3, r3, #14
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d024      	beq.n	8001d08 <HAL_CAN_Init+0x290>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	23c0      	movs	r3, #192	@ 0xc0
 8001cc4:	039b      	lsls	r3, r3, #14
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d01e      	beq.n	8001d08 <HAL_CAN_Init+0x290>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	03db      	lsls	r3, r3, #15
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d018      	beq.n	8001d08 <HAL_CAN_Init+0x290>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	23a0      	movs	r3, #160	@ 0xa0
 8001cdc:	03db      	lsls	r3, r3, #15
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d012      	beq.n	8001d08 <HAL_CAN_Init+0x290>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	23c0      	movs	r3, #192	@ 0xc0
 8001ce8:	03db      	lsls	r3, r3, #15
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d00c      	beq.n	8001d08 <HAL_CAN_Init+0x290>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	23e0      	movs	r3, #224	@ 0xe0
 8001cf4:	03db      	lsls	r3, r3, #15
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d006      	beq.n	8001d08 <HAL_CAN_Init+0x290>
 8001cfa:	2394      	movs	r3, #148	@ 0x94
 8001cfc:	005a      	lsls	r2, r3, #1
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001d00:	0011      	movs	r1, r2
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7fe ff20 	bl	8000b48 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_CAN_Init+0x2a4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d907      	bls.n	8001d2c <HAL_CAN_Init+0x2b4>
 8001d1c:	232a      	movs	r3, #42	@ 0x2a
 8001d1e:	33ff      	adds	r3, #255	@ 0xff
 8001d20:	001a      	movs	r2, r3
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <HAL_CAN_Init+0x334>)
 8001d24:	0011      	movs	r1, r2
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7fe ff0e 	bl	8000b48 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	5c9b      	ldrb	r3, [r3, r2]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d103      	bne.n	8001d40 <HAL_CAN_Init+0x2c8>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff f8e4 	bl	8000f08 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff fa7e 	bl	8001250 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d58:	e013      	b.n	8001d82 <HAL_CAN_Init+0x30a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d5a:	f7ff fa79 	bl	8001250 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b0a      	cmp	r3, #10
 8001d66:	d90c      	bls.n	8001d82 <HAL_CAN_Init+0x30a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	2280      	movs	r2, #128	@ 0x80
 8001d6e:	0292      	lsls	r2, r2, #10
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	2105      	movs	r1, #5
 8001d7c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0c9      	b.n	8001f16 <HAL_CAN_Init+0x49e>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d0e5      	beq.n	8001d5a <HAL_CAN_Init+0x2e2>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2102      	movs	r1, #2
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d9e:	f7ff fa57 	bl	8001250 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da6:	e017      	b.n	8001dd8 <HAL_CAN_Init+0x360>
 8001da8:	40006400 	.word	0x40006400
 8001dac:	0800c0bc 	.word	0x0800c0bc
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001db0:	f7ff fa4e 	bl	8001250 <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	d90c      	bls.n	8001dd8 <HAL_CAN_Init+0x360>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	0292      	lsls	r2, r2, #10
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	2105      	movs	r1, #5
 8001dd2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e09e      	b.n	8001f16 <HAL_CAN_Init+0x49e>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d1e5      	bne.n	8001db0 <HAL_CAN_Init+0x338>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7e1b      	ldrb	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d108      	bne.n	8001dfe <HAL_CAN_Init+0x386>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2180      	movs	r1, #128	@ 0x80
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e007      	b.n	8001e0e <HAL_CAN_Init+0x396>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2180      	movs	r1, #128	@ 0x80
 8001e0a:	438a      	bics	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7e5b      	ldrb	r3, [r3, #25]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d108      	bne.n	8001e28 <HAL_CAN_Init+0x3b0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2140      	movs	r1, #64	@ 0x40
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e007      	b.n	8001e38 <HAL_CAN_Init+0x3c0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2140      	movs	r1, #64	@ 0x40
 8001e34:	438a      	bics	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7e9b      	ldrb	r3, [r3, #26]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d108      	bne.n	8001e52 <HAL_CAN_Init+0x3da>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2120      	movs	r1, #32
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e007      	b.n	8001e62 <HAL_CAN_Init+0x3ea>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	438a      	bics	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7edb      	ldrb	r3, [r3, #27]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d108      	bne.n	8001e7c <HAL_CAN_Init+0x404>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2110      	movs	r1, #16
 8001e76:	438a      	bics	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e007      	b.n	8001e8c <HAL_CAN_Init+0x414>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2110      	movs	r1, #16
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7f1b      	ldrb	r3, [r3, #28]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d108      	bne.n	8001ea6 <HAL_CAN_Init+0x42e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e007      	b.n	8001eb6 <HAL_CAN_Init+0x43e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7f5b      	ldrb	r3, [r3, #29]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d108      	bne.n	8001ed0 <HAL_CAN_Init+0x458>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2104      	movs	r1, #4
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e007      	b.n	8001ee0 <HAL_CAN_Init+0x468>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2104      	movs	r1, #4
 8001edc:	438a      	bics	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	2101      	movs	r1, #1
 8001f12:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			@ (mov r8, r8)

08001f20 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f30:	2013      	movs	r0, #19
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	2120      	movs	r1, #32
 8001f38:	5c52      	ldrb	r2, [r2, r1]
 8001f3a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	18bb      	adds	r3, r7, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d004      	beq.n	8001f50 <HAL_CAN_ConfigFilter+0x30>
 8001f46:	18bb      	adds	r3, r7, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d000      	beq.n	8001f50 <HAL_CAN_ConfigFilter+0x30>
 8001f4e:	e141      	b.n	80021d4 <HAL_CAN_ConfigFilter+0x2b4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	025b      	lsls	r3, r3, #9
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d305      	bcc.n	8001f68 <HAL_CAN_ConfigFilter+0x48>
 8001f5c:	4aa3      	ldr	r2, [pc, #652]	@ (80021ec <HAL_CAN_ConfigFilter+0x2cc>)
 8001f5e:	4ba4      	ldr	r3, [pc, #656]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 8001f60:	0011      	movs	r1, r2
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7fe fdf0 	bl	8000b48 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d305      	bcc.n	8001f80 <HAL_CAN_ConfigFilter+0x60>
 8001f74:	4a9f      	ldr	r2, [pc, #636]	@ (80021f4 <HAL_CAN_ConfigFilter+0x2d4>)
 8001f76:	4b9e      	ldr	r3, [pc, #632]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 8001f78:	0011      	movs	r1, r2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7fe fde4 	bl	8000b48 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	025b      	lsls	r3, r3, #9
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d306      	bcc.n	8001f9a <HAL_CAN_ConfigFilter+0x7a>
 8001f8c:	23d5      	movs	r3, #213	@ 0xd5
 8001f8e:	009a      	lsls	r2, r3, #2
 8001f90:	4b97      	ldr	r3, [pc, #604]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7fe fdd7 	bl	8000b48 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	025b      	lsls	r3, r3, #9
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d305      	bcc.n	8001fb2 <HAL_CAN_ConfigFilter+0x92>
 8001fa6:	4a94      	ldr	r2, [pc, #592]	@ (80021f8 <HAL_CAN_ConfigFilter+0x2d8>)
 8001fa8:	4b91      	ldr	r3, [pc, #580]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 8001faa:	0011      	movs	r1, r2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7fe fdcb 	bl	8000b48 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_CAN_ConfigFilter+0xae>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_CAN_ConfigFilter+0xae>
 8001fc2:	4a8e      	ldr	r2, [pc, #568]	@ (80021fc <HAL_CAN_ConfigFilter+0x2dc>)
 8001fc4:	4b8a      	ldr	r3, [pc, #552]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe fdbd 	bl	8000b48 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_CAN_ConfigFilter+0xca>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d005      	beq.n	8001fea <HAL_CAN_ConfigFilter+0xca>
 8001fde:	4a88      	ldr	r2, [pc, #544]	@ (8002200 <HAL_CAN_ConfigFilter+0x2e0>)
 8001fe0:	4b83      	ldr	r3, [pc, #524]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7fe fdaf 	bl	8000b48 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_CAN_ConfigFilter+0xe8>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d006      	beq.n	8002008 <HAL_CAN_ConfigFilter+0xe8>
 8001ffa:	23d6      	movs	r3, #214	@ 0xd6
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 8002000:	0011      	movs	r1, r2
 8002002:	0018      	movs	r0, r3
 8002004:	f7fe fda0 	bl	8000b48 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_CAN_ConfigFilter+0x104>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d005      	beq.n	8002024 <HAL_CAN_ConfigFilter+0x104>
 8002018:	4a7a      	ldr	r2, [pc, #488]	@ (8002204 <HAL_CAN_ConfigFilter+0x2e4>)
 800201a:	4b75      	ldr	r3, [pc, #468]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 800201c:	0011      	movs	r1, r2
 800201e:	0018      	movs	r0, r3
 8002020:	f7fe fd92 	bl	8000b48 <assert_failed>

    /* CAN is single instance with 14 dedicated filters banks */

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	2b0d      	cmp	r3, #13
 800202a:	d905      	bls.n	8002038 <HAL_CAN_ConfigFilter+0x118>
 800202c:	4a76      	ldr	r2, [pc, #472]	@ (8002208 <HAL_CAN_ConfigFilter+0x2e8>)
 800202e:	4b70      	ldr	r3, [pc, #448]	@ (80021f0 <HAL_CAN_ConfigFilter+0x2d0>)
 8002030:	0011      	movs	r1, r2
 8002032:	0018      	movs	r0, r3
 8002034:	f7fe fd88 	bl	8000b48 <assert_failed>

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	58d3      	ldr	r3, [r2, r3]
 8002040:	2201      	movs	r2, #1
 8002042:	431a      	orrs	r2, r3
 8002044:	0011      	movs	r1, r2
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	221f      	movs	r2, #31
 8002054:	4013      	ands	r3, r2
 8002056:	2201      	movs	r2, #1
 8002058:	409a      	lsls	r2, r3
 800205a:	0013      	movs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	2387      	movs	r3, #135	@ 0x87
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	58d3      	ldr	r3, [r2, r3]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	43d2      	mvns	r2, r2
 800206a:	401a      	ands	r2, r3
 800206c:	0011      	movs	r1, r2
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	2387      	movs	r3, #135	@ 0x87
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d129      	bne.n	80020d2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	2383      	movs	r3, #131	@ 0x83
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	58d3      	ldr	r3, [r2, r3]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	43d2      	mvns	r2, r2
 800208a:	401a      	ands	r2, r3
 800208c:	0011      	movs	r1, r2
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	2383      	movs	r3, #131	@ 0x83
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020a8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3248      	adds	r2, #72	@ 0x48
 80020ae:	00d2      	lsls	r2, r2, #3
 80020b0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020c6:	6979      	ldr	r1, [r7, #20]
 80020c8:	3348      	adds	r3, #72	@ 0x48
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	18cb      	adds	r3, r1, r3
 80020ce:	3304      	adds	r3, #4
 80020d0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d128      	bne.n	800212c <HAL_CAN_ConfigFilter+0x20c>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	2383      	movs	r3, #131	@ 0x83
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	58d2      	ldr	r2, [r2, r3]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	0011      	movs	r1, r2
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	2383      	movs	r3, #131	@ 0x83
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002102:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3248      	adds	r2, #72	@ 0x48
 8002108:	00d2      	lsls	r2, r2, #3
 800210a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800211e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002120:	6979      	ldr	r1, [r7, #20]
 8002122:	3348      	adds	r3, #72	@ 0x48
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	18cb      	adds	r3, r1, r3
 8002128:	3304      	adds	r3, #4
 800212a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10c      	bne.n	800214e <HAL_CAN_ConfigFilter+0x22e>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	2381      	movs	r3, #129	@ 0x81
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	58d3      	ldr	r3, [r2, r3]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	43d2      	mvns	r2, r2
 8002140:	401a      	ands	r2, r3
 8002142:	0011      	movs	r1, r2
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	2381      	movs	r3, #129	@ 0x81
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	50d1      	str	r1, [r2, r3]
 800214c:	e00a      	b.n	8002164 <HAL_CAN_ConfigFilter+0x244>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	2381      	movs	r3, #129	@ 0x81
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	58d2      	ldr	r2, [r2, r3]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	431a      	orrs	r2, r3
 800215a:	0011      	movs	r1, r2
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	2381      	movs	r3, #129	@ 0x81
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10c      	bne.n	8002186 <HAL_CAN_ConfigFilter+0x266>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	2385      	movs	r3, #133	@ 0x85
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	58d3      	ldr	r3, [r2, r3]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	43d2      	mvns	r2, r2
 8002178:	401a      	ands	r2, r3
 800217a:	0011      	movs	r1, r2
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	2385      	movs	r3, #133	@ 0x85
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	50d1      	str	r1, [r2, r3]
 8002184:	e00a      	b.n	800219c <HAL_CAN_ConfigFilter+0x27c>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	2385      	movs	r3, #133	@ 0x85
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	58d2      	ldr	r2, [r2, r3]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	431a      	orrs	r2, r3
 8002192:	0011      	movs	r1, r2
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	2385      	movs	r3, #133	@ 0x85
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d10a      	bne.n	80021ba <HAL_CAN_ConfigFilter+0x29a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	2387      	movs	r3, #135	@ 0x87
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	58d2      	ldr	r2, [r2, r3]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	0011      	movs	r1, r2
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	2387      	movs	r3, #135	@ 0x87
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	58d3      	ldr	r3, [r2, r3]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e007      	b.n	80021e4 <HAL_CAN_ConfigFilter+0x2c4>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	2280      	movs	r2, #128	@ 0x80
 80021da:	02d2      	lsls	r2, r2, #11
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
  }
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b006      	add	sp, #24
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	00000352 	.word	0x00000352
 80021f0:	0800c0bc 	.word	0x0800c0bc
 80021f4:	00000353 	.word	0x00000353
 80021f8:	00000355 	.word	0x00000355
 80021fc:	00000356 	.word	0x00000356
 8002200:	00000357 	.word	0x00000357
 8002204:	00000359 	.word	0x00000359
 8002208:	0000035e 	.word	0x0000035e

0800220c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	5c9b      	ldrb	r3, [r3, r2]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d12f      	bne.n	8002280 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	2102      	movs	r1, #2
 8002226:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2101      	movs	r1, #1
 8002234:	438a      	bics	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff f80a 	bl	8001250 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002240:	e013      	b.n	800226a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002242:	f7ff f805 	bl	8001250 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b0a      	cmp	r3, #10
 800224e:	d90c      	bls.n	800226a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	2280      	movs	r2, #128	@ 0x80
 8002256:	0292      	lsls	r2, r2, #10
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2220      	movs	r2, #32
 8002262:	2105      	movs	r1, #5
 8002264:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e012      	b.n	8002290 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	4013      	ands	r3, r2
 8002274:	d1e5      	bne.n	8002242 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e007      	b.n	8002290 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	2280      	movs	r2, #128	@ 0x80
 8002286:	0312      	lsls	r2, r2, #12
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
  }
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	2120      	movs	r1, #32
 80022ae:	5c52      	ldrb	r2, [r2, r1]
 80022b0:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_CAN_AddTxMessage+0x3e>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d005      	beq.n	80022d6 <HAL_CAN_AddTxMessage+0x3e>
 80022ca:	4a86      	ldr	r2, [pc, #536]	@ (80024e4 <HAL_CAN_AddTxMessage+0x24c>)
 80022cc:	4b86      	ldr	r3, [pc, #536]	@ (80024e8 <HAL_CAN_AddTxMessage+0x250>)
 80022ce:	0011      	movs	r1, r2
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7fe fc39 	bl	8000b48 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_CAN_AddTxMessage+0x5a>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d005      	beq.n	80022f2 <HAL_CAN_AddTxMessage+0x5a>
 80022e6:	4a81      	ldr	r2, [pc, #516]	@ (80024ec <HAL_CAN_AddTxMessage+0x254>)
 80022e8:	4b7f      	ldr	r3, [pc, #508]	@ (80024e8 <HAL_CAN_AddTxMessage+0x250>)
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7fe fc2b 	bl	8000b48 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d906      	bls.n	8002308 <HAL_CAN_AddTxMessage+0x70>
 80022fa:	2398      	movs	r3, #152	@ 0x98
 80022fc:	00da      	lsls	r2, r3, #3
 80022fe:	4b7a      	ldr	r3, [pc, #488]	@ (80024e8 <HAL_CAN_AddTxMessage+0x250>)
 8002300:	0011      	movs	r1, r2
 8002302:	0018      	movs	r0, r3
 8002304:	f7fe fc20 	bl	8000b48 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10c      	bne.n	800232a <HAL_CAN_AddTxMessage+0x92>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	429a      	cmp	r2, r3
 800231a:	d312      	bcc.n	8002342 <HAL_CAN_AddTxMessage+0xaa>
 800231c:	4a74      	ldr	r2, [pc, #464]	@ (80024f0 <HAL_CAN_AddTxMessage+0x258>)
 800231e:	4b72      	ldr	r3, [pc, #456]	@ (80024e8 <HAL_CAN_AddTxMessage+0x250>)
 8002320:	0011      	movs	r1, r2
 8002322:	0018      	movs	r0, r3
 8002324:	f7fe fc10 	bl	8000b48 <assert_failed>
 8002328:	e00b      	b.n	8002342 <HAL_CAN_AddTxMessage+0xaa>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	059b      	lsls	r3, r3, #22
 8002332:	429a      	cmp	r2, r3
 8002334:	d305      	bcc.n	8002342 <HAL_CAN_AddTxMessage+0xaa>
 8002336:	4a6f      	ldr	r2, [pc, #444]	@ (80024f4 <HAL_CAN_AddTxMessage+0x25c>)
 8002338:	4b6b      	ldr	r3, [pc, #428]	@ (80024e8 <HAL_CAN_AddTxMessage+0x250>)
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f7fe fc03 	bl	8000b48 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	7d1b      	ldrb	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_CAN_AddTxMessage+0xc6>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	7d1b      	ldrb	r3, [r3, #20]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d005      	beq.n	800235e <HAL_CAN_AddTxMessage+0xc6>
 8002352:	4a69      	ldr	r2, [pc, #420]	@ (80024f8 <HAL_CAN_AddTxMessage+0x260>)
 8002354:	4b64      	ldr	r3, [pc, #400]	@ (80024e8 <HAL_CAN_AddTxMessage+0x250>)
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe fbf5 	bl	8000b48 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800235e:	221f      	movs	r2, #31
 8002360:	18bb      	adds	r3, r7, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d004      	beq.n	8002372 <HAL_CAN_AddTxMessage+0xda>
 8002368:	18bb      	adds	r3, r7, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d000      	beq.n	8002372 <HAL_CAN_AddTxMessage+0xda>
 8002370:	e0ab      	b.n	80024ca <HAL_CAN_AddTxMessage+0x232>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	04db      	lsls	r3, r3, #19
 8002378:	4013      	ands	r3, r2
 800237a:	d10a      	bne.n	8002392 <HAL_CAN_AddTxMessage+0xfa>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	051b      	lsls	r3, r3, #20
 8002382:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002384:	d105      	bne.n	8002392 <HAL_CAN_AddTxMessage+0xfa>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	055b      	lsls	r3, r3, #21
 800238c:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800238e:	d100      	bne.n	8002392 <HAL_CAN_AddTxMessage+0xfa>
 8002390:	e092      	b.n	80024b8 <HAL_CAN_AddTxMessage+0x220>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	0e1b      	lsrs	r3, r3, #24
 8002396:	2203      	movs	r2, #3
 8002398:	4013      	ands	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800239c:	2201      	movs	r2, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	409a      	lsls	r2, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_CAN_AddTxMessage+0x130>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4311      	orrs	r1, r2
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	3218      	adds	r2, #24
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	50d1      	str	r1, [r2, r3]
 80023c6:	e00f      	b.n	80023e8 <HAL_CAN_AddTxMessage+0x150>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023d2:	431a      	orrs	r2, r3
 80023d4:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80023de:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	3218      	adds	r2, #24
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3318      	adds	r3, #24
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	18cb      	adds	r3, r1, r3
 80023f8:	3304      	adds	r3, #4
 80023fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	7d1b      	ldrb	r3, [r3, #20]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d112      	bne.n	800242a <HAL_CAN_AddTxMessage+0x192>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3318      	adds	r3, #24
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	18d3      	adds	r3, r2, r3
 8002410:	3304      	adds	r3, #4
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6819      	ldr	r1, [r3, #0]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3318      	adds	r3, #24
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	18cb      	adds	r3, r1, r3
 8002426:	3304      	adds	r3, #4
 8002428:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3307      	adds	r3, #7
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	061a      	lsls	r2, r3, #24
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3306      	adds	r3, #6
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3305      	adds	r3, #5
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	0019      	movs	r1, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	6979      	ldr	r1, [r7, #20]
 8002456:	23c6      	movs	r3, #198	@ 0xc6
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	0109      	lsls	r1, r1, #4
 800245c:	1841      	adds	r1, r0, r1
 800245e:	18cb      	adds	r3, r1, r3
 8002460:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3303      	adds	r3, #3
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	061a      	lsls	r2, r3, #24
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3302      	adds	r3, #2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3301      	adds	r3, #1
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	0019      	movs	r1, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	6979      	ldr	r1, [r7, #20]
 800248c:	23c4      	movs	r3, #196	@ 0xc4
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	0109      	lsls	r1, r1, #4
 8002492:	1841      	adds	r1, r0, r1
 8002494:	18cb      	adds	r3, r1, r3
 8002496:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	3218      	adds	r2, #24
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	58d2      	ldr	r2, [r2, r3]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	4311      	orrs	r1, r2
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	3218      	adds	r2, #24
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e010      	b.n	80024da <HAL_CAN_AddTxMessage+0x242>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	2280      	movs	r2, #128	@ 0x80
 80024be:	0392      	lsls	r2, r2, #14
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e007      	b.n	80024da <HAL_CAN_AddTxMessage+0x242>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	2280      	movs	r2, #128	@ 0x80
 80024d0:	02d2      	lsls	r2, r2, #11
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
  }
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b008      	add	sp, #32
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	000004be 	.word	0x000004be
 80024e8:	0800c0bc 	.word	0x0800c0bc
 80024ec:	000004bf 	.word	0x000004bf
 80024f0:	000004c3 	.word	0x000004c3
 80024f4:	000004c7 	.word	0x000004c7
 80024f8:	000004c9 	.word	0x000004c9

080024fc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800250a:	2317      	movs	r3, #23
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	2120      	movs	r1, #32
 8002512:	5c52      	ldrb	r2, [r2, r1]
 8002514:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_CAN_GetRxMessage+0x32>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_CAN_GetRxMessage+0x32>
 8002522:	4a92      	ldr	r2, [pc, #584]	@ (800276c <HAL_CAN_GetRxMessage+0x270>)
 8002524:	4b92      	ldr	r3, [pc, #584]	@ (8002770 <HAL_CAN_GetRxMessage+0x274>)
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f7fe fb0d 	bl	8000b48 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800252e:	2217      	movs	r2, #23
 8002530:	18bb      	adds	r3, r7, r2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d004      	beq.n	8002542 <HAL_CAN_GetRxMessage+0x46>
 8002538:	18bb      	adds	r3, r7, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d000      	beq.n	8002542 <HAL_CAN_GetRxMessage+0x46>
 8002540:	e107      	b.n	8002752 <HAL_CAN_GetRxMessage+0x256>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10e      	bne.n	8002566 <HAL_CAN_GetRxMessage+0x6a>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2203      	movs	r2, #3
 8002550:	4013      	ands	r3, r2
 8002552:	d117      	bne.n	8002584 <HAL_CAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	0392      	lsls	r2, r2, #14
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0fd      	b.n	8002762 <HAL_CAN_GetRxMessage+0x266>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2203      	movs	r2, #3
 800256e:	4013      	ands	r3, r2
 8002570:	d108      	bne.n	8002584 <HAL_CAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	0392      	lsls	r2, r2, #14
 800257a:	431a      	orrs	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0ee      	b.n	8002762 <HAL_CAN_GetRxMessage+0x266>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	321b      	adds	r2, #27
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	58d3      	ldr	r3, [r2, r3]
 8002590:	2204      	movs	r2, #4
 8002592:	401a      	ands	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <HAL_CAN_GetRxMessage+0xbc>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	321b      	adds	r2, #27
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	58d3      	ldr	r3, [r2, r3]
 80025ac:	0d5b      	lsrs	r3, r3, #21
 80025ae:	055b      	lsls	r3, r3, #21
 80025b0:	0d5a      	lsrs	r2, r3, #21
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e00a      	b.n	80025ce <HAL_CAN_GetRxMessage+0xd2>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	321b      	adds	r2, #27
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	58d3      	ldr	r3, [r2, r3]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	321b      	adds	r2, #27
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	58d3      	ldr	r3, [r2, r3]
 80025da:	2202      	movs	r2, #2
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	331b      	adds	r3, #27
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	18d3      	adds	r3, r2, r3
 80025ee:	3304      	adds	r3, #4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	4013      	ands	r3, r2
 80025f6:	d003      	beq.n	8002600 <HAL_CAN_GetRxMessage+0x104>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2208      	movs	r2, #8
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	e00b      	b.n	8002618 <HAL_CAN_GetRxMessage+0x11c>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	331b      	adds	r3, #27
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	3304      	adds	r3, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	220f      	movs	r2, #15
 8002612:	401a      	ands	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	331b      	adds	r3, #27
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	18d3      	adds	r3, r2, r3
 8002624:	3304      	adds	r3, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	22ff      	movs	r2, #255	@ 0xff
 800262c:	401a      	ands	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	331b      	adds	r3, #27
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	18d3      	adds	r3, r2, r3
 800263e:	3304      	adds	r3, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	041b      	lsls	r3, r3, #16
 8002646:	0c1a      	lsrs	r2, r3, #16
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	23dc      	movs	r3, #220	@ 0xdc
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	188a      	adds	r2, r1, r2
 800265a:	18d3      	adds	r3, r2, r3
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	23dc      	movs	r3, #220	@ 0xdc
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	188a      	adds	r2, r1, r2
 8002672:	18d3      	adds	r3, r2, r3
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	0a1a      	lsrs	r2, r3, #8
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	23dc      	movs	r3, #220	@ 0xdc
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	188a      	adds	r2, r1, r2
 800268e:	18d3      	adds	r3, r2, r3
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0c1a      	lsrs	r2, r3, #16
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3302      	adds	r3, #2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	23dc      	movs	r3, #220	@ 0xdc
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	188a      	adds	r2, r1, r2
 80026aa:	18d3      	adds	r3, r2, r3
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e1a      	lsrs	r2, r3, #24
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	3303      	adds	r3, #3
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	23de      	movs	r3, #222	@ 0xde
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	188a      	adds	r2, r1, r2
 80026c6:	18d3      	adds	r3, r2, r3
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	3304      	adds	r3, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	23de      	movs	r3, #222	@ 0xde
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	188a      	adds	r2, r1, r2
 80026e0:	18d3      	adds	r3, r2, r3
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0a1a      	lsrs	r2, r3, #8
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3305      	adds	r3, #5
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	23de      	movs	r3, #222	@ 0xde
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	188a      	adds	r2, r1, r2
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0c1a      	lsrs	r2, r3, #16
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	3306      	adds	r3, #6
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	23de      	movs	r3, #222	@ 0xde
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	188a      	adds	r2, r1, r2
 8002718:	18d3      	adds	r3, r2, r3
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e1a      	lsrs	r2, r3, #24
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3307      	adds	r3, #7
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d108      	bne.n	800273e <HAL_CAN_GetRxMessage+0x242>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2120      	movs	r1, #32
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	e007      	b.n	800274e <HAL_CAN_GetRxMessage+0x252>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2120      	movs	r1, #32
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e007      	b.n	8002762 <HAL_CAN_GetRxMessage+0x266>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	2280      	movs	r2, #128	@ 0x80
 8002758:	02d2      	lsls	r2, r2, #11
 800275a:	431a      	orrs	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
  }
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b006      	add	sp, #24
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	000005c9 	.word	0x000005c9
 8002770:	0800c0bc 	.word	0x0800c0bc

08002774 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800277e:	230f      	movs	r3, #15
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	2120      	movs	r1, #32
 8002786:	5c52      	ldrb	r2, [r2, r1]
 8002788:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4a13      	ldr	r2, [pc, #76]	@ (80027dc <HAL_CAN_ActivateNotification+0x68>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d905      	bls.n	800279e <HAL_CAN_ActivateNotification+0x2a>
 8002792:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <HAL_CAN_ActivateNotification+0x6c>)
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <HAL_CAN_ActivateNotification+0x70>)
 8002796:	0011      	movs	r1, r2
 8002798:	0018      	movs	r0, r3
 800279a:	f7fe f9d5 	bl	8000b48 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800279e:	220f      	movs	r2, #15
 80027a0:	18bb      	adds	r3, r7, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d003      	beq.n	80027b0 <HAL_CAN_ActivateNotification+0x3c>
 80027a8:	18bb      	adds	r3, r7, r2
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d109      	bne.n	80027c4 <HAL_CAN_ActivateNotification+0x50>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6959      	ldr	r1, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e007      	b.n	80027d4 <HAL_CAN_ActivateNotification+0x60>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	2280      	movs	r2, #128	@ 0x80
 80027ca:	02d2      	lsls	r2, r2, #11
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
  }
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	00038f7f 	.word	0x00038f7f
 80027e0:	00000662 	.word	0x00000662
 80027e4:	0800c0bc 	.word	0x0800c0bc

080027e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	@ 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	d100      	bne.n	800282e <HAL_CAN_IRQHandler+0x46>
 800282c:	e084      	b.n	8002938 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d024      	beq.n	8002880 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2201      	movs	r2, #1
 800283c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 f981 	bl	8002b50 <HAL_CAN_TxMailbox0CompleteCallback>
 800284e:	e017      	b.n	8002880 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2204      	movs	r2, #4
 8002854:	4013      	ands	r3, r2
 8002856:	d005      	beq.n	8002864 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	2280      	movs	r2, #128	@ 0x80
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	4313      	orrs	r3, r2
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
 8002862:	e00d      	b.n	8002880 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2208      	movs	r2, #8
 8002868:	4013      	ands	r3, r2
 800286a:	d005      	beq.n	8002878 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286e:	2280      	movs	r2, #128	@ 0x80
 8002870:	0152      	lsls	r2, r2, #5
 8002872:	4313      	orrs	r3, r2
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
 8002876:	e003      	b.n	8002880 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f980 	bl	8002b80 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	2380      	movs	r3, #128	@ 0x80
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4013      	ands	r3, r2
 8002888:	d028      	beq.n	80028dc <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0052      	lsls	r2, r2, #1
 8002892:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4013      	ands	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 f95d 	bl	8002b60 <HAL_CAN_TxMailbox1CompleteCallback>
 80028a6:	e019      	b.n	80028dc <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4013      	ands	r3, r2
 80028b0:	d005      	beq.n	80028be <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	2280      	movs	r2, #128	@ 0x80
 80028b6:	0192      	lsls	r2, r2, #6
 80028b8:	4313      	orrs	r3, r2
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80028bc:	e00e      	b.n	80028dc <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4013      	ands	r3, r2
 80028c6:	d005      	beq.n	80028d4 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	2280      	movs	r2, #128	@ 0x80
 80028cc:	01d2      	lsls	r2, r2, #7
 80028ce:	4313      	orrs	r3, r2
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d2:	e003      	b.n	80028dc <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 f95a 	bl	8002b90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	2380      	movs	r3, #128	@ 0x80
 80028e0:	025b      	lsls	r3, r3, #9
 80028e2:	4013      	ands	r3, r2
 80028e4:	d028      	beq.n	8002938 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2280      	movs	r2, #128	@ 0x80
 80028ec:	0252      	lsls	r2, r2, #9
 80028ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	2380      	movs	r3, #128	@ 0x80
 80028f4:	029b      	lsls	r3, r3, #10
 80028f6:	4013      	ands	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 f937 	bl	8002b70 <HAL_CAN_TxMailbox2CompleteCallback>
 8002902:	e019      	b.n	8002938 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	02db      	lsls	r3, r3, #11
 800290a:	4013      	ands	r3, r2
 800290c:	d005      	beq.n	800291a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	0212      	lsls	r2, r2, #8
 8002914:	4313      	orrs	r3, r2
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
 8002918:	e00e      	b.n	8002938 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	031b      	lsls	r3, r3, #12
 8002920:	4013      	ands	r3, r2
 8002922:	d005      	beq.n	8002930 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	2280      	movs	r2, #128	@ 0x80
 8002928:	0252      	lsls	r2, r2, #9
 800292a:	4313      	orrs	r3, r2
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
 800292e:	e003      	b.n	8002938 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f934 	bl	8002ba0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	2208      	movs	r2, #8
 800293c:	4013      	ands	r3, r2
 800293e:	d00c      	beq.n	800295a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2210      	movs	r2, #16
 8002944:	4013      	ands	r3, r2
 8002946:	d008      	beq.n	800295a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	2280      	movs	r2, #128	@ 0x80
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	4313      	orrs	r3, r2
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2210      	movs	r2, #16
 8002958:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2204      	movs	r2, #4
 800295e:	4013      	ands	r3, r2
 8002960:	d00b      	beq.n	800297a <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2208      	movs	r2, #8
 8002966:	4013      	ands	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2208      	movs	r2, #8
 8002970:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 f91b 	bl	8002bb0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2202      	movs	r2, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2203      	movs	r2, #3
 800298a:	4013      	ands	r3, r2
 800298c:	d003      	beq.n	8002996 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	0018      	movs	r0, r3
 8002992:	f7fd fdab 	bl	80004ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	2240      	movs	r2, #64	@ 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	d00c      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2210      	movs	r2, #16
 80029a2:	4013      	ands	r3, r2
 80029a4:	d008      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	00d2      	lsls	r2, r2, #3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2210      	movs	r2, #16
 80029b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	2220      	movs	r2, #32
 80029bc:	4013      	ands	r3, r2
 80029be:	d00b      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2208      	movs	r2, #8
 80029c4:	4013      	ands	r3, r2
 80029c6:	d007      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2208      	movs	r2, #8
 80029ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f8fc 	bl	8002bd0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	2210      	movs	r2, #16
 80029dc:	4013      	ands	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2203      	movs	r2, #3
 80029e8:	4013      	ands	r3, r2
 80029ea:	d003      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f8e6 	bl	8002bc0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	029b      	lsls	r3, r3, #10
 80029fa:	4013      	ands	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2210      	movs	r2, #16
 8002a02:	4013      	ands	r3, r2
 8002a04:	d007      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 f8e5 	bl	8002be0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a16:	6a3a      	ldr	r2, [r7, #32]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	025b      	lsls	r3, r3, #9
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00b      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2208      	movs	r2, #8
 8002a24:	4013      	ands	r3, r2
 8002a26:	d007      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f8dc 	bl	8002bf0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a38:	6a3a      	ldr	r2, [r7, #32]
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d100      	bne.n	8002a44 <HAL_CAN_IRQHandler+0x25c>
 8002a42:	e074      	b.n	8002b2e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2204      	movs	r2, #4
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <HAL_CAN_IRQHandler+0x266>
 8002a4c:	e06b      	b.n	8002b26 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a4e:	6a3a      	ldr	r2, [r7, #32]
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a5e:	d003      	beq.n	8002a68 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	2201      	movs	r2, #1
 8002a64:	4313      	orrs	r3, r2
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	2380      	movs	r3, #128	@ 0x80
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2202      	movs	r2, #2
 8002a76:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a78:	d003      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a82:	6a3a      	ldr	r2, [r7, #32]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a92:	d003      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	2204      	movs	r2, #4
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d03f      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2270      	movs	r2, #112	@ 0x70
 8002aaa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002aac:	d03b      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2270      	movs	r2, #112	@ 0x70
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b60      	cmp	r3, #96	@ 0x60
 8002ab6:	d027      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x320>
 8002ab8:	d82c      	bhi.n	8002b14 <HAL_CAN_IRQHandler+0x32c>
 8002aba:	2b50      	cmp	r3, #80	@ 0x50
 8002abc:	d01f      	beq.n	8002afe <HAL_CAN_IRQHandler+0x316>
 8002abe:	d829      	bhi.n	8002b14 <HAL_CAN_IRQHandler+0x32c>
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d017      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x30c>
 8002ac4:	d826      	bhi.n	8002b14 <HAL_CAN_IRQHandler+0x32c>
 8002ac6:	2b30      	cmp	r3, #48	@ 0x30
 8002ac8:	d00f      	beq.n	8002aea <HAL_CAN_IRQHandler+0x302>
 8002aca:	d823      	bhi.n	8002b14 <HAL_CAN_IRQHandler+0x32c>
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d002      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x2ee>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d005      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ad4:	e01e      	b.n	8002b14 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	2208      	movs	r2, #8
 8002ada:	4313      	orrs	r3, r2
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ade:	e01a      	b.n	8002b16 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ae8:	e015      	b.n	8002b16 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	2220      	movs	r2, #32
 8002aee:	4313      	orrs	r3, r2
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002af2:	e010      	b.n	8002b16 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	4313      	orrs	r3, r2
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002afc:	e00b      	b.n	8002b16 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	2280      	movs	r2, #128	@ 0x80
 8002b02:	4313      	orrs	r3, r2
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b06:	e006      	b.n	8002b16 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	2280      	movs	r2, #128	@ 0x80
 8002b0c:	0052      	lsls	r2, r2, #1
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b12:	e000      	b.n	8002b16 <HAL_CAN_IRQHandler+0x32e>
            break;
 8002b14:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2170      	movs	r1, #112	@ 0x70
 8002b22:	438a      	bics	r2, r1
 8002b24:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 f85c 	bl	8002c00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b00a      	add	sp, #40	@ 0x28
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b58:	46c0      	nop			@ (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b88:	46c0      	nop			@ (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b98:	46c0      	nop			@ (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002be8:	46c0      	nop			@ (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	0002      	movs	r2, r0
 8002c18:	1dfb      	adds	r3, r7, #7
 8002c1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c1c:	1dfb      	adds	r3, r7, #7
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c22:	d809      	bhi.n	8002c38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	001a      	movs	r2, r3
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	4b04      	ldr	r3, [pc, #16]	@ (8002c40 <__NVIC_EnableIRQ+0x30>)
 8002c30:	2101      	movs	r1, #1
 8002c32:	4091      	lsls	r1, r2
 8002c34:	000a      	movs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
  }
}
 8002c38:	46c0      	nop			@ (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c58:	d828      	bhi.n	8002cac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d18 <__NVIC_SetPriority+0xd4>)
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b25b      	sxtb	r3, r3
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	33c0      	adds	r3, #192	@ 0xc0
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	589b      	ldr	r3, [r3, r2]
 8002c6a:	1dfa      	adds	r2, r7, #7
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	0011      	movs	r1, r2
 8002c70:	2203      	movs	r2, #3
 8002c72:	400a      	ands	r2, r1
 8002c74:	00d2      	lsls	r2, r2, #3
 8002c76:	21ff      	movs	r1, #255	@ 0xff
 8002c78:	4091      	lsls	r1, r2
 8002c7a:	000a      	movs	r2, r1
 8002c7c:	43d2      	mvns	r2, r2
 8002c7e:	401a      	ands	r2, r3
 8002c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	22ff      	movs	r2, #255	@ 0xff
 8002c88:	401a      	ands	r2, r3
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	2303      	movs	r3, #3
 8002c92:	4003      	ands	r3, r0
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c98:	481f      	ldr	r0, [pc, #124]	@ (8002d18 <__NVIC_SetPriority+0xd4>)
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b25b      	sxtb	r3, r3
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	33c0      	adds	r3, #192	@ 0xc0
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002caa:	e031      	b.n	8002d10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cac:	4a1b      	ldr	r2, [pc, #108]	@ (8002d1c <__NVIC_SetPriority+0xd8>)
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	3b08      	subs	r3, #8
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3306      	adds	r3, #6
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	18d3      	adds	r3, r2, r3
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1dfa      	adds	r2, r7, #7
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	0011      	movs	r1, r2
 8002ccc:	2203      	movs	r2, #3
 8002cce:	400a      	ands	r2, r1
 8002cd0:	00d2      	lsls	r2, r2, #3
 8002cd2:	21ff      	movs	r1, #255	@ 0xff
 8002cd4:	4091      	lsls	r1, r2
 8002cd6:	000a      	movs	r2, r1
 8002cd8:	43d2      	mvns	r2, r2
 8002cda:	401a      	ands	r2, r3
 8002cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	22ff      	movs	r2, #255	@ 0xff
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	0018      	movs	r0, r3
 8002cec:	2303      	movs	r3, #3
 8002cee:	4003      	ands	r3, r0
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cf4:	4809      	ldr	r0, [pc, #36]	@ (8002d1c <__NVIC_SetPriority+0xd8>)
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	001c      	movs	r4, r3
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	4023      	ands	r3, r4
 8002d00:	3b08      	subs	r3, #8
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	430a      	orrs	r2, r1
 8002d06:	3306      	adds	r3, #6
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	18c3      	adds	r3, r0, r3
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	601a      	str	r2, [r3, #0]
}
 8002d10:	46c0      	nop			@ (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b003      	add	sp, #12
 8002d16:	bd90      	pop	{r4, r7, pc}
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	045b      	lsls	r3, r3, #17
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d301      	bcc.n	8002d38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d34:	2301      	movs	r3, #1
 8002d36:	e010      	b.n	8002d5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d38:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <SysTick_Config+0x44>)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d40:	2301      	movs	r3, #1
 8002d42:	425b      	negs	r3, r3
 8002d44:	2103      	movs	r1, #3
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff ff7c 	bl	8002c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4c:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <SysTick_Config+0x44>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d52:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <SysTick_Config+0x44>)
 8002d54:	2207      	movs	r2, #7
 8002d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	e000e010 	.word	0xe000e010

08002d68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	230f      	movs	r3, #15
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	1c02      	adds	r2, r0, #0
 8002d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d904      	bls.n	8002d8a <HAL_NVIC_SetPriority+0x22>
 8002d80:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <HAL_NVIC_SetPriority+0x3c>)
 8002d82:	218a      	movs	r1, #138	@ 0x8a
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fd fedf 	bl	8000b48 <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7ff ff54 	bl	8002c44 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b004      	add	sp, #16
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	0800c0f4 	.word	0x0800c0f4

08002da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	0002      	movs	r2, r0
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dba:	d904      	bls.n	8002dc6 <HAL_NVIC_EnableIRQ+0x1e>
 8002dbc:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <HAL_NVIC_EnableIRQ+0x34>)
 8002dbe:	219d      	movs	r1, #157	@ 0x9d
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f7fd fec1 	bl	8000b48 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc6:	1dfb      	adds	r3, r7, #7
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff ff1f 	bl	8002c10 <__NVIC_EnableIRQ>
}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	0800c0f4 	.word	0x0800c0f4

08002de0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7ff ff98 	bl	8002d20 <SysTick_Config>
 8002df0:	0003      	movs	r3, r0
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	2390      	movs	r3, #144	@ 0x90
 8002e0e:	05db      	lsls	r3, r3, #23
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d018      	beq.n	8002e46 <HAL_GPIO_Init+0x4a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4ad5      	ldr	r2, [pc, #852]	@ (800316c <HAL_GPIO_Init+0x370>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d014      	beq.n	8002e46 <HAL_GPIO_Init+0x4a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4ad4      	ldr	r2, [pc, #848]	@ (8003170 <HAL_GPIO_Init+0x374>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d010      	beq.n	8002e46 <HAL_GPIO_Init+0x4a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4ad3      	ldr	r2, [pc, #844]	@ (8003174 <HAL_GPIO_Init+0x378>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00c      	beq.n	8002e46 <HAL_GPIO_Init+0x4a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4ad2      	ldr	r2, [pc, #840]	@ (8003178 <HAL_GPIO_Init+0x37c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d008      	beq.n	8002e46 <HAL_GPIO_Init+0x4a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4ad1      	ldr	r2, [pc, #836]	@ (800317c <HAL_GPIO_Init+0x380>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_GPIO_Init+0x4a>
 8002e3c:	4bd0      	ldr	r3, [pc, #832]	@ (8003180 <HAL_GPIO_Init+0x384>)
 8002e3e:	21b0      	movs	r1, #176	@ 0xb0
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fd fe81 	bl	8000b48 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	d005      	beq.n	8002e5c <HAL_GPIO_Init+0x60>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	025b      	lsls	r3, r3, #9
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d304      	bcc.n	8002e66 <HAL_GPIO_Init+0x6a>
 8002e5c:	4bc8      	ldr	r3, [pc, #800]	@ (8003180 <HAL_GPIO_Init+0x384>)
 8002e5e:	21b1      	movs	r1, #177	@ 0xb1
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7fd fe71 	bl	8000b48 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d100      	bne.n	8002e70 <HAL_GPIO_Init+0x74>
 8002e6e:	e1f4      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d100      	bne.n	8002e7a <HAL_GPIO_Init+0x7e>
 8002e78:	e1ef      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b11      	cmp	r3, #17
 8002e80:	d100      	bne.n	8002e84 <HAL_GPIO_Init+0x88>
 8002e82:	e1ea      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d100      	bne.n	8002e8e <HAL_GPIO_Init+0x92>
 8002e8c:	e1e5      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b12      	cmp	r3, #18
 8002e94:	d100      	bne.n	8002e98 <HAL_GPIO_Init+0x9c>
 8002e96:	e1e0      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	2388      	movs	r3, #136	@ 0x88
 8002e9e:	035b      	lsls	r3, r3, #13
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d100      	bne.n	8002ea6 <HAL_GPIO_Init+0xaa>
 8002ea4:	e1d9      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	2384      	movs	r3, #132	@ 0x84
 8002eac:	039b      	lsls	r3, r3, #14
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d100      	bne.n	8002eb4 <HAL_GPIO_Init+0xb8>
 8002eb2:	e1d2      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	23c4      	movs	r3, #196	@ 0xc4
 8002eba:	039b      	lsls	r3, r3, #14
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d100      	bne.n	8002ec2 <HAL_GPIO_Init+0xc6>
 8002ec0:	e1cb      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	2390      	movs	r3, #144	@ 0x90
 8002ec8:	035b      	lsls	r3, r3, #13
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d100      	bne.n	8002ed0 <HAL_GPIO_Init+0xd4>
 8002ece:	e1c4      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	2388      	movs	r3, #136	@ 0x88
 8002ed6:	039b      	lsls	r3, r3, #14
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d100      	bne.n	8002ede <HAL_GPIO_Init+0xe2>
 8002edc:	e1bd      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	23c8      	movs	r3, #200	@ 0xc8
 8002ee4:	039b      	lsls	r3, r3, #14
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d100      	bne.n	8002eec <HAL_GPIO_Init+0xf0>
 8002eea:	e1b6      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d100      	bne.n	8002ef6 <HAL_GPIO_Init+0xfa>
 8002ef4:	e1b1      	b.n	800325a <HAL_GPIO_Init+0x45e>
 8002ef6:	4ba2      	ldr	r3, [pc, #648]	@ (8003180 <HAL_GPIO_Init+0x384>)
 8002ef8:	21b2      	movs	r1, #178	@ 0xb2
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7fd fe24 	bl	8000b48 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f00:	e1ab      	b.n	800325a <HAL_GPIO_Init+0x45e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4091      	lsls	r1, r2
 8002f0c:	000a      	movs	r2, r1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d100      	bne.n	8002f1a <HAL_GPIO_Init+0x11e>
 8002f18:	e19c      	b.n	8003254 <HAL_GPIO_Init+0x458>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d005      	beq.n	8002f32 <HAL_GPIO_Init+0x136>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d141      	bne.n	8002fb6 <HAL_GPIO_Init+0x1ba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <HAL_GPIO_Init+0x158>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d008      	beq.n	8002f54 <HAL_GPIO_Init+0x158>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d004      	beq.n	8002f54 <HAL_GPIO_Init+0x158>
 8002f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8003180 <HAL_GPIO_Init+0x384>)
 8002f4c:	21c2      	movs	r1, #194	@ 0xc2
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7fd fdfa 	bl	8000b48 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	409a      	lsls	r2, r3
 8002f62:	0013      	movs	r3, r2
 8002f64:	43da      	mvns	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	0013      	movs	r3, r2
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	0013      	movs	r3, r2
 8002f92:	43da      	mvns	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	0013      	movs	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2203      	movs	r2, #3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d028      	beq.n	8003014 <HAL_GPIO_Init+0x218>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_GPIO_Init+0x1e8>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d008      	beq.n	8002fe4 <HAL_GPIO_Init+0x1e8>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_GPIO_Init+0x1e8>
 8002fda:	4b69      	ldr	r3, [pc, #420]	@ (8003180 <HAL_GPIO_Init+0x384>)
 8002fdc:	21d3      	movs	r1, #211	@ 0xd3
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fd fdb2 	bl	8000b48 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	409a      	lsls	r2, r3
 8003006:	0013      	movs	r3, r2
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	4013      	ands	r3, r2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d146      	bne.n	80030ae <HAL_GPIO_Init+0x2b2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	2390      	movs	r3, #144	@ 0x90
 8003024:	05db      	lsls	r3, r3, #23
 8003026:	429a      	cmp	r2, r3
 8003028:	d014      	beq.n	8003054 <HAL_GPIO_Init+0x258>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4f      	ldr	r2, [pc, #316]	@ (800316c <HAL_GPIO_Init+0x370>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d010      	beq.n	8003054 <HAL_GPIO_Init+0x258>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4e      	ldr	r2, [pc, #312]	@ (8003170 <HAL_GPIO_Init+0x374>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00c      	beq.n	8003054 <HAL_GPIO_Init+0x258>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4d      	ldr	r2, [pc, #308]	@ (8003174 <HAL_GPIO_Init+0x378>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d008      	beq.n	8003054 <HAL_GPIO_Init+0x258>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4c      	ldr	r2, [pc, #304]	@ (8003178 <HAL_GPIO_Init+0x37c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_GPIO_Init+0x258>
 800304a:	4b4d      	ldr	r3, [pc, #308]	@ (8003180 <HAL_GPIO_Init+0x384>)
 800304c:	21e0      	movs	r1, #224	@ 0xe0
 800304e:	0018      	movs	r0, r3
 8003050:	f7fd fd7a 	bl	8000b48 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b07      	cmp	r3, #7
 800305a:	d904      	bls.n	8003066 <HAL_GPIO_Init+0x26a>
 800305c:	4b48      	ldr	r3, [pc, #288]	@ (8003180 <HAL_GPIO_Init+0x384>)
 800305e:	21e1      	movs	r1, #225	@ 0xe1
 8003060:	0018      	movs	r0, r3
 8003062:	f7fd fd71 	bl	8000b48 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	58d3      	ldr	r3, [r2, r3]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2207      	movs	r2, #7
 8003078:	4013      	ands	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	409a      	lsls	r2, r3
 8003080:	0013      	movs	r3, r2
 8003082:	43da      	mvns	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2107      	movs	r1, #7
 8003092:	400b      	ands	r3, r1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	409a      	lsls	r2, r3
 8003098:	0013      	movs	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	0092      	lsls	r2, r2, #2
 80030aa:	6939      	ldr	r1, [r7, #16]
 80030ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	409a      	lsls	r2, r3
 80030bc:	0013      	movs	r3, r2
 80030be:	43da      	mvns	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	401a      	ands	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	0013      	movs	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	23c0      	movs	r3, #192	@ 0xc0
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	4013      	ands	r3, r2
 80030ec:	d100      	bne.n	80030f0 <HAL_GPIO_Init+0x2f4>
 80030ee:	e0b1      	b.n	8003254 <HAL_GPIO_Init+0x458>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f0:	4b24      	ldr	r3, [pc, #144]	@ (8003184 <HAL_GPIO_Init+0x388>)
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	4b23      	ldr	r3, [pc, #140]	@ (8003184 <HAL_GPIO_Init+0x388>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	430a      	orrs	r2, r1
 80030fa:	619a      	str	r2, [r3, #24]
 80030fc:	4b21      	ldr	r3, [pc, #132]	@ (8003184 <HAL_GPIO_Init+0x388>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2201      	movs	r2, #1
 8003102:	4013      	ands	r3, r2
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003108:	4a1f      	ldr	r2, [pc, #124]	@ (8003188 <HAL_GPIO_Init+0x38c>)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	589b      	ldr	r3, [r3, r2]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2203      	movs	r2, #3
 800311a:	4013      	ands	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	409a      	lsls	r2, r3
 8003122:	0013      	movs	r3, r2
 8003124:	43da      	mvns	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	2390      	movs	r3, #144	@ 0x90
 8003130:	05db      	lsls	r3, r3, #23
 8003132:	429a      	cmp	r2, r3
 8003134:	d02a      	beq.n	800318c <HAL_GPIO_Init+0x390>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a0c      	ldr	r2, [pc, #48]	@ (800316c <HAL_GPIO_Init+0x370>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_GPIO_Init+0x36a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <HAL_GPIO_Init+0x374>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00d      	beq.n	8003162 <HAL_GPIO_Init+0x366>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <HAL_GPIO_Init+0x378>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_GPIO_Init+0x362>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a09      	ldr	r2, [pc, #36]	@ (8003178 <HAL_GPIO_Init+0x37c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_GPIO_Init+0x35e>
 8003156:	2304      	movs	r3, #4
 8003158:	e019      	b.n	800318e <HAL_GPIO_Init+0x392>
 800315a:	2305      	movs	r3, #5
 800315c:	e017      	b.n	800318e <HAL_GPIO_Init+0x392>
 800315e:	2303      	movs	r3, #3
 8003160:	e015      	b.n	800318e <HAL_GPIO_Init+0x392>
 8003162:	2302      	movs	r3, #2
 8003164:	e013      	b.n	800318e <HAL_GPIO_Init+0x392>
 8003166:	2301      	movs	r3, #1
 8003168:	e011      	b.n	800318e <HAL_GPIO_Init+0x392>
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	48000400 	.word	0x48000400
 8003170:	48000800 	.word	0x48000800
 8003174:	48000c00 	.word	0x48000c00
 8003178:	48001000 	.word	0x48001000
 800317c:	48001400 	.word	0x48001400
 8003180:	0800c130 	.word	0x0800c130
 8003184:	40021000 	.word	0x40021000
 8003188:	40010000 	.word	0x40010000
 800318c:	2300      	movs	r3, #0
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	2103      	movs	r1, #3
 8003192:	400a      	ands	r2, r1
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	4093      	lsls	r3, r2
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800319e:	4935      	ldr	r1, [pc, #212]	@ (8003274 <HAL_GPIO_Init+0x478>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ac:	4b32      	ldr	r3, [pc, #200]	@ (8003278 <HAL_GPIO_Init+0x47c>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	035b      	lsls	r3, r3, #13
 80031c4:	4013      	ands	r3, r2
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x3d4>
        {
          temp |= iocurrent;
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031d0:	4b29      	ldr	r3, [pc, #164]	@ (8003278 <HAL_GPIO_Init+0x47c>)
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031d6:	4b28      	ldr	r3, [pc, #160]	@ (8003278 <HAL_GPIO_Init+0x47c>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43da      	mvns	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	2380      	movs	r3, #128	@ 0x80
 80031ec:	039b      	lsls	r3, r3, #14
 80031ee:	4013      	ands	r3, r2
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x3fe>
        {
          temp |= iocurrent;
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003278 <HAL_GPIO_Init+0x47c>)
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003200:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <HAL_GPIO_Init+0x47c>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43da      	mvns	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	029b      	lsls	r3, r3, #10
 8003218:	4013      	ands	r3, r2
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x428>
        {
          temp |= iocurrent;
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003224:	4b14      	ldr	r3, [pc, #80]	@ (8003278 <HAL_GPIO_Init+0x47c>)
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800322a:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <HAL_GPIO_Init+0x47c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43da      	mvns	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	025b      	lsls	r3, r3, #9
 8003242:	4013      	ands	r3, r2
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x452>
        {
          temp |= iocurrent;
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <HAL_GPIO_Init+0x47c>)
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3301      	adds	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	40da      	lsrs	r2, r3
 8003262:	1e13      	subs	r3, r2, #0
 8003264:	d000      	beq.n	8003268 <HAL_GPIO_Init+0x46c>
 8003266:	e64c      	b.n	8002f02 <HAL_GPIO_Init+0x106>
  } 
}
 8003268:	46c0      	nop			@ (mov r8, r8)
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b006      	add	sp, #24
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	40010000 	.word	0x40010000
 8003278:	40010400 	.word	0x40010400

0800327c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	000a      	movs	r2, r1
 8003286:	1cbb      	adds	r3, r7, #2
 8003288:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800328a:	1cbb      	adds	r3, r7, #2
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_GPIO_ReadPin+0x26>
 8003292:	2384      	movs	r3, #132	@ 0x84
 8003294:	33ff      	adds	r3, #255	@ 0xff
 8003296:	001a      	movs	r2, r3
 8003298:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <HAL_GPIO_ReadPin+0x54>)
 800329a:	0011      	movs	r1, r2
 800329c:	0018      	movs	r0, r3
 800329e:	f7fd fc53 	bl	8000b48 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	1cba      	adds	r2, r7, #2
 80032a8:	8812      	ldrh	r2, [r2, #0]
 80032aa:	4013      	ands	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_GPIO_ReadPin+0x3c>
  {
    bitstatus = GPIO_PIN_SET;
 80032ae:	230f      	movs	r3, #15
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e003      	b.n	80032c0 <HAL_GPIO_ReadPin+0x44>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032b8:	230f      	movs	r3, #15
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80032c0:	230f      	movs	r3, #15
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	781b      	ldrb	r3, [r3, #0]
  }
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b004      	add	sp, #16
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			@ (mov r8, r8)
 80032d0:	0800c130 	.word	0x0800c130

080032d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	0008      	movs	r0, r1
 80032de:	0011      	movs	r1, r2
 80032e0:	1cbb      	adds	r3, r7, #2
 80032e2:	1c02      	adds	r2, r0, #0
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	1c7b      	adds	r3, r7, #1
 80032e8:	1c0a      	adds	r2, r1, #0
 80032ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80032ec:	1cbb      	adds	r3, r7, #2
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_GPIO_WritePin+0x2e>
 80032f4:	23d1      	movs	r3, #209	@ 0xd1
 80032f6:	005a      	lsls	r2, r3, #1
 80032f8:	4b12      	ldr	r3, [pc, #72]	@ (8003344 <HAL_GPIO_WritePin+0x70>)
 80032fa:	0011      	movs	r1, r2
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7fd fc23 	bl	8000b48 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003302:	1c7b      	adds	r3, r7, #1
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_GPIO_WritePin+0x4e>
 800330a:	1c7b      	adds	r3, r7, #1
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d007      	beq.n	8003322 <HAL_GPIO_WritePin+0x4e>
 8003312:	23a4      	movs	r3, #164	@ 0xa4
 8003314:	33ff      	adds	r3, #255	@ 0xff
 8003316:	001a      	movs	r2, r3
 8003318:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_GPIO_WritePin+0x70>)
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f7fd fc13 	bl	8000b48 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003322:	1c7b      	adds	r3, r7, #1
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <HAL_GPIO_WritePin+0x60>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800332a:	1cbb      	adds	r3, r7, #2
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003332:	e003      	b.n	800333c <HAL_GPIO_WritePin+0x68>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003334:	1cbb      	adds	r3, r7, #2
 8003336:	881a      	ldrh	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800333c:	46c0      	nop			@ (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800c130 	.word	0x0800c130

08003348 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0ee      	b.n	8003538 <HAL_PCD_Init+0x1f0>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a78      	ldr	r2, [pc, #480]	@ (8003540 <HAL_PCD_Init+0x1f8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_PCD_Init+0x26>
 8003364:	4b77      	ldr	r3, [pc, #476]	@ (8003544 <HAL_PCD_Init+0x1fc>)
 8003366:	2187      	movs	r1, #135	@ 0x87
 8003368:	0018      	movs	r0, r3
 800336a:	f7fd fbed 	bl	8000b48 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a75      	ldr	r2, [pc, #468]	@ (8003548 <HAL_PCD_Init+0x200>)
 8003372:	5c9b      	ldrb	r3, [r3, r2]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d108      	bne.n	800338c <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	23a4      	movs	r3, #164	@ 0xa4
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	2100      	movs	r1, #0
 8003382:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	0018      	movs	r0, r3
 8003388:	f007 fe3c 	bl	800b004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a6e      	ldr	r2, [pc, #440]	@ (8003548 <HAL_PCD_Init+0x200>)
 8003390:	2103      	movs	r1, #3
 8003392:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0018      	movs	r0, r3
 800339a:	f003 fe65 	bl	8007068 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339e:	230f      	movs	r3, #15
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e047      	b.n	8003438 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033a8:	200f      	movs	r0, #15
 80033aa:	183b      	adds	r3, r7, r0
 80033ac:	781a      	ldrb	r2, [r3, #0]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	0013      	movs	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	18cb      	adds	r3, r1, r3
 80033ba:	3311      	adds	r3, #17
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033c0:	183b      	adds	r3, r7, r0
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	0013      	movs	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	18cb      	adds	r3, r1, r3
 80033d0:	3310      	adds	r3, #16
 80033d2:	183a      	adds	r2, r7, r0
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033d8:	183b      	adds	r3, r7, r0
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	0013      	movs	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	18cb      	adds	r3, r1, r3
 80033e8:	3313      	adds	r3, #19
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	0013      	movs	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	189b      	adds	r3, r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	18cb      	adds	r3, r1, r3
 80033fe:	3320      	adds	r3, #32
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003404:	183b      	adds	r3, r7, r0
 8003406:	781a      	ldrb	r2, [r3, #0]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	0013      	movs	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	189b      	adds	r3, r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	18cb      	adds	r3, r1, r3
 8003414:	3324      	adds	r3, #36	@ 0x24
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800341a:	183b      	adds	r3, r7, r0
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	0013      	movs	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	189b      	adds	r3, r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	2200      	movs	r2, #0
 800342c:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342e:	183b      	adds	r3, r7, r0
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	183b      	adds	r3, r7, r0
 8003434:	3201      	adds	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	791b      	ldrb	r3, [r3, #4]
 800343c:	210f      	movs	r1, #15
 800343e:	187a      	adds	r2, r7, r1
 8003440:	7812      	ldrb	r2, [r2, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d3b0      	bcc.n	80033a8 <HAL_PCD_Init+0x60>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003446:	187b      	adds	r3, r7, r1
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e056      	b.n	80034fc <HAL_PCD_Init+0x1b4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800344e:	240f      	movs	r4, #15
 8003450:	193b      	adds	r3, r7, r4
 8003452:	781a      	ldrb	r2, [r3, #0]
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	2352      	movs	r3, #82	@ 0x52
 8003458:	33ff      	adds	r3, #255	@ 0xff
 800345a:	0019      	movs	r1, r3
 800345c:	0013      	movs	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	189b      	adds	r3, r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	18c3      	adds	r3, r0, r3
 8003466:	185b      	adds	r3, r3, r1
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800346c:	193b      	adds	r3, r7, r4
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	23a8      	movs	r3, #168	@ 0xa8
 8003474:	0059      	lsls	r1, r3, #1
 8003476:	0013      	movs	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	189b      	adds	r3, r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	18c3      	adds	r3, r0, r3
 8003480:	185b      	adds	r3, r3, r1
 8003482:	193a      	adds	r2, r7, r4
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003488:	193b      	adds	r3, r7, r4
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	2354      	movs	r3, #84	@ 0x54
 8003490:	33ff      	adds	r3, #255	@ 0xff
 8003492:	0019      	movs	r1, r3
 8003494:	0013      	movs	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	189b      	adds	r3, r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	18c3      	adds	r3, r0, r3
 800349e:	185b      	adds	r3, r3, r1
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	23b0      	movs	r3, #176	@ 0xb0
 80034ac:	0059      	lsls	r1, r3, #1
 80034ae:	0013      	movs	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	189b      	adds	r3, r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	18c3      	adds	r3, r0, r3
 80034b8:	185b      	adds	r3, r3, r1
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	23b2      	movs	r3, #178	@ 0xb2
 80034c6:	0059      	lsls	r1, r3, #1
 80034c8:	0013      	movs	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	189b      	adds	r3, r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	18c3      	adds	r3, r0, r3
 80034d2:	185b      	adds	r3, r3, r1
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	23b4      	movs	r3, #180	@ 0xb4
 80034e0:	0059      	lsls	r1, r3, #1
 80034e2:	0013      	movs	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	189b      	adds	r3, r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	18c3      	adds	r3, r0, r3
 80034ec:	185b      	adds	r3, r3, r1
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	3201      	adds	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	791b      	ldrb	r3, [r3, #4]
 8003500:	220f      	movs	r2, #15
 8003502:	18ba      	adds	r2, r7, r2
 8003504:	7812      	ldrb	r2, [r2, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d3a1      	bcc.n	800344e <HAL_PCD_Init+0x106>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	f003 fdc2 	bl	800709c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <HAL_PCD_Init+0x200>)
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7a9b      	ldrb	r3, [r3, #10]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d103      	bne.n	8003536 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f001 fd23 	bl	8004f7c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b005      	add	sp, #20
 800353e:	bd90      	pop	{r4, r7, pc}
 8003540:	40005c00 	.word	0x40005c00
 8003544:	0800c16c 	.word	0x0800c16c
 8003548:	00000291 	.word	0x00000291

0800354c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	23a4      	movs	r3, #164	@ 0xa4
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_PCD_Start+0x18>
 8003560:	2302      	movs	r3, #2
 8003562:	e014      	b.n	800358e <HAL_PCD_Start+0x42>
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	23a4      	movs	r3, #164	@ 0xa4
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	2101      	movs	r1, #1
 800356c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	0018      	movs	r0, r3
 8003574:	f003 fd62 	bl	800703c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0018      	movs	r0, r3
 800357e:	f005 fd57 	bl	8009030 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	23a4      	movs	r3, #164	@ 0xa4
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	2100      	movs	r1, #0
 800358a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f005 fd59 	bl	800905c <USB_ReadInterrupts>
 80035aa:	0003      	movs	r3, r0
 80035ac:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	2380      	movs	r3, #128	@ 0x80
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4013      	ands	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 fb60 	bl	8003c80 <PCD_EP_ISR_Handler>

    return;
 80035c0:	e11d      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4013      	ands	r3, r2
 80035ca:	d015      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2244      	movs	r2, #68	@ 0x44
 80035d2:	5a9b      	ldrh	r3, [r3, r2]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	498a      	ldr	r1, [pc, #552]	@ (8003804 <HAL_PCD_IRQHandler+0x26c>)
 80035dc:	400a      	ands	r2, r1
 80035de:	b291      	uxth	r1, r2
 80035e0:	2244      	movs	r2, #68	@ 0x44
 80035e2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f007 fd97 	bl	800b11a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2100      	movs	r1, #0
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 f915 	bl	8003820 <HAL_PCD_SetAddress>

    return;
 80035f6:	e102      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	01db      	lsls	r3, r3, #7
 80035fe:	4013      	ands	r3, r2
 8003600:	d00c      	beq.n	800361c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2244      	movs	r2, #68	@ 0x44
 8003608:	5a9b      	ldrh	r3, [r3, r2]
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	497d      	ldr	r1, [pc, #500]	@ (8003808 <HAL_PCD_IRQHandler+0x270>)
 8003612:	400a      	ands	r2, r1
 8003614:	b291      	uxth	r1, r2
 8003616:	2244      	movs	r2, #68	@ 0x44
 8003618:	5299      	strh	r1, [r3, r2]

    return;
 800361a:	e0f0      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	019b      	lsls	r3, r3, #6
 8003622:	4013      	ands	r3, r2
 8003624:	d00c      	beq.n	8003640 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2244      	movs	r2, #68	@ 0x44
 800362c:	5a9b      	ldrh	r3, [r3, r2]
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4975      	ldr	r1, [pc, #468]	@ (800380c <HAL_PCD_IRQHandler+0x274>)
 8003636:	400a      	ands	r2, r1
 8003638:	b291      	uxth	r1, r2
 800363a:	2244      	movs	r2, #68	@ 0x44
 800363c:	5299      	strh	r1, [r3, r2]

    return;
 800363e:	e0de      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	015b      	lsls	r3, r3, #5
 8003646:	4013      	ands	r3, r2
 8003648:	d038      	beq.n	80036bc <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2240      	movs	r2, #64	@ 0x40
 8003650:	5a9b      	ldrh	r3, [r3, r2]
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2104      	movs	r1, #4
 800365a:	438a      	bics	r2, r1
 800365c:	b291      	uxth	r1, r2
 800365e:	2240      	movs	r2, #64	@ 0x40
 8003660:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2240      	movs	r2, #64	@ 0x40
 8003668:	5a9b      	ldrh	r3, [r3, r2]
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2108      	movs	r1, #8
 8003672:	438a      	bics	r2, r1
 8003674:	b291      	uxth	r1, r2
 8003676:	2240      	movs	r2, #64	@ 0x40
 8003678:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	23b2      	movs	r3, #178	@ 0xb2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d109      	bne.n	800369a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	23b2      	movs	r3, #178	@ 0xb2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	2100      	movs	r1, #0
 800368e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2100      	movs	r1, #0
 8003694:	0018      	movs	r0, r3
 8003696:	f001 fc9b 	bl	8004fd0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0018      	movs	r0, r3
 800369e:	f007 fd7d 	bl	800b19c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2244      	movs	r2, #68	@ 0x44
 80036a8:	5a9b      	ldrh	r3, [r3, r2]
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4957      	ldr	r1, [pc, #348]	@ (8003810 <HAL_PCD_IRQHandler+0x278>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	b291      	uxth	r1, r2
 80036b6:	2244      	movs	r2, #68	@ 0x44
 80036b8:	5299      	strh	r1, [r3, r2]

    return;
 80036ba:	e0a0      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	4013      	ands	r3, r2
 80036c4:	d028      	beq.n	8003718 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2240      	movs	r2, #64	@ 0x40
 80036cc:	5a9b      	ldrh	r3, [r3, r2]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2108      	movs	r1, #8
 80036d6:	430a      	orrs	r2, r1
 80036d8:	b291      	uxth	r1, r2
 80036da:	2240      	movs	r2, #64	@ 0x40
 80036dc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2244      	movs	r2, #68	@ 0x44
 80036e4:	5a9b      	ldrh	r3, [r3, r2]
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4949      	ldr	r1, [pc, #292]	@ (8003814 <HAL_PCD_IRQHandler+0x27c>)
 80036ee:	400a      	ands	r2, r1
 80036f0:	b291      	uxth	r1, r2
 80036f2:	2244      	movs	r2, #68	@ 0x44
 80036f4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2240      	movs	r2, #64	@ 0x40
 80036fc:	5a9b      	ldrh	r3, [r3, r2]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2104      	movs	r1, #4
 8003706:	430a      	orrs	r2, r1
 8003708:	b291      	uxth	r1, r2
 800370a:	2240      	movs	r2, #64	@ 0x40
 800370c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0018      	movs	r0, r3
 8003712:	f007 fd27 	bl	800b164 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003716:	e072      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2280      	movs	r2, #128	@ 0x80
 800371c:	4013      	ands	r3, r2
 800371e:	d046      	beq.n	80037ae <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2244      	movs	r2, #68	@ 0x44
 8003726:	5a9b      	ldrh	r3, [r3, r2]
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2180      	movs	r1, #128	@ 0x80
 8003730:	438a      	bics	r2, r1
 8003732:	b291      	uxth	r1, r2
 8003734:	2244      	movs	r2, #68	@ 0x44
 8003736:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	23b2      	movs	r3, #178	@ 0xb2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d12f      	bne.n	80037a4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2240      	movs	r2, #64	@ 0x40
 800374a:	5a9b      	ldrh	r3, [r3, r2]
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2104      	movs	r1, #4
 8003754:	430a      	orrs	r2, r1
 8003756:	b291      	uxth	r1, r2
 8003758:	2240      	movs	r2, #64	@ 0x40
 800375a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2240      	movs	r2, #64	@ 0x40
 8003762:	5a9b      	ldrh	r3, [r3, r2]
 8003764:	b29a      	uxth	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2108      	movs	r1, #8
 800376c:	430a      	orrs	r2, r1
 800376e:	b291      	uxth	r1, r2
 8003770:	2240      	movs	r2, #64	@ 0x40
 8003772:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	23b2      	movs	r3, #178	@ 0xb2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	2101      	movs	r1, #1
 800377c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2254      	movs	r2, #84	@ 0x54
 8003784:	5a9b      	ldrh	r3, [r3, r2]
 8003786:	b29b      	uxth	r3, r3
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	223c      	movs	r2, #60	@ 0x3c
 800378c:	4013      	ands	r3, r2
 800378e:	0019      	movs	r1, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	23b3      	movs	r3, #179	@ 0xb3
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2101      	movs	r1, #1
 800379c:	0018      	movs	r0, r3
 800379e:	f001 fc17 	bl	8004fd0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80037a2:	e02c      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f007 fcdc 	bl	800b164 <HAL_PCD_SuspendCallback>
    return;
 80037ac:	e027      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	2380      	movs	r3, #128	@ 0x80
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	d010      	beq.n	80037da <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2244      	movs	r2, #68	@ 0x44
 80037be:	5a9b      	ldrh	r3, [r3, r2]
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4914      	ldr	r1, [pc, #80]	@ (8003818 <HAL_PCD_IRQHandler+0x280>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	b291      	uxth	r1, r2
 80037cc:	2244      	movs	r2, #68	@ 0x44
 80037ce:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f007 fc92 	bl	800b0fc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037d8:	e011      	b.n	80037fe <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	2380      	movs	r3, #128	@ 0x80
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4013      	ands	r3, r2
 80037e2:	d00c      	beq.n	80037fe <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2244      	movs	r2, #68	@ 0x44
 80037ea:	5a9b      	ldrh	r3, [r3, r2]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	490a      	ldr	r1, [pc, #40]	@ (800381c <HAL_PCD_IRQHandler+0x284>)
 80037f4:	400a      	ands	r2, r1
 80037f6:	b291      	uxth	r1, r2
 80037f8:	2244      	movs	r2, #68	@ 0x44
 80037fa:	5299      	strh	r1, [r3, r2]

    return;
 80037fc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80037fe:	46bd      	mov	sp, r7
 8003800:	b004      	add	sp, #16
 8003802:	bd80      	pop	{r7, pc}
 8003804:	fffffbff 	.word	0xfffffbff
 8003808:	ffffbfff 	.word	0xffffbfff
 800380c:	ffffdfff 	.word	0xffffdfff
 8003810:	ffffefff 	.word	0xffffefff
 8003814:	fffff7ff 	.word	0xfffff7ff
 8003818:	fffffdff 	.word	0xfffffdff
 800381c:	fffffeff 	.word	0xfffffeff

08003820 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	000a      	movs	r2, r1
 800382a:	1cfb      	adds	r3, r7, #3
 800382c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	23a4      	movs	r3, #164	@ 0xa4
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	5cd3      	ldrb	r3, [r2, r3]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_PCD_SetAddress+0x1e>
 800383a:	2302      	movs	r3, #2
 800383c:	e016      	b.n	800386c <HAL_PCD_SetAddress+0x4c>
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	23a4      	movs	r3, #164	@ 0xa4
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	2101      	movs	r1, #1
 8003846:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	1cfa      	adds	r2, r7, #3
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	1cfb      	adds	r3, r7, #3
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	0019      	movs	r1, r3
 800385a:	0010      	movs	r0, r2
 800385c:	f005 fbd4 	bl	8009008 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	23a4      	movs	r3, #164	@ 0xa4
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	2100      	movs	r1, #0
 8003868:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	000c      	movs	r4, r1
 800387e:	0010      	movs	r0, r2
 8003880:	0019      	movs	r1, r3
 8003882:	1cfb      	adds	r3, r7, #3
 8003884:	1c22      	adds	r2, r4, #0
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	003b      	movs	r3, r7
 800388a:	1c02      	adds	r2, r0, #0
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	1cbb      	adds	r3, r7, #2
 8003890:	1c0a      	adds	r2, r1, #0
 8003892:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003894:	230b      	movs	r3, #11
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800389c:	1cfb      	adds	r3, r7, #3
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b25b      	sxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da0f      	bge.n	80038c6 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a6:	1cfb      	adds	r3, r7, #3
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2207      	movs	r2, #7
 80038ac:	401a      	ands	r2, r3
 80038ae:	0013      	movs	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	3310      	adds	r3, #16
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	18d3      	adds	r3, r2, r3
 80038bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	705a      	strb	r2, [r3, #1]
 80038c4:	e00f      	b.n	80038e6 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c6:	1cfb      	adds	r3, r7, #3
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2207      	movs	r2, #7
 80038cc:	401a      	ands	r2, r3
 80038ce:	0013      	movs	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	3351      	adds	r3, #81	@ 0x51
 80038d8:	33ff      	adds	r3, #255	@ 0xff
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038e6:	1cfb      	adds	r3, r7, #3
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2207      	movs	r2, #7
 80038ec:	4013      	ands	r3, r2
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038f4:	003b      	movs	r3, r7
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1cba      	adds	r2, r7, #2
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003904:	1cbb      	adds	r3, r7, #2
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d102      	bne.n	8003912 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	23a4      	movs	r3, #164	@ 0xa4
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	5cd3      	ldrb	r3, [r2, r3]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_PCD_EP_Open+0xae>
 800391e:	2302      	movs	r3, #2
 8003920:	e013      	b.n	800394a <HAL_PCD_EP_Open+0xd6>
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	23a4      	movs	r3, #164	@ 0xa4
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	2101      	movs	r1, #1
 800392a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f003 fbcd 	bl	80070d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	23a4      	movs	r3, #164	@ 0xa4
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	2100      	movs	r1, #0
 8003942:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003944:	230b      	movs	r3, #11
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	781b      	ldrb	r3, [r3, #0]
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b005      	add	sp, #20
 8003950:	bd90      	pop	{r4, r7, pc}

08003952 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	000a      	movs	r2, r1
 800395c:	1cfb      	adds	r3, r7, #3
 800395e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003960:	1cfb      	adds	r3, r7, #3
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b25b      	sxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	da0f      	bge.n	800398a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396a:	1cfb      	adds	r3, r7, #3
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2207      	movs	r2, #7
 8003970:	401a      	ands	r2, r3
 8003972:	0013      	movs	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	189b      	adds	r3, r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	3310      	adds	r3, #16
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	18d3      	adds	r3, r2, r3
 8003980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	705a      	strb	r2, [r3, #1]
 8003988:	e00f      	b.n	80039aa <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398a:	1cfb      	adds	r3, r7, #3
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2207      	movs	r2, #7
 8003990:	401a      	ands	r2, r3
 8003992:	0013      	movs	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	189b      	adds	r3, r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	3351      	adds	r3, #81	@ 0x51
 800399c:	33ff      	adds	r3, #255	@ 0xff
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80039aa:	1cfb      	adds	r3, r7, #3
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2207      	movs	r2, #7
 80039b0:	4013      	ands	r3, r2
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	23a4      	movs	r3, #164	@ 0xa4
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_PCD_EP_Close+0x76>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e011      	b.n	80039ec <HAL_PCD_EP_Close+0x9a>
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	23a4      	movs	r3, #164	@ 0xa4
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	2101      	movs	r1, #1
 80039d0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	0011      	movs	r1, r2
 80039da:	0018      	movs	r0, r3
 80039dc:	f003 ff22 	bl	8007824 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	23a4      	movs	r3, #164	@ 0xa4
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	2100      	movs	r1, #0
 80039e8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b004      	add	sp, #16
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	200b      	movs	r0, #11
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	1c0a      	adds	r2, r1, #0
 8003a06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a08:	0001      	movs	r1, r0
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2207      	movs	r2, #7
 8003a10:	401a      	ands	r2, r3
 8003a12:	0013      	movs	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	189b      	adds	r3, r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	3351      	adds	r3, #81	@ 0x51
 8003a1c:	33ff      	adds	r3, #255	@ 0xff
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	18d3      	adds	r3, r2, r3
 8003a22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2207      	movs	r2, #7
 8003a42:	4013      	ands	r3, r2
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f004 f8a6 	bl	8007ba4 <USB_EPStartXfer>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b006      	add	sp, #24
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	000a      	movs	r2, r1
 8003a6c:	1cfb      	adds	r3, r7, #3
 8003a6e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a70:	1cfb      	adds	r3, r7, #3
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2207      	movs	r2, #7
 8003a76:	401a      	ands	r2, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	23b6      	movs	r3, #182	@ 0xb6
 8003a7c:	0059      	lsls	r1, r3, #1
 8003a7e:	0013      	movs	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	18c3      	adds	r3, r0, r3
 8003a88:	185b      	adds	r3, r3, r1
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	200b      	movs	r0, #11
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	1c0a      	adds	r2, r1, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa8:	183b      	adds	r3, r7, r0
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2207      	movs	r2, #7
 8003aae:	401a      	ands	r2, r3
 8003ab0:	0013      	movs	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	3310      	adds	r3, #16
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2224      	movs	r2, #36	@ 0x24
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	183b      	adds	r3, r7, r0
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2207      	movs	r2, #7
 8003aec:	4013      	ands	r3, r2
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f004 f851 	bl	8007ba4 <USB_EPStartXfer>

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b006      	add	sp, #24
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	000a      	movs	r2, r1
 8003b16:	1cfb      	adds	r3, r7, #3
 8003b18:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b1a:	1cfb      	adds	r3, r7, #3
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2207      	movs	r2, #7
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	7912      	ldrb	r2, [r2, #4]
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e046      	b.n	8003bbc <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b2e:	1cfb      	adds	r3, r7, #3
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b25b      	sxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	da0f      	bge.n	8003b58 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b38:	1cfb      	adds	r3, r7, #3
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	401a      	ands	r2, r3
 8003b40:	0013      	movs	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	189b      	adds	r3, r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	3310      	adds	r3, #16
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	705a      	strb	r2, [r3, #1]
 8003b56:	e00d      	b.n	8003b74 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b58:	1cfb      	adds	r3, r7, #3
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	0013      	movs	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	189b      	adds	r3, r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	3351      	adds	r3, #81	@ 0x51
 8003b66:	33ff      	adds	r3, #255	@ 0xff
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	18d3      	adds	r3, r2, r3
 8003b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7a:	1cfb      	adds	r3, r7, #3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2207      	movs	r2, #7
 8003b80:	4013      	ands	r3, r2
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	23a4      	movs	r3, #164	@ 0xa4
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_PCD_EP_SetStall+0x8c>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e011      	b.n	8003bbc <HAL_PCD_EP_SetStall+0xb0>
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	23a4      	movs	r3, #164	@ 0xa4
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f005 f92a 	bl	8008e04 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	23a4      	movs	r3, #164	@ 0xa4
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b004      	add	sp, #16
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	000a      	movs	r2, r1
 8003bce:	1cfb      	adds	r3, r7, #3
 8003bd0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bd2:	1cfb      	adds	r3, r7, #3
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	7912      	ldrb	r2, [r2, #4]
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e048      	b.n	8003c78 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003be6:	1cfb      	adds	r3, r7, #3
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	da0f      	bge.n	8003c10 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	1cfb      	adds	r3, r7, #3
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2207      	movs	r2, #7
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	0013      	movs	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	189b      	adds	r3, r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	3310      	adds	r3, #16
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	705a      	strb	r2, [r3, #1]
 8003c0e:	e00f      	b.n	8003c30 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c10:	1cfb      	adds	r3, r7, #3
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2207      	movs	r2, #7
 8003c16:	401a      	ands	r2, r3
 8003c18:	0013      	movs	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	189b      	adds	r3, r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	3351      	adds	r3, #81	@ 0x51
 8003c22:	33ff      	adds	r3, #255	@ 0xff
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c36:	1cfb      	adds	r3, r7, #3
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2207      	movs	r2, #7
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	23a4      	movs	r3, #164	@ 0xa4
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	5cd3      	ldrb	r3, [r2, r3]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_PCD_EP_ClrStall+0x90>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e011      	b.n	8003c78 <HAL_PCD_EP_ClrStall+0xb4>
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	23a4      	movs	r3, #164	@ 0xa4
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	0011      	movs	r1, r2
 8003c66:	0018      	movs	r0, r3
 8003c68:	f005 f91c 	bl	8008ea4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	23a4      	movs	r3, #164	@ 0xa4
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	2100      	movs	r1, #0
 8003c74:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b004      	add	sp, #16
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c80:	b5b0      	push	{r4, r5, r7, lr}
 8003c82:	b096      	sub	sp, #88	@ 0x58
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c88:	f000 fbea 	bl	8004460 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2048      	movs	r0, #72	@ 0x48
 8003c92:	183b      	adds	r3, r7, r0
 8003c94:	2144      	movs	r1, #68	@ 0x44
 8003c96:	5a52      	ldrh	r2, [r2, r1]
 8003c98:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c9a:	183b      	adds	r3, r7, r0
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	244f      	movs	r4, #79	@ 0x4f
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	210f      	movs	r1, #15
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003caa:	193b      	adds	r3, r7, r4
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d000      	beq.n	8003cb4 <PCD_EP_ISR_Handler+0x34>
 8003cb2:	e18d      	b.n	8003fd0 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003cb4:	183b      	adds	r3, r7, r0
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d152      	bne.n	8003d64 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	200e      	movs	r0, #14
 8003cc8:	183b      	adds	r3, r7, r0
 8003cca:	49ba      	ldr	r1, [pc, #744]	@ (8003fb4 <PCD_EP_ISR_Handler+0x334>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	183a      	adds	r2, r7, r0
 8003cd6:	8812      	ldrh	r2, [r2, #0]
 8003cd8:	49b7      	ldr	r1, [pc, #732]	@ (8003fb8 <PCD_EP_ISR_Handler+0x338>)
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	b292      	uxth	r2, r2
 8003cde:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3310      	adds	r3, #16
 8003ce4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2250      	movs	r2, #80	@ 0x50
 8003cec:	5a9b      	ldrh	r3, [r3, r2]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	18d2      	adds	r2, r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	18d3      	adds	r3, r2, r3
 8003d00:	4aae      	ldr	r2, [pc, #696]	@ (8003fbc <PCD_EP_ISR_Handler+0x33c>)
 8003d02:	4694      	mov	ip, r2
 8003d04:	4463      	add	r3, ip
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	059b      	lsls	r3, r3, #22
 8003d0a:	0d9a      	lsrs	r2, r3, #22
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	18d2      	adds	r2, r2, r3
 8003d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d1c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2100      	movs	r1, #0
 8003d22:	0018      	movs	r0, r3
 8003d24:	f007 f9cc 	bl	800b0c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7b1b      	ldrb	r3, [r3, #12]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <PCD_EP_ISR_Handler+0xb6>
 8003d32:	f000 fb95 	bl	8004460 <PCD_EP_ISR_Handler+0x7e0>
 8003d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <PCD_EP_ISR_Handler+0xc2>
 8003d3e:	f000 fb8f 	bl	8004460 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7b1b      	ldrb	r3, [r3, #12]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2280      	movs	r2, #128	@ 0x80
 8003d4a:	4252      	negs	r2, r2
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0011      	movs	r1, r2
 8003d56:	224c      	movs	r2, #76	@ 0x4c
 8003d58:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	731a      	strb	r2, [r3, #12]
 8003d60:	f000 fb7e 	bl	8004460 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3351      	adds	r3, #81	@ 0x51
 8003d68:	33ff      	adds	r3, #255	@ 0xff
 8003d6a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	214c      	movs	r1, #76	@ 0x4c
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	8812      	ldrh	r2, [r2, #0]
 8003d76:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	2380      	movs	r3, #128	@ 0x80
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	4013      	ands	r3, r2
 8003d82:	d037      	beq.n	8003df4 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2250      	movs	r2, #80	@ 0x50
 8003d8a:	5a9b      	ldrh	r3, [r3, r2]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	001a      	movs	r2, r3
 8003d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	18d2      	adds	r2, r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	18d3      	adds	r3, r2, r3
 8003d9e:	4a88      	ldr	r2, [pc, #544]	@ (8003fc0 <PCD_EP_ISR_Handler+0x340>)
 8003da0:	4694      	mov	ip, r2
 8003da2:	4463      	add	r3, ip
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	059b      	lsls	r3, r3, #22
 8003da8:	0d9a      	lsrs	r2, r3, #22
 8003daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	22a6      	movs	r2, #166	@ 0xa6
 8003db6:	0092      	lsls	r2, r2, #2
 8003db8:	1899      	adds	r1, r3, r2
 8003dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f005 f9a1 	bl	800910a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	2010      	movs	r0, #16
 8003dd2:	183b      	adds	r3, r7, r0
 8003dd4:	497b      	ldr	r1, [pc, #492]	@ (8003fc4 <PCD_EP_ISR_Handler+0x344>)
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	183a      	adds	r2, r7, r0
 8003de0:	8812      	ldrh	r2, [r2, #0]
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	430a      	orrs	r2, r1
 8003de6:	b292      	uxth	r2, r2
 8003de8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f007 f931 	bl	800b054 <HAL_PCD_SetupStageCallback>
 8003df2:	e335      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003df4:	234c      	movs	r3, #76	@ 0x4c
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	5e9b      	ldrsh	r3, [r3, r2]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	db00      	blt.n	8003e02 <PCD_EP_ISR_Handler+0x182>
 8003e00:	e32e      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	201e      	movs	r0, #30
 8003e0c:	183b      	adds	r3, r7, r0
 8003e0e:	496d      	ldr	r1, [pc, #436]	@ (8003fc4 <PCD_EP_ISR_Handler+0x344>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	183a      	adds	r2, r7, r0
 8003e1a:	8812      	ldrh	r2, [r2, #0]
 8003e1c:	2180      	movs	r1, #128	@ 0x80
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	b292      	uxth	r2, r2
 8003e22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2250      	movs	r2, #80	@ 0x50
 8003e2a:	5a9b      	ldrh	r3, [r3, r2]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	001a      	movs	r2, r3
 8003e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	18d2      	adds	r2, r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	18d3      	adds	r3, r2, r3
 8003e3e:	4a60      	ldr	r2, [pc, #384]	@ (8003fc0 <PCD_EP_ISR_Handler+0x340>)
 8003e40:	4694      	mov	ip, r2
 8003e42:	4463      	add	r3, ip
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	059b      	lsls	r3, r3, #22
 8003e48:	0d9a      	lsrs	r2, r3, #22
 8003e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01a      	beq.n	8003e8c <PCD_EP_ISR_Handler+0x20c>
 8003e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e64:	6959      	ldr	r1, [r3, #20]
 8003e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e68:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f005 f94b 	bl	800910a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	18d2      	adds	r2, r2, r3
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2100      	movs	r1, #0
 8003e86:	0018      	movs	r0, r3
 8003e88:	f007 f8f9 	bl	800b07e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	214c      	movs	r1, #76	@ 0x4c
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	8812      	ldrh	r2, [r2, #0]
 8003e96:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d000      	beq.n	8003ea6 <PCD_EP_ISR_Handler+0x226>
 8003ea4:	e2dc      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	881a      	ldrh	r2, [r3, #0]
 8003eaa:	23c0      	movs	r3, #192	@ 0xc0
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	401a      	ands	r2, r3
 8003eb0:	23c0      	movs	r3, #192	@ 0xc0
 8003eb2:	019b      	lsls	r3, r3, #6
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d100      	bne.n	8003eba <PCD_EP_ISR_Handler+0x23a>
 8003eb8:	e2d2      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2250      	movs	r2, #80	@ 0x50
 8003ec6:	5a9b      	ldrh	r3, [r3, r2]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	001a      	movs	r2, r3
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	189b      	adds	r3, r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8003fc0 <PCD_EP_ISR_Handler+0x340>)
 8003ed6:	4694      	mov	ip, r2
 8003ed8:	4463      	add	r3, ip
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	059b      	lsls	r3, r3, #22
 8003ee4:	0d9b      	lsrs	r3, r3, #22
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d108      	bne.n	8003f06 <PCD_EP_ISR_Handler+0x286>
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb8 <PCD_EP_ISR_Handler+0x338>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e035      	b.n	8003f72 <PCD_EP_ISR_Handler+0x2f2>
 8003f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f0c:	d817      	bhi.n	8003f3e <PCD_EP_ISR_Handler+0x2be>
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d002      	beq.n	8003f26 <PCD_EP_ISR_Handler+0x2a6>
 8003f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f22:	3301      	adds	r3, #1
 8003f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	029b      	lsls	r3, r3, #10
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	e019      	b.n	8003f72 <PCD_EP_ISR_Handler+0x2f2>
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	221f      	movs	r2, #31
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d102      	bne.n	8003f56 <PCD_EP_ISR_Handler+0x2d6>
 8003f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f52:	3b01      	subs	r3, #1
 8003f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4313      	orrs	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4a13      	ldr	r2, [pc, #76]	@ (8003fb8 <PCD_EP_ISR_Handler+0x338>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	2012      	movs	r0, #18
 8003f7c:	183b      	adds	r3, r7, r0
 8003f7e:	4912      	ldr	r1, [pc, #72]	@ (8003fc8 <PCD_EP_ISR_Handler+0x348>)
 8003f80:	400a      	ands	r2, r1
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	183b      	adds	r3, r7, r0
 8003f86:	183a      	adds	r2, r7, r0
 8003f88:	8812      	ldrh	r2, [r2, #0]
 8003f8a:	2180      	movs	r1, #128	@ 0x80
 8003f8c:	0149      	lsls	r1, r1, #5
 8003f8e:	404a      	eors	r2, r1
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	183b      	adds	r3, r7, r0
 8003f94:	183a      	adds	r2, r7, r0
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	2180      	movs	r1, #128	@ 0x80
 8003f9a:	0189      	lsls	r1, r1, #6
 8003f9c:	404a      	eors	r2, r1
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	183a      	adds	r2, r7, r0
 8003fa6:	8812      	ldrh	r2, [r2, #0]
 8003fa8:	4908      	ldr	r1, [pc, #32]	@ (8003fcc <PCD_EP_ISR_Handler+0x34c>)
 8003faa:	430a      	orrs	r2, r1
 8003fac:	b292      	uxth	r2, r2
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e256      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	ffff8f0f 	.word	0xffff8f0f
 8003fb8:	ffff8000 	.word	0xffff8000
 8003fbc:	00000402 	.word	0x00000402
 8003fc0:	00000406 	.word	0x00000406
 8003fc4:	00000f8f 	.word	0x00000f8f
 8003fc8:	ffffbf8f 	.word	0xffffbf8f
 8003fcc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	204f      	movs	r0, #79	@ 0x4f
 8003fd8:	183b      	adds	r3, r7, r0
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	18d2      	adds	r2, r2, r3
 8003fe0:	214c      	movs	r1, #76	@ 0x4c
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	2200      	movs	r2, #0
 8003fec:	5e9b      	ldrsh	r3, [r3, r2]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	db00      	blt.n	8003ff4 <PCD_EP_ISR_Handler+0x374>
 8003ff2:	e0fa      	b.n	80041ea <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	001a      	movs	r2, r3
 8003ffa:	183b      	adds	r3, r7, r0
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	18d3      	adds	r3, r2, r3
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29a      	uxth	r2, r3
 8004006:	244a      	movs	r4, #74	@ 0x4a
 8004008:	193b      	adds	r3, r7, r4
 800400a:	49d1      	ldr	r1, [pc, #836]	@ (8004350 <PCD_EP_ISR_Handler+0x6d0>)
 800400c:	400a      	ands	r2, r1
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	001a      	movs	r2, r3
 8004016:	183b      	adds	r3, r7, r0
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	18d3      	adds	r3, r2, r3
 800401e:	193a      	adds	r2, r7, r4
 8004020:	8812      	ldrh	r2, [r2, #0]
 8004022:	2180      	movs	r1, #128	@ 0x80
 8004024:	430a      	orrs	r2, r1
 8004026:	b292      	uxth	r2, r2
 8004028:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800402a:	183b      	adds	r3, r7, r0
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	0013      	movs	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	189b      	adds	r3, r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	3351      	adds	r3, #81	@ 0x51
 8004038:	33ff      	adds	r3, #255	@ 0xff
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	18d3      	adds	r3, r2, r3
 800403e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004042:	7b1b      	ldrb	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d125      	bne.n	8004094 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2250      	movs	r2, #80	@ 0x50
 800404e:	5a9b      	ldrh	r3, [r3, r2]
 8004050:	b29b      	uxth	r3, r3
 8004052:	001a      	movs	r2, r3
 8004054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	18d2      	adds	r2, r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	18d3      	adds	r3, r2, r3
 8004062:	4abc      	ldr	r2, [pc, #752]	@ (8004354 <PCD_EP_ISR_Handler+0x6d4>)
 8004064:	4694      	mov	ip, r2
 8004066:	4463      	add	r3, ip
 8004068:	881a      	ldrh	r2, [r3, #0]
 800406a:	2450      	movs	r4, #80	@ 0x50
 800406c:	193b      	adds	r3, r7, r4
 800406e:	0592      	lsls	r2, r2, #22
 8004070:	0d92      	lsrs	r2, r2, #22
 8004072:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004074:	193b      	adds	r3, r7, r4
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d100      	bne.n	800407e <PCD_EP_ISR_Handler+0x3fe>
 800407c:	e08d      	b.n	800419a <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	6959      	ldr	r1, [r3, #20]
 8004086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004088:	88da      	ldrh	r2, [r3, #6]
 800408a:	193b      	adds	r3, r7, r4
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	f005 f83c 	bl	800910a <USB_ReadPMA>
 8004092:	e082      	b.n	800419a <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004096:	78db      	ldrb	r3, [r3, #3]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d10c      	bne.n	80040b6 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800409c:	2350      	movs	r3, #80	@ 0x50
 800409e:	18fc      	adds	r4, r7, r3
 80040a0:	234c      	movs	r3, #76	@ 0x4c
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f000 f9ec 	bl	8004488 <HAL_PCD_EP_DB_Receive>
 80040b0:	0003      	movs	r3, r0
 80040b2:	8023      	strh	r3, [r4, #0]
 80040b4:	e071      	b.n	800419a <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	001a      	movs	r2, r3
 80040bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	18d3      	adds	r3, r2, r3
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	2052      	movs	r0, #82	@ 0x52
 80040ca:	183b      	adds	r3, r7, r0
 80040cc:	49a2      	ldr	r1, [pc, #648]	@ (8004358 <PCD_EP_ISR_Handler+0x6d8>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	801a      	strh	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	001a      	movs	r2, r3
 80040d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	18d3      	adds	r3, r2, r3
 80040e0:	183a      	adds	r2, r7, r0
 80040e2:	8812      	ldrh	r2, [r2, #0]
 80040e4:	499d      	ldr	r1, [pc, #628]	@ (800435c <PCD_EP_ISR_Handler+0x6dc>)
 80040e6:	430a      	orrs	r2, r1
 80040e8:	b292      	uxth	r2, r2
 80040ea:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	001a      	movs	r2, r3
 80040f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	18d3      	adds	r3, r2, r3
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	001a      	movs	r2, r3
 8004100:	2380      	movs	r3, #128	@ 0x80
 8004102:	01db      	lsls	r3, r3, #7
 8004104:	4013      	ands	r3, r2
 8004106:	d024      	beq.n	8004152 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2250      	movs	r2, #80	@ 0x50
 800410e:	5a9b      	ldrh	r3, [r3, r2]
 8004110:	b29b      	uxth	r3, r3
 8004112:	001a      	movs	r2, r3
 8004114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	18d2      	adds	r2, r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	18d3      	adds	r3, r2, r3
 8004122:	4a8f      	ldr	r2, [pc, #572]	@ (8004360 <PCD_EP_ISR_Handler+0x6e0>)
 8004124:	4694      	mov	ip, r2
 8004126:	4463      	add	r3, ip
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	2450      	movs	r4, #80	@ 0x50
 800412c:	193b      	adds	r3, r7, r4
 800412e:	0592      	lsls	r2, r2, #22
 8004130:	0d92      	lsrs	r2, r2, #22
 8004132:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004134:	193b      	adds	r3, r7, r4
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02e      	beq.n	800419a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004142:	6959      	ldr	r1, [r3, #20]
 8004144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004146:	891a      	ldrh	r2, [r3, #8]
 8004148:	193b      	adds	r3, r7, r4
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	f004 ffdd 	bl	800910a <USB_ReadPMA>
 8004150:	e023      	b.n	800419a <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2250      	movs	r2, #80	@ 0x50
 8004158:	5a9b      	ldrh	r3, [r3, r2]
 800415a:	b29b      	uxth	r3, r3
 800415c:	001a      	movs	r2, r3
 800415e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	18d2      	adds	r2, r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	18d3      	adds	r3, r2, r3
 800416c:	4a79      	ldr	r2, [pc, #484]	@ (8004354 <PCD_EP_ISR_Handler+0x6d4>)
 800416e:	4694      	mov	ip, r2
 8004170:	4463      	add	r3, ip
 8004172:	881a      	ldrh	r2, [r3, #0]
 8004174:	2450      	movs	r4, #80	@ 0x50
 8004176:	193b      	adds	r3, r7, r4
 8004178:	0592      	lsls	r2, r2, #22
 800417a:	0d92      	lsrs	r2, r2, #22
 800417c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800417e:	193b      	adds	r3, r7, r4
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	6959      	ldr	r1, [r3, #20]
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	895a      	ldrh	r2, [r3, #10]
 8004192:	193b      	adds	r3, r7, r4
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	f004 ffb8 	bl	800910a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800419a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	2150      	movs	r1, #80	@ 0x50
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	18d2      	adds	r2, r2, r3
 80041a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	18d2      	adds	r2, r2, r3
 80041b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <PCD_EP_ISR_Handler+0x54c>
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	881a      	ldrh	r2, [r3, #0]
 80041c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d207      	bcs.n	80041dc <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0011      	movs	r1, r2
 80041d4:	0018      	movs	r0, r3
 80041d6:	f006 ff52 	bl	800b07e <HAL_PCD_DataOutStageCallback>
 80041da:	e006      	b.n	80041ea <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f003 fcdd 	bl	8007ba4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041ea:	244c      	movs	r4, #76	@ 0x4c
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	2280      	movs	r2, #128	@ 0x80
 80041f2:	4013      	ands	r3, r2
 80041f4:	d100      	bne.n	80041f8 <PCD_EP_ISR_Handler+0x578>
 80041f6:	e133      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 80041f8:	204f      	movs	r0, #79	@ 0x4f
 80041fa:	183b      	adds	r3, r7, r0
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	0013      	movs	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	189b      	adds	r3, r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	3310      	adds	r3, #16
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	18d3      	adds	r3, r2, r3
 800420c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	001a      	movs	r2, r3
 8004214:	183b      	adds	r3, r7, r0
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	18d3      	adds	r3, r2, r3
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29a      	uxth	r2, r3
 8004220:	2542      	movs	r5, #66	@ 0x42
 8004222:	197b      	adds	r3, r7, r5
 8004224:	494f      	ldr	r1, [pc, #316]	@ (8004364 <PCD_EP_ISR_Handler+0x6e4>)
 8004226:	400a      	ands	r2, r1
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	001a      	movs	r2, r3
 8004230:	183b      	adds	r3, r7, r0
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	18d3      	adds	r3, r2, r3
 8004238:	197a      	adds	r2, r7, r5
 800423a:	8812      	ldrh	r2, [r2, #0]
 800423c:	494a      	ldr	r1, [pc, #296]	@ (8004368 <PCD_EP_ISR_Handler+0x6e8>)
 800423e:	430a      	orrs	r2, r1
 8004240:	b292      	uxth	r2, r2
 8004242:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004246:	78db      	ldrb	r3, [r3, #3]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d000      	beq.n	800424e <PCD_EP_ISR_Handler+0x5ce>
 800424c:	e0af      	b.n	80043ae <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 800424e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004250:	2200      	movs	r2, #0
 8004252:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004256:	7b1b      	ldrb	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d100      	bne.n	800425e <PCD_EP_ISR_Handler+0x5de>
 800425c:	e09f      	b.n	800439e <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800425e:	193b      	adds	r3, r7, r4
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	2240      	movs	r2, #64	@ 0x40
 8004264:	4013      	ands	r3, r2
 8004266:	d046      	beq.n	80042f6 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d125      	bne.n	80042bc <PCD_EP_ISR_Handler+0x63c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2250      	movs	r2, #80	@ 0x50
 800427c:	5a9b      	ldrh	r3, [r3, r2]
 800427e:	b29b      	uxth	r3, r3
 8004280:	001a      	movs	r2, r3
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	189b      	adds	r3, r3, r2
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
 8004288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	00da      	lsls	r2, r3, #3
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	18d3      	adds	r3, r2, r3
 8004292:	4a33      	ldr	r2, [pc, #204]	@ (8004360 <PCD_EP_ISR_Handler+0x6e0>)
 8004294:	4694      	mov	ip, r2
 8004296:	4463      	add	r3, ip
 8004298:	623b      	str	r3, [r7, #32]
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	059b      	lsls	r3, r3, #22
 80042a2:	0d9b      	lsrs	r3, r3, #22
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004368 <PCD_EP_ISR_Handler+0x6e8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	e070      	b.n	800439e <PCD_EP_ISR_Handler+0x71e>
 80042bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d16c      	bne.n	800439e <PCD_EP_ISR_Handler+0x71e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2250      	movs	r2, #80	@ 0x50
 80042d0:	5a9b      	ldrh	r3, [r3, r2]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	001a      	movs	r2, r3
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	189b      	adds	r3, r3, r2
 80042da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	00da      	lsls	r2, r3, #3
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004360 <PCD_EP_ISR_Handler+0x6e0>)
 80042e8:	4694      	mov	ip, r2
 80042ea:	4463      	add	r3, ip
 80042ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	2200      	movs	r2, #0
 80042f2:	801a      	strh	r2, [r3, #0]
 80042f4:	e053      	b.n	800439e <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d133      	bne.n	800436c <PCD_EP_ISR_Handler+0x6ec>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	637b      	str	r3, [r7, #52]	@ 0x34
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2250      	movs	r2, #80	@ 0x50
 8004310:	5a9b      	ldrh	r3, [r3, r2]
 8004312:	b29b      	uxth	r3, r3
 8004314:	001a      	movs	r2, r3
 8004316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004318:	189b      	adds	r3, r3, r2
 800431a:	637b      	str	r3, [r7, #52]	@ 0x34
 800431c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	00da      	lsls	r2, r3, #3
 8004322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004324:	18d3      	adds	r3, r2, r3
 8004326:	4a0b      	ldr	r2, [pc, #44]	@ (8004354 <PCD_EP_ISR_Handler+0x6d4>)
 8004328:	4694      	mov	ip, r2
 800432a:	4463      	add	r3, ip
 800432c:	633b      	str	r3, [r7, #48]	@ 0x30
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	059b      	lsls	r3, r3, #22
 8004336:	0d9b      	lsrs	r3, r3, #22
 8004338:	b29a      	uxth	r2, r3
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	801a      	strh	r2, [r3, #0]
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	4a08      	ldr	r2, [pc, #32]	@ (8004368 <PCD_EP_ISR_Handler+0x6e8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	b29a      	uxth	r2, r3
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e026      	b.n	800439e <PCD_EP_ISR_Handler+0x71e>
 8004350:	00000f8f 	.word	0x00000f8f
 8004354:	00000406 	.word	0x00000406
 8004358:	ffff8f8f 	.word	0xffff8f8f
 800435c:	ffff80c0 	.word	0xffff80c0
 8004360:	00000402 	.word	0x00000402
 8004364:	ffff8f0f 	.word	0xffff8f0f
 8004368:	ffff8000 	.word	0xffff8000
 800436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d114      	bne.n	800439e <PCD_EP_ISR_Handler+0x71e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2250      	movs	r2, #80	@ 0x50
 800437a:	5a9b      	ldrh	r3, [r3, r2]
 800437c:	b29b      	uxth	r3, r3
 800437e:	001a      	movs	r2, r3
 8004380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004382:	189b      	adds	r3, r3, r2
 8004384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	00da      	lsls	r2, r3, #3
 800438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438e:	18d3      	adds	r3, r2, r3
 8004390:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <PCD_EP_ISR_Handler+0x800>)
 8004392:	4694      	mov	ip, r2
 8004394:	4463      	add	r3, ip
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439a:	2200      	movs	r2, #0
 800439c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800439e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	0011      	movs	r1, r2
 80043a6:	0018      	movs	r0, r3
 80043a8:	f006 fe8a 	bl	800b0c0 <HAL_PCD_DataInStageCallback>
 80043ac:	e058      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043ae:	234c      	movs	r3, #76	@ 0x4c
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	881a      	ldrh	r2, [r3, #0]
 80043b4:	2380      	movs	r3, #128	@ 0x80
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4013      	ands	r3, r2
 80043ba:	d149      	bne.n	8004450 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2250      	movs	r2, #80	@ 0x50
 80043c2:	5a9b      	ldrh	r3, [r3, r2]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	001a      	movs	r2, r3
 80043c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	18d2      	adds	r2, r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	18d3      	adds	r3, r2, r3
 80043d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004484 <PCD_EP_ISR_Handler+0x804>)
 80043d8:	4694      	mov	ip, r2
 80043da:	4463      	add	r3, ip
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	2140      	movs	r1, #64	@ 0x40
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	0592      	lsls	r2, r2, #22
 80043e4:	0d92      	lsrs	r2, r2, #22
 80043e6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80043e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d907      	bls.n	8004404 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80043f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	187b      	adds	r3, r7, r1
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	619a      	str	r2, [r3, #24]
 8004402:	e002      	b.n	800440a <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004406:	2200      	movs	r2, #0
 8004408:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0011      	movs	r1, r2
 800441a:	0018      	movs	r0, r3
 800441c:	f006 fe50 	bl	800b0c0 <HAL_PCD_DataInStageCallback>
 8004420:	e01e      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	2140      	movs	r1, #64	@ 0x40
 8004428:	187b      	adds	r3, r7, r1
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	18d2      	adds	r2, r2, r3
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	187b      	adds	r3, r7, r1
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	18d2      	adds	r2, r2, r3
 800443c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004446:	0011      	movs	r1, r2
 8004448:	0018      	movs	r0, r3
 800444a:	f003 fbab 	bl	8007ba4 <USB_EPStartXfer>
 800444e:	e007      	b.n	8004460 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004450:	234c      	movs	r3, #76	@ 0x4c
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	881a      	ldrh	r2, [r3, #0]
 8004456:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0018      	movs	r0, r3
 800445c:	f000 f930 	bl	80046c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2244      	movs	r2, #68	@ 0x44
 8004466:	5a9b      	ldrh	r3, [r3, r2]
 8004468:	b29b      	uxth	r3, r3
 800446a:	b21b      	sxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	da01      	bge.n	8004474 <PCD_EP_ISR_Handler+0x7f4>
 8004470:	f7ff fc0c 	bl	8003c8c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b016      	add	sp, #88	@ 0x58
 800447c:	bdb0      	pop	{r4, r5, r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	00000406 	.word	0x00000406
 8004484:	00000402 	.word	0x00000402

08004488 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b089      	sub	sp, #36	@ 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	1dbb      	adds	r3, r7, #6
 8004494:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004496:	1dbb      	adds	r3, r7, #6
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	2380      	movs	r3, #128	@ 0x80
 800449c:	01db      	lsls	r3, r3, #7
 800449e:	4013      	ands	r3, r2
 80044a0:	d100      	bne.n	80044a4 <HAL_PCD_EP_DB_Receive+0x1c>
 80044a2:	e07d      	b.n	80045a0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2250      	movs	r2, #80	@ 0x50
 80044aa:	5a9b      	ldrh	r3, [r3, r2]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	001a      	movs	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	18d2      	adds	r2, r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	18d3      	adds	r3, r2, r3
 80044be:	4a7a      	ldr	r2, [pc, #488]	@ (80046a8 <HAL_PCD_EP_DB_Receive+0x220>)
 80044c0:	4694      	mov	ip, r2
 80044c2:	4463      	add	r3, ip
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	211a      	movs	r1, #26
 80044c8:	187b      	adds	r3, r7, r1
 80044ca:	0592      	lsls	r2, r2, #22
 80044cc:	0d92      	lsrs	r2, r2, #22
 80044ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d307      	bcc.n	80044ec <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	187b      	adds	r3, r7, r1
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	1ad2      	subs	r2, r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	619a      	str	r2, [r3, #24]
 80044ea:	e002      	b.n	80044f2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2200      	movs	r2, #0
 80044f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d121      	bne.n	800453e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	001a      	movs	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	18d3      	adds	r3, r2, r3
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	2018      	movs	r0, #24
 800450e:	183b      	adds	r3, r7, r0
 8004510:	4966      	ldr	r1, [pc, #408]	@ (80046ac <HAL_PCD_EP_DB_Receive+0x224>)
 8004512:	400a      	ands	r2, r1
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	183b      	adds	r3, r7, r0
 8004518:	183a      	adds	r2, r7, r0
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	2180      	movs	r1, #128	@ 0x80
 800451e:	0189      	lsls	r1, r1, #6
 8004520:	404a      	eors	r2, r1
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	001a      	movs	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	183a      	adds	r2, r7, r0
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	495e      	ldr	r1, [pc, #376]	@ (80046b0 <HAL_PCD_EP_DB_Receive+0x228>)
 8004538:	430a      	orrs	r2, r1
 800453a:	b292      	uxth	r2, r2
 800453c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	2240      	movs	r2, #64	@ 0x40
 8004544:	4013      	ands	r3, r2
 8004546:	d01a      	beq.n	800457e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	001a      	movs	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	18d3      	adds	r3, r2, r3
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29a      	uxth	r2, r3
 800455a:	2016      	movs	r0, #22
 800455c:	183b      	adds	r3, r7, r0
 800455e:	4955      	ldr	r1, [pc, #340]	@ (80046b4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004560:	400a      	ands	r2, r1
 8004562:	801a      	strh	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	001a      	movs	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	18d3      	adds	r3, r2, r3
 8004572:	183a      	adds	r2, r7, r0
 8004574:	8812      	ldrh	r2, [r2, #0]
 8004576:	4950      	ldr	r1, [pc, #320]	@ (80046b8 <HAL_PCD_EP_DB_Receive+0x230>)
 8004578:	430a      	orrs	r2, r1
 800457a:	b292      	uxth	r2, r2
 800457c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800457e:	241a      	movs	r4, #26
 8004580:	193b      	adds	r3, r7, r4
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d100      	bne.n	800458a <HAL_PCD_EP_DB_Receive+0x102>
 8004588:	e086      	b.n	8004698 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6959      	ldr	r1, [r3, #20]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	891a      	ldrh	r2, [r3, #8]
 8004596:	193b      	adds	r3, r7, r4
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	f004 fdb6 	bl	800910a <USB_ReadPMA>
 800459e:	e07b      	b.n	8004698 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2250      	movs	r2, #80	@ 0x50
 80045a6:	5a9b      	ldrh	r3, [r3, r2]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	001a      	movs	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	18d2      	adds	r2, r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	18d3      	adds	r3, r2, r3
 80045ba:	4a40      	ldr	r2, [pc, #256]	@ (80046bc <HAL_PCD_EP_DB_Receive+0x234>)
 80045bc:	4694      	mov	ip, r2
 80045be:	4463      	add	r3, ip
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	211a      	movs	r1, #26
 80045c4:	187b      	adds	r3, r7, r1
 80045c6:	0592      	lsls	r2, r2, #22
 80045c8:	0d92      	lsrs	r2, r2, #22
 80045ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	187b      	adds	r3, r7, r1
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d307      	bcc.n	80045e8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	619a      	str	r2, [r3, #24]
 80045e6:	e002      	b.n	80045ee <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d121      	bne.n	800463a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	001a      	movs	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	18d3      	adds	r3, r2, r3
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29a      	uxth	r2, r3
 8004608:	201e      	movs	r0, #30
 800460a:	183b      	adds	r3, r7, r0
 800460c:	4927      	ldr	r1, [pc, #156]	@ (80046ac <HAL_PCD_EP_DB_Receive+0x224>)
 800460e:	400a      	ands	r2, r1
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	183b      	adds	r3, r7, r0
 8004614:	183a      	adds	r2, r7, r0
 8004616:	8812      	ldrh	r2, [r2, #0]
 8004618:	2180      	movs	r1, #128	@ 0x80
 800461a:	0189      	lsls	r1, r1, #6
 800461c:	404a      	eors	r2, r1
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	001a      	movs	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	18d3      	adds	r3, r2, r3
 800462e:	183a      	adds	r2, r7, r0
 8004630:	8812      	ldrh	r2, [r2, #0]
 8004632:	491f      	ldr	r1, [pc, #124]	@ (80046b0 <HAL_PCD_EP_DB_Receive+0x228>)
 8004634:	430a      	orrs	r2, r1
 8004636:	b292      	uxth	r2, r2
 8004638:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800463a:	1dbb      	adds	r3, r7, #6
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	2240      	movs	r2, #64	@ 0x40
 8004640:	4013      	ands	r3, r2
 8004642:	d11a      	bne.n	800467a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	001a      	movs	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	18d3      	adds	r3, r2, r3
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29a      	uxth	r2, r3
 8004656:	201c      	movs	r0, #28
 8004658:	183b      	adds	r3, r7, r0
 800465a:	4916      	ldr	r1, [pc, #88]	@ (80046b4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800465c:	400a      	ands	r2, r1
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	001a      	movs	r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	18d3      	adds	r3, r2, r3
 800466e:	183a      	adds	r2, r7, r0
 8004670:	8812      	ldrh	r2, [r2, #0]
 8004672:	4911      	ldr	r1, [pc, #68]	@ (80046b8 <HAL_PCD_EP_DB_Receive+0x230>)
 8004674:	430a      	orrs	r2, r1
 8004676:	b292      	uxth	r2, r2
 8004678:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800467a:	241a      	movs	r4, #26
 800467c:	193b      	adds	r3, r7, r4
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	6959      	ldr	r1, [r3, #20]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	895a      	ldrh	r2, [r3, #10]
 8004690:	193b      	adds	r3, r7, r4
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	f004 fd39 	bl	800910a <USB_ReadPMA>
    }
  }

  return count;
 8004698:	231a      	movs	r3, #26
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	881b      	ldrh	r3, [r3, #0]
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b009      	add	sp, #36	@ 0x24
 80046a4:	bd90      	pop	{r4, r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	00000402 	.word	0x00000402
 80046ac:	ffffbf8f 	.word	0xffffbf8f
 80046b0:	ffff8080 	.word	0xffff8080
 80046b4:	ffff8f8f 	.word	0xffff8f8f
 80046b8:	ffff80c0 	.word	0xffff80c0
 80046bc:	00000406 	.word	0x00000406

080046c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0a4      	sub	sp, #144	@ 0x90
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	1dbb      	adds	r3, r7, #6
 80046cc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046ce:	1dbb      	adds	r3, r7, #6
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	2240      	movs	r2, #64	@ 0x40
 80046d4:	4013      	ands	r3, r2
 80046d6:	d100      	bne.n	80046da <HAL_PCD_EP_DB_Transmit+0x1a>
 80046d8:	e1e4      	b.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2250      	movs	r2, #80	@ 0x50
 80046e0:	5a9b      	ldrh	r3, [r3, r2]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	001a      	movs	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	18d2      	adds	r2, r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	18d3      	adds	r3, r2, r3
 80046f4:	4ad0      	ldr	r2, [pc, #832]	@ (8004a38 <HAL_PCD_EP_DB_Transmit+0x378>)
 80046f6:	4694      	mov	ip, r2
 80046f8:	4463      	add	r3, ip
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	2188      	movs	r1, #136	@ 0x88
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	0592      	lsls	r2, r2, #22
 8004702:	0d92      	lsrs	r2, r2, #22
 8004704:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	187b      	adds	r3, r7, r1
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d907      	bls.n	8004722 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	187b      	adds	r3, r7, r1
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	619a      	str	r2, [r3, #24]
 8004720:	e002      	b.n	8004728 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d000      	beq.n	8004732 <HAL_PCD_EP_DB_Transmit+0x72>
 8004730:	e0b5      	b.n	800489e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d125      	bne.n	8004786 <HAL_PCD_EP_DB_Transmit+0xc6>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2250      	movs	r2, #80	@ 0x50
 8004746:	5a9b      	ldrh	r3, [r3, r2]
 8004748:	b29b      	uxth	r3, r3
 800474a:	001a      	movs	r2, r3
 800474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474e:	189b      	adds	r3, r3, r2
 8004750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	00da      	lsls	r2, r3, #3
 8004758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475a:	18d3      	adds	r3, r2, r3
 800475c:	4ab6      	ldr	r2, [pc, #728]	@ (8004a38 <HAL_PCD_EP_DB_Transmit+0x378>)
 800475e:	4694      	mov	ip, r2
 8004760:	4463      	add	r3, ip
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	059b      	lsls	r3, r3, #22
 800476c:	0d9b      	lsrs	r3, r3, #22
 800476e:	b29a      	uxth	r2, r3
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	4ab0      	ldr	r2, [pc, #704]	@ (8004a3c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	b29a      	uxth	r2, r3
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	801a      	strh	r2, [r3, #0]
 8004784:	e01b      	b.n	80047be <HAL_PCD_EP_DB_Transmit+0xfe>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d117      	bne.n	80047be <HAL_PCD_EP_DB_Transmit+0xfe>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	637b      	str	r3, [r7, #52]	@ 0x34
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2250      	movs	r2, #80	@ 0x50
 800479a:	5a9b      	ldrh	r3, [r3, r2]
 800479c:	b29b      	uxth	r3, r3
 800479e:	001a      	movs	r2, r3
 80047a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	00da      	lsls	r2, r3, #3
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	18d3      	adds	r3, r2, r3
 80047b0:	4aa1      	ldr	r2, [pc, #644]	@ (8004a38 <HAL_PCD_EP_DB_Transmit+0x378>)
 80047b2:	4694      	mov	ip, r2
 80047b4:	4463      	add	r3, ip
 80047b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	2200      	movs	r2, #0
 80047bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d125      	bne.n	8004818 <HAL_PCD_EP_DB_Transmit+0x158>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2250      	movs	r2, #80	@ 0x50
 80047d8:	5a9b      	ldrh	r3, [r3, r2]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	001a      	movs	r2, r3
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	189b      	adds	r3, r3, r2
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	00da      	lsls	r2, r3, #3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	18d3      	adds	r3, r2, r3
 80047ee:	4a94      	ldr	r2, [pc, #592]	@ (8004a40 <HAL_PCD_EP_DB_Transmit+0x380>)
 80047f0:	4694      	mov	ip, r2
 80047f2:	4463      	add	r3, ip
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	059b      	lsls	r3, r3, #22
 80047fe:	0d9b      	lsrs	r3, r3, #22
 8004800:	b29a      	uxth	r2, r3
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	4a8b      	ldr	r2, [pc, #556]	@ (8004a3c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	b29a      	uxth	r2, r3
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e018      	b.n	800484a <HAL_PCD_EP_DB_Transmit+0x18a>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d114      	bne.n	800484a <HAL_PCD_EP_DB_Transmit+0x18a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2250      	movs	r2, #80	@ 0x50
 8004826:	5a9b      	ldrh	r3, [r3, r2]
 8004828:	b29b      	uxth	r3, r3
 800482a:	001a      	movs	r2, r3
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	189b      	adds	r3, r3, r2
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	00da      	lsls	r2, r3, #3
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	18d3      	adds	r3, r2, r3
 800483c:	4a80      	ldr	r2, [pc, #512]	@ (8004a40 <HAL_PCD_EP_DB_Transmit+0x380>)
 800483e:	4694      	mov	ip, r2
 8004840:	4463      	add	r3, ip
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2200      	movs	r2, #0
 8004848:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	0011      	movs	r1, r2
 8004852:	0018      	movs	r0, r3
 8004854:	f006 fc34 	bl	800b0c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004858:	1dbb      	adds	r3, r7, #6
 800485a:	881a      	ldrh	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	01db      	lsls	r3, r3, #7
 8004860:	4013      	ands	r3, r2
 8004862:	d100      	bne.n	8004866 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004864:	e308      	b.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	001a      	movs	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	18d3      	adds	r3, r2, r3
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29a      	uxth	r2, r3
 8004878:	2016      	movs	r0, #22
 800487a:	183b      	adds	r3, r7, r0
 800487c:	4971      	ldr	r1, [pc, #452]	@ (8004a44 <HAL_PCD_EP_DB_Transmit+0x384>)
 800487e:	400a      	ands	r2, r1
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	001a      	movs	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	18d3      	adds	r3, r2, r3
 8004890:	183a      	adds	r2, r7, r0
 8004892:	8812      	ldrh	r2, [r2, #0]
 8004894:	496c      	ldr	r1, [pc, #432]	@ (8004a48 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004896:	430a      	orrs	r2, r1
 8004898:	b292      	uxth	r2, r2
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	e2ec      	b.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800489e:	1dbb      	adds	r3, r7, #6
 80048a0:	881a      	ldrh	r2, [r3, #0]
 80048a2:	2380      	movs	r3, #128	@ 0x80
 80048a4:	01db      	lsls	r3, r3, #7
 80048a6:	4013      	ands	r3, r2
 80048a8:	d01a      	beq.n	80048e0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	001a      	movs	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	18d3      	adds	r3, r2, r3
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	208a      	movs	r0, #138	@ 0x8a
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	4960      	ldr	r1, [pc, #384]	@ (8004a44 <HAL_PCD_EP_DB_Transmit+0x384>)
 80048c2:	400a      	ands	r2, r1
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	001a      	movs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	18d3      	adds	r3, r2, r3
 80048d4:	183a      	adds	r2, r7, r0
 80048d6:	8812      	ldrh	r2, [r2, #0]
 80048d8:	495b      	ldr	r1, [pc, #364]	@ (8004a48 <HAL_PCD_EP_DB_Transmit+0x388>)
 80048da:	430a      	orrs	r2, r1
 80048dc:	b292      	uxth	r2, r2
 80048de:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2224      	movs	r2, #36	@ 0x24
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d000      	beq.n	80048ec <HAL_PCD_EP_DB_Transmit+0x22c>
 80048ea:	e2c5      	b.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	2188      	movs	r1, #136	@ 0x88
 80048f2:	187b      	adds	r3, r7, r1
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	18d2      	adds	r2, r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	187b      	adds	r3, r7, r1
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	18d2      	adds	r2, r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	429a      	cmp	r2, r3
 8004914:	d30c      	bcc.n	8004930 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	218c      	movs	r1, #140	@ 0x8c
 800491c:	187a      	adds	r2, r7, r1
 800491e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	187b      	adds	r3, r7, r1
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	1ad2      	subs	r2, r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	621a      	str	r2, [r3, #32]
 800492e:	e01a      	b.n	8004966 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004938:	2388      	movs	r3, #136	@ 0x88
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	228c      	movs	r2, #140	@ 0x8c
 8004940:	18ba      	adds	r2, r7, r2
 8004942:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2224      	movs	r2, #36	@ 0x24
 8004948:	2100      	movs	r1, #0
 800494a:	5499      	strb	r1, [r3, r2]
 800494c:	e00b      	b.n	8004966 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2224      	movs	r2, #36	@ 0x24
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	228c      	movs	r2, #140	@ 0x8c
 800495c:	18ba      	adds	r2, r7, r2
 800495e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2200      	movs	r2, #0
 8004964:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d000      	beq.n	8004970 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800496e:	e06d      	b.n	8004a4c <HAL_PCD_EP_DB_Transmit+0x38c>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2250      	movs	r2, #80	@ 0x50
 800497c:	5a9b      	ldrh	r3, [r3, r2]
 800497e:	b29b      	uxth	r3, r3
 8004980:	001a      	movs	r2, r3
 8004982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004984:	189b      	adds	r3, r3, r2
 8004986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	00da      	lsls	r2, r3, #3
 800498e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004990:	18d3      	adds	r3, r2, r3
 8004992:	4a29      	ldr	r2, [pc, #164]	@ (8004a38 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004994:	4694      	mov	ip, r2
 8004996:	4463      	add	r3, ip
 8004998:	63bb      	str	r3, [r7, #56]	@ 0x38
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	059b      	lsls	r3, r3, #22
 80049a2:	0d9b      	lsrs	r3, r3, #22
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	238c      	movs	r3, #140	@ 0x8c
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d108      	bne.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x306>
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4a20      	ldr	r2, [pc, #128]	@ (8004a3c <HAL_PCD_EP_DB_Transmit+0x37c>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	e061      	b.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80049c6:	228c      	movs	r2, #140	@ 0x8c
 80049c8:	18bb      	adds	r3, r7, r2
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80049ce:	d817      	bhi.n	8004a00 <HAL_PCD_EP_DB_Transmit+0x340>
 80049d0:	18bb      	adds	r3, r7, r2
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d8:	18bb      	adds	r3, r7, r2
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2201      	movs	r2, #1
 80049de:	4013      	ands	r3, r2
 80049e0:	d002      	beq.n	80049e8 <HAL_PCD_EP_DB_Transmit+0x328>
 80049e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e4:	3301      	adds	r3, #1
 80049e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	029b      	lsls	r3, r3, #10
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	e044      	b.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004a00:	228c      	movs	r2, #140	@ 0x8c
 8004a02:	18bb      	adds	r3, r7, r2
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a0a:	18bb      	adds	r3, r7, r2
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	221f      	movs	r2, #31
 8004a10:	4013      	ands	r3, r2
 8004a12:	d102      	bne.n	8004a1a <HAL_PCD_EP_DB_Transmit+0x35a>
 8004a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a16:	3b01      	subs	r3, #1
 8004a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4a03      	ldr	r2, [pc, #12]	@ (8004a3c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	e028      	b.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004a38:	00000402 	.word	0x00000402
 8004a3c:	ffff8000 	.word	0xffff8000
 8004a40:	00000406 	.word	0x00000406
 8004a44:	ffff8f8f 	.word	0xffff8f8f
 8004a48:	ffffc080 	.word	0xffffc080
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d11a      	bne.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2250      	movs	r2, #80	@ 0x50
 8004a60:	5a9b      	ldrh	r3, [r3, r2]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	001a      	movs	r2, r3
 8004a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a68:	189b      	adds	r3, r3, r2
 8004a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	00da      	lsls	r2, r3, #3
 8004a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	4ad9      	ldr	r2, [pc, #868]	@ (8004ddc <HAL_PCD_EP_DB_Transmit+0x71c>)
 8004a78:	4694      	mov	ip, r2
 8004a7a:	4463      	add	r3, ip
 8004a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a7e:	238c      	movs	r3, #140	@ 0x8c
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a88:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6959      	ldr	r1, [r3, #20]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	891a      	ldrh	r2, [r3, #8]
 8004a96:	238c      	movs	r3, #140	@ 0x8c
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f004 faeb 	bl	8009078 <USB_WritePMA>
 8004aa2:	e1e9      	b.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2250      	movs	r2, #80	@ 0x50
 8004aaa:	5a9b      	ldrh	r3, [r3, r2]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	001a      	movs	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	18d2      	adds	r2, r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	18d3      	adds	r3, r2, r3
 8004abe:	4ac8      	ldr	r2, [pc, #800]	@ (8004de0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004ac0:	4694      	mov	ip, r2
 8004ac2:	4463      	add	r3, ip
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	2188      	movs	r1, #136	@ 0x88
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	0592      	lsls	r2, r2, #22
 8004acc:	0d92      	lsrs	r2, r2, #22
 8004ace:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d307      	bcc.n	8004aec <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	1ad2      	subs	r2, r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	619a      	str	r2, [r3, #24]
 8004aea:	e002      	b.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2200      	movs	r2, #0
 8004af0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d000      	beq.n	8004afc <HAL_PCD_EP_DB_Transmit+0x43c>
 8004afa:	e0bb      	b.n	8004c74 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d125      	bne.n	8004b50 <HAL_PCD_EP_DB_Transmit+0x490>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2250      	movs	r2, #80	@ 0x50
 8004b10:	5a9b      	ldrh	r3, [r3, r2]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	001a      	movs	r2, r3
 8004b16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b18:	189b      	adds	r3, r3, r2
 8004b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	00da      	lsls	r2, r3, #3
 8004b22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	4aad      	ldr	r2, [pc, #692]	@ (8004ddc <HAL_PCD_EP_DB_Transmit+0x71c>)
 8004b28:	4694      	mov	ip, r2
 8004b2a:	4463      	add	r3, ip
 8004b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	059b      	lsls	r3, r3, #22
 8004b36:	0d9b      	lsrs	r3, r3, #22
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b3c:	801a      	strh	r2, [r3, #0]
 8004b3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4aa7      	ldr	r2, [pc, #668]	@ (8004de4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	e01b      	b.n	8004b88 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d117      	bne.n	8004b88 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2250      	movs	r2, #80	@ 0x50
 8004b64:	5a9b      	ldrh	r3, [r3, r2]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	001a      	movs	r2, r3
 8004b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b6c:	189b      	adds	r3, r3, r2
 8004b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	00da      	lsls	r2, r3, #3
 8004b76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b78:	18d3      	adds	r3, r2, r3
 8004b7a:	4a98      	ldr	r2, [pc, #608]	@ (8004ddc <HAL_PCD_EP_DB_Transmit+0x71c>)
 8004b7c:	4694      	mov	ip, r2
 8004b7e:	4463      	add	r3, ip
 8004b80:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b84:	2200      	movs	r2, #0
 8004b86:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d12b      	bne.n	8004bee <HAL_PCD_EP_DB_Transmit+0x52e>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2250      	movs	r2, #80	@ 0x50
 8004ba2:	5a9b      	ldrh	r3, [r3, r2]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	00da      	lsls	r2, r3, #3
 8004bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bb6:	18d3      	adds	r3, r2, r3
 8004bb8:	4a89      	ldr	r2, [pc, #548]	@ (8004de0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004bba:	4694      	mov	ip, r2
 8004bbc:	4463      	add	r3, ip
 8004bbe:	2184      	movs	r1, #132	@ 0x84
 8004bc0:	187a      	adds	r2, r7, r1
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	187b      	adds	r3, r7, r1
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	059b      	lsls	r3, r3, #22
 8004bce:	0d9b      	lsrs	r3, r3, #22
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	187b      	adds	r3, r7, r1
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4a80      	ldr	r2, [pc, #512]	@ (8004de4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e018      	b.n	8004c20 <HAL_PCD_EP_DB_Transmit+0x560>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d114      	bne.n	8004c20 <HAL_PCD_EP_DB_Transmit+0x560>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2250      	movs	r2, #80	@ 0x50
 8004bfc:	5a9b      	ldrh	r3, [r3, r2]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	001a      	movs	r2, r3
 8004c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	00da      	lsls	r2, r3, #3
 8004c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	4a73      	ldr	r2, [pc, #460]	@ (8004de0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004c14:	4694      	mov	ip, r2
 8004c16:	4463      	add	r3, ip
 8004c18:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	0011      	movs	r1, r2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f006 fa49 	bl	800b0c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c2e:	1dbb      	adds	r3, r7, #6
 8004c30:	881a      	ldrh	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	01db      	lsls	r3, r3, #7
 8004c36:	4013      	ands	r3, r2
 8004c38:	d000      	beq.n	8004c3c <HAL_PCD_EP_DB_Transmit+0x57c>
 8004c3a:	e11d      	b.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	001a      	movs	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	18d3      	adds	r3, r2, r3
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	2082      	movs	r0, #130	@ 0x82
 8004c50:	183b      	adds	r3, r7, r0
 8004c52:	4965      	ldr	r1, [pc, #404]	@ (8004de8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8004c54:	400a      	ands	r2, r1
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	001a      	movs	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	18d3      	adds	r3, r2, r3
 8004c66:	183a      	adds	r2, r7, r0
 8004c68:	8812      	ldrh	r2, [r2, #0]
 8004c6a:	4960      	ldr	r1, [pc, #384]	@ (8004dec <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	b292      	uxth	r2, r2
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	e101      	b.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c74:	1dbb      	adds	r3, r7, #6
 8004c76:	881a      	ldrh	r2, [r3, #0]
 8004c78:	2380      	movs	r3, #128	@ 0x80
 8004c7a:	01db      	lsls	r3, r3, #7
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d11a      	bne.n	8004cb6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	001a      	movs	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	18d3      	adds	r3, r2, r3
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	204e      	movs	r0, #78	@ 0x4e
 8004c94:	183b      	adds	r3, r7, r0
 8004c96:	4954      	ldr	r1, [pc, #336]	@ (8004de8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8004c98:	400a      	ands	r2, r1
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	001a      	movs	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	18d3      	adds	r3, r2, r3
 8004caa:	183a      	adds	r2, r7, r0
 8004cac:	8812      	ldrh	r2, [r2, #0]
 8004cae:	494f      	ldr	r1, [pc, #316]	@ (8004dec <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	b292      	uxth	r2, r2
 8004cb4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2224      	movs	r2, #36	@ 0x24
 8004cba:	5c9b      	ldrb	r3, [r3, r2]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d000      	beq.n	8004cc2 <HAL_PCD_EP_DB_Transmit+0x602>
 8004cc0:	e0da      	b.n	8004e78 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	2188      	movs	r1, #136	@ 0x88
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	18d2      	adds	r2, r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	69da      	ldr	r2, [r3, #28]
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	18d2      	adds	r2, r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6a1a      	ldr	r2, [r3, #32]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d30c      	bcc.n	8004d06 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	218c      	movs	r1, #140	@ 0x8c
 8004cf2:	187a      	adds	r2, r7, r1
 8004cf4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	187b      	adds	r3, r7, r1
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	621a      	str	r2, [r3, #32]
 8004d04:	e01a      	b.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8004d0e:	2388      	movs	r3, #136	@ 0x88
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	228c      	movs	r2, #140	@ 0x8c
 8004d16:	18ba      	adds	r2, r7, r2
 8004d18:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2224      	movs	r2, #36	@ 0x24
 8004d1e:	2100      	movs	r1, #0
 8004d20:	5499      	strb	r1, [r3, r2]
 8004d22:	e00b      	b.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	228c      	movs	r2, #140	@ 0x8c
 8004d2a:	18ba      	adds	r2, r7, r2
 8004d2c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2200      	movs	r2, #0
 8004d32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2224      	movs	r2, #36	@ 0x24
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d000      	beq.n	8004d4c <HAL_PCD_EP_DB_Transmit+0x68c>
 8004d4a:	e06d      	b.n	8004e28 <HAL_PCD_EP_DB_Transmit+0x768>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2250      	movs	r2, #80	@ 0x50
 8004d58:	5a9b      	ldrh	r3, [r3, r2]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d60:	189b      	adds	r3, r3, r2
 8004d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	00da      	lsls	r2, r3, #3
 8004d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d6c:	18d3      	adds	r3, r2, r3
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8004de0 <HAL_PCD_EP_DB_Transmit+0x720>)
 8004d70:	4694      	mov	ip, r2
 8004d72:	4463      	add	r3, ip
 8004d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	059b      	lsls	r3, r3, #22
 8004d7e:	0d9b      	lsrs	r3, r3, #22
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	238c      	movs	r3, #140	@ 0x8c
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d108      	bne.n	8004da2 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8004d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	4a13      	ldr	r2, [pc, #76]	@ (8004de4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	e05e      	b.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004da2:	228c      	movs	r2, #140	@ 0x8c
 8004da4:	18bb      	adds	r3, r7, r2
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004daa:	d821      	bhi.n	8004df0 <HAL_PCD_EP_DB_Transmit+0x730>
 8004dac:	18bb      	adds	r3, r7, r2
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db4:	18bb      	adds	r3, r7, r2
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2201      	movs	r2, #1
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d002      	beq.n	8004dc4 <HAL_PCD_EP_DB_Transmit+0x704>
 8004dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	e041      	b.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004ddc:	00000402 	.word	0x00000402
 8004de0:	00000406 	.word	0x00000406
 8004de4:	ffff8000 	.word	0xffff8000
 8004de8:	ffff8f8f 	.word	0xffff8f8f
 8004dec:	ffffc080 	.word	0xffffc080
 8004df0:	228c      	movs	r2, #140	@ 0x8c
 8004df2:	18bb      	adds	r3, r7, r2
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfa:	18bb      	adds	r3, r7, r2
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	221f      	movs	r2, #31
 8004e00:	4013      	ands	r3, r2
 8004e02:	d102      	bne.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x74a>
 8004e04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e06:	3b01      	subs	r3, #1
 8004e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	029b      	lsls	r3, r3, #10
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed0 <HAL_PCD_EP_DB_Transmit+0x810>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	e01b      	b.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d117      	bne.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2250      	movs	r2, #80	@ 0x50
 8004e36:	5a9b      	ldrh	r3, [r3, r2]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	00da      	lsls	r2, r3, #3
 8004e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4a:	18d3      	adds	r3, r2, r3
 8004e4c:	4a21      	ldr	r2, [pc, #132]	@ (8004ed4 <HAL_PCD_EP_DB_Transmit+0x814>)
 8004e4e:	4694      	mov	ip, r2
 8004e50:	4463      	add	r3, ip
 8004e52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e54:	238c      	movs	r3, #140	@ 0x8c
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e5e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	6959      	ldr	r1, [r3, #20]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	895a      	ldrh	r2, [r3, #10]
 8004e6c:	238c      	movs	r3, #140	@ 0x8c
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f004 f900 	bl	8009078 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	18d3      	adds	r3, r2, r3
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	2014      	movs	r0, #20
 8004e8c:	183b      	adds	r3, r7, r0
 8004e8e:	4912      	ldr	r1, [pc, #72]	@ (8004ed8 <HAL_PCD_EP_DB_Transmit+0x818>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	183b      	adds	r3, r7, r0
 8004e96:	183a      	adds	r2, r7, r0
 8004e98:	8812      	ldrh	r2, [r2, #0]
 8004e9a:	2110      	movs	r1, #16
 8004e9c:	404a      	eors	r2, r1
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	183b      	adds	r3, r7, r0
 8004ea2:	183a      	adds	r2, r7, r0
 8004ea4:	8812      	ldrh	r2, [r2, #0]
 8004ea6:	2120      	movs	r1, #32
 8004ea8:	404a      	eors	r2, r1
 8004eaa:	801a      	strh	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	183a      	adds	r2, r7, r0
 8004ebc:	8812      	ldrh	r2, [r2, #0]
 8004ebe:	4907      	ldr	r1, [pc, #28]	@ (8004edc <HAL_PCD_EP_DB_Transmit+0x81c>)
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	0018      	movs	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b024      	add	sp, #144	@ 0x90
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	ffff8000 	.word	0xffff8000
 8004ed4:	00000406 	.word	0x00000406
 8004ed8:	ffff8fbf 	.word	0xffff8fbf
 8004edc:	ffff8080 	.word	0xffff8080

08004ee0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	0008      	movs	r0, r1
 8004eea:	0011      	movs	r1, r2
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	240a      	movs	r4, #10
 8004ef0:	193b      	adds	r3, r7, r4
 8004ef2:	1c02      	adds	r2, r0, #0
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	1c0a      	adds	r2, r1, #0
 8004efc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004efe:	0021      	movs	r1, r4
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	2280      	movs	r2, #128	@ 0x80
 8004f06:	4013      	ands	r3, r2
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	2207      	movs	r2, #7
 8004f14:	401a      	ands	r2, r3
 8004f16:	0013      	movs	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	189b      	adds	r3, r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	3310      	adds	r3, #16
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	18d3      	adds	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e00b      	b.n	8004f40 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f28:	230a      	movs	r3, #10
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	881a      	ldrh	r2, [r3, #0]
 8004f2e:	0013      	movs	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	3351      	adds	r3, #81	@ 0x51
 8004f38:	33ff      	adds	r3, #255	@ 0xff
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	18d3      	adds	r3, r2, r3
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f40:	2308      	movs	r3, #8
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d107      	bne.n	8004f5a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	80da      	strh	r2, [r3, #6]
 8004f58:	e00b      	b.n	8004f72 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b007      	add	sp, #28
 8004f7a:	bd90      	pop	{r4, r7, pc}

08004f7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	23b4      	movs	r3, #180	@ 0xb4
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	2101      	movs	r1, #1
 8004f92:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	23b2      	movs	r3, #178	@ 0xb2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2254      	movs	r2, #84	@ 0x54
 8004fa2:	5a9b      	ldrh	r3, [r3, r2]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b299      	uxth	r1, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2254      	movs	r2, #84	@ 0x54
 8004fb0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2254      	movs	r2, #84	@ 0x54
 8004fb6:	5a9b      	ldrh	r3, [r3, r2]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2202      	movs	r2, #2
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	b299      	uxth	r1, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2254      	movs	r2, #84	@ 0x54
 8004fc4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b004      	add	sp, #16
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	000a      	movs	r2, r1
 8004fda:	1cfb      	adds	r3, r7, #3
 8004fdc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f000 fd06 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d025      	beq.n	8005050 <HAL_RCC_OscConfig+0x68>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2201      	movs	r2, #1
 800500a:	4013      	ands	r3, r2
 800500c:	d120      	bne.n	8005050 <HAL_RCC_OscConfig+0x68>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2202      	movs	r2, #2
 8005014:	4013      	ands	r3, r2
 8005016:	d11b      	bne.n	8005050 <HAL_RCC_OscConfig+0x68>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2208      	movs	r2, #8
 800501e:	4013      	ands	r3, r2
 8005020:	d116      	bne.n	8005050 <HAL_RCC_OscConfig+0x68>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2204      	movs	r2, #4
 8005028:	4013      	ands	r3, r2
 800502a:	d111      	bne.n	8005050 <HAL_RCC_OscConfig+0x68>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2210      	movs	r2, #16
 8005032:	4013      	ands	r3, r2
 8005034:	d10c      	bne.n	8005050 <HAL_RCC_OscConfig+0x68>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2220      	movs	r2, #32
 800503c:	4013      	ands	r3, r2
 800503e:	d107      	bne.n	8005050 <HAL_RCC_OscConfig+0x68>
 8005040:	2338      	movs	r3, #56	@ 0x38
 8005042:	33ff      	adds	r3, #255	@ 0xff
 8005044:	001a      	movs	r2, r3
 8005046:	4bc4      	ldr	r3, [pc, #784]	@ (8005358 <HAL_RCC_OscConfig+0x370>)
 8005048:	0011      	movs	r1, r2
 800504a:	0018      	movs	r0, r3
 800504c:	f7fb fd7c 	bl	8000b48 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2201      	movs	r2, #1
 8005056:	4013      	ands	r3, r2
 8005058:	d100      	bne.n	800505c <HAL_RCC_OscConfig+0x74>
 800505a:	e0a4      	b.n	80051a6 <HAL_RCC_OscConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00f      	beq.n	8005084 <HAL_RCC_OscConfig+0x9c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d00b      	beq.n	8005084 <HAL_RCC_OscConfig+0x9c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b05      	cmp	r3, #5
 8005072:	d007      	beq.n	8005084 <HAL_RCC_OscConfig+0x9c>
 8005074:	233e      	movs	r3, #62	@ 0x3e
 8005076:	33ff      	adds	r3, #255	@ 0xff
 8005078:	001a      	movs	r2, r3
 800507a:	4bb7      	ldr	r3, [pc, #732]	@ (8005358 <HAL_RCC_OscConfig+0x370>)
 800507c:	0011      	movs	r1, r2
 800507e:	0018      	movs	r0, r3
 8005080:	f7fb fd62 	bl	8000b48 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005084:	4bb5      	ldr	r3, [pc, #724]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	220c      	movs	r2, #12
 800508a:	4013      	ands	r3, r2
 800508c:	2b04      	cmp	r3, #4
 800508e:	d00e      	beq.n	80050ae <HAL_RCC_OscConfig+0xc6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005090:	4bb2      	ldr	r3, [pc, #712]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	220c      	movs	r2, #12
 8005096:	4013      	ands	r3, r2
 8005098:	2b08      	cmp	r3, #8
 800509a:	d117      	bne.n	80050cc <HAL_RCC_OscConfig+0xe4>
 800509c:	4baf      	ldr	r3, [pc, #700]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	23c0      	movs	r3, #192	@ 0xc0
 80050a2:	025b      	lsls	r3, r3, #9
 80050a4:	401a      	ands	r2, r3
 80050a6:	2380      	movs	r3, #128	@ 0x80
 80050a8:	025b      	lsls	r3, r3, #9
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d10e      	bne.n	80050cc <HAL_RCC_OscConfig+0xe4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ae:	4bab      	ldr	r3, [pc, #684]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	2380      	movs	r3, #128	@ 0x80
 80050b4:	029b      	lsls	r3, r3, #10
 80050b6:	4013      	ands	r3, r2
 80050b8:	d100      	bne.n	80050bc <HAL_RCC_OscConfig+0xd4>
 80050ba:	e073      	b.n	80051a4 <HAL_RCC_OscConfig+0x1bc>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d000      	beq.n	80050c6 <HAL_RCC_OscConfig+0xde>
 80050c4:	e06e      	b.n	80051a4 <HAL_RCC_OscConfig+0x1bc>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f000 fc9e 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_OscConfig+0xfc>
 80050d4:	4ba1      	ldr	r3, [pc, #644]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4ba0      	ldr	r3, [pc, #640]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80050da:	2180      	movs	r1, #128	@ 0x80
 80050dc:	0249      	lsls	r1, r1, #9
 80050de:	430a      	orrs	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e02f      	b.n	8005144 <HAL_RCC_OscConfig+0x15c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_OscConfig+0x11e>
 80050ec:	4b9b      	ldr	r3, [pc, #620]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b9a      	ldr	r3, [pc, #616]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80050f2:	499b      	ldr	r1, [pc, #620]	@ (8005360 <HAL_RCC_OscConfig+0x378>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	4b98      	ldr	r3, [pc, #608]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b97      	ldr	r3, [pc, #604]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80050fe:	4999      	ldr	r1, [pc, #612]	@ (8005364 <HAL_RCC_OscConfig+0x37c>)
 8005100:	400a      	ands	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e01e      	b.n	8005144 <HAL_RCC_OscConfig+0x15c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d10e      	bne.n	800512c <HAL_RCC_OscConfig+0x144>
 800510e:	4b93      	ldr	r3, [pc, #588]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b92      	ldr	r3, [pc, #584]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005114:	2180      	movs	r1, #128	@ 0x80
 8005116:	02c9      	lsls	r1, r1, #11
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	4b8f      	ldr	r3, [pc, #572]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b8e      	ldr	r3, [pc, #568]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005122:	2180      	movs	r1, #128	@ 0x80
 8005124:	0249      	lsls	r1, r1, #9
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0x15c>
 800512c:	4b8b      	ldr	r3, [pc, #556]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b8a      	ldr	r3, [pc, #552]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005132:	498b      	ldr	r1, [pc, #556]	@ (8005360 <HAL_RCC_OscConfig+0x378>)
 8005134:	400a      	ands	r2, r1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	4b88      	ldr	r3, [pc, #544]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b87      	ldr	r3, [pc, #540]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800513e:	4989      	ldr	r1, [pc, #548]	@ (8005364 <HAL_RCC_OscConfig+0x37c>)
 8005140:	400a      	ands	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCC_OscConfig+0x190>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fc f880 	bl	8001250 <HAL_GetTick>
 8005150:	0003      	movs	r3, r0
 8005152:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005154:	e009      	b.n	800516a <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005156:	f7fc f87b 	bl	8001250 <HAL_GetTick>
 800515a:	0002      	movs	r2, r0
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b64      	cmp	r3, #100	@ 0x64
 8005162:	d902      	bls.n	800516a <HAL_RCC_OscConfig+0x182>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	f000 fc4f 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516a:	4b7c      	ldr	r3, [pc, #496]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	2380      	movs	r3, #128	@ 0x80
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	4013      	ands	r3, r2
 8005174:	d0ef      	beq.n	8005156 <HAL_RCC_OscConfig+0x16e>
 8005176:	e016      	b.n	80051a6 <HAL_RCC_OscConfig+0x1be>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005178:	f7fc f86a 	bl	8001250 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005180:	e009      	b.n	8005196 <HAL_RCC_OscConfig+0x1ae>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005182:	f7fc f865 	bl	8001250 <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b64      	cmp	r3, #100	@ 0x64
 800518e:	d902      	bls.n	8005196 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	f000 fc39 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	4b71      	ldr	r3, [pc, #452]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	029b      	lsls	r3, r3, #10
 800519e:	4013      	ands	r3, r2
 80051a0:	d1ef      	bne.n	8005182 <HAL_RCC_OscConfig+0x19a>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x1be>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2202      	movs	r2, #2
 80051ac:	4013      	ands	r3, r2
 80051ae:	d100      	bne.n	80051b2 <HAL_RCC_OscConfig+0x1ca>
 80051b0:	e08a      	b.n	80052c8 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00b      	beq.n	80051d2 <HAL_RCC_OscConfig+0x1ea>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d007      	beq.n	80051d2 <HAL_RCC_OscConfig+0x1ea>
 80051c2:	2372      	movs	r3, #114	@ 0x72
 80051c4:	33ff      	adds	r3, #255	@ 0xff
 80051c6:	001a      	movs	r2, r3
 80051c8:	4b63      	ldr	r3, [pc, #396]	@ (8005358 <HAL_RCC_OscConfig+0x370>)
 80051ca:	0011      	movs	r1, r2
 80051cc:	0018      	movs	r0, r3
 80051ce:	f7fb fcbb 	bl	8000b48 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b1f      	cmp	r3, #31
 80051d8:	d906      	bls.n	80051e8 <HAL_RCC_OscConfig+0x200>
 80051da:	23b9      	movs	r3, #185	@ 0xb9
 80051dc:	005a      	lsls	r2, r3, #1
 80051de:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <HAL_RCC_OscConfig+0x370>)
 80051e0:	0011      	movs	r1, r2
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7fb fcb0 	bl	8000b48 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80051e8:	4b5c      	ldr	r3, [pc, #368]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	220c      	movs	r2, #12
 80051ee:	4013      	ands	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_RCC_OscConfig+0x228>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80051f2:	4b5a      	ldr	r3, [pc, #360]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	220c      	movs	r2, #12
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d120      	bne.n	8005240 <HAL_RCC_OscConfig+0x258>
 80051fe:	4b57      	ldr	r3, [pc, #348]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	23c0      	movs	r3, #192	@ 0xc0
 8005204:	025b      	lsls	r3, r3, #9
 8005206:	401a      	ands	r2, r3
 8005208:	2380      	movs	r3, #128	@ 0x80
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	429a      	cmp	r2, r3
 800520e:	d117      	bne.n	8005240 <HAL_RCC_OscConfig+0x258>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005210:	4b52      	ldr	r3, [pc, #328]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2202      	movs	r2, #2
 8005216:	4013      	ands	r3, r2
 8005218:	d006      	beq.n	8005228 <HAL_RCC_OscConfig+0x240>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d002      	beq.n	8005228 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f000 fbf0 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005228:	4b4c      	ldr	r3, [pc, #304]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	22f8      	movs	r2, #248	@ 0xf8
 800522e:	4393      	bics	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	00da      	lsls	r2, r3, #3
 8005238:	4b48      	ldr	r3, [pc, #288]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800523e:	e043      	b.n	80052c8 <HAL_RCC_OscConfig+0x2e0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d025      	beq.n	8005294 <HAL_RCC_OscConfig+0x2ac>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005248:	4b44      	ldr	r3, [pc, #272]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b43      	ldr	r3, [pc, #268]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800524e:	2101      	movs	r1, #1
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7fb fffc 	bl	8001250 <HAL_GetTick>
 8005258:	0003      	movs	r3, r0
 800525a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525c:	e009      	b.n	8005272 <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800525e:	f7fb fff7 	bl	8001250 <HAL_GetTick>
 8005262:	0002      	movs	r2, r0
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d902      	bls.n	8005272 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	f000 fbcb 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005272:	4b3a      	ldr	r3, [pc, #232]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2202      	movs	r2, #2
 8005278:	4013      	ands	r3, r2
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x276>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527c:	4b37      	ldr	r3, [pc, #220]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	22f8      	movs	r2, #248	@ 0xf8
 8005282:	4393      	bics	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00da      	lsls	r2, r3, #3
 800528c:	4b33      	ldr	r3, [pc, #204]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e019      	b.n	80052c8 <HAL_RCC_OscConfig+0x2e0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005294:	4b31      	ldr	r3, [pc, #196]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b30      	ldr	r3, [pc, #192]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 800529a:	2101      	movs	r1, #1
 800529c:	438a      	bics	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7fb ffd6 	bl	8001250 <HAL_GetTick>
 80052a4:	0003      	movs	r3, r0
 80052a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a8:	e009      	b.n	80052be <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052aa:	f7fb ffd1 	bl	8001250 <HAL_GetTick>
 80052ae:	0002      	movs	r2, r0
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d902      	bls.n	80052be <HAL_RCC_OscConfig+0x2d6>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	f000 fba5 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052be:	4b27      	ldr	r3, [pc, #156]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2202      	movs	r2, #2
 80052c4:	4013      	ands	r3, r2
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2208      	movs	r2, #8
 80052ce:	4013      	ands	r3, r2
 80052d0:	d04f      	beq.n	8005372 <HAL_RCC_OscConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_RCC_OscConfig+0x308>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d006      	beq.n	80052f0 <HAL_RCC_OscConfig+0x308>
 80052e2:	23d9      	movs	r3, #217	@ 0xd9
 80052e4:	005a      	lsls	r2, r3, #1
 80052e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005358 <HAL_RCC_OscConfig+0x370>)
 80052e8:	0011      	movs	r1, r2
 80052ea:	0018      	movs	r0, r3
 80052ec:	f7fb fc2c 	bl	8000b48 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01a      	beq.n	800532e <HAL_RCC_OscConfig+0x346>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052f8:	4b18      	ldr	r3, [pc, #96]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80052fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052fc:	4b17      	ldr	r3, [pc, #92]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 80052fe:	2101      	movs	r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005304:	f7fb ffa4 	bl	8001250 <HAL_GetTick>
 8005308:	0003      	movs	r3, r0
 800530a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530c:	e009      	b.n	8005322 <HAL_RCC_OscConfig+0x33a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800530e:	f7fb ff9f 	bl	8001250 <HAL_GetTick>
 8005312:	0002      	movs	r2, r0
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d902      	bls.n	8005322 <HAL_RCC_OscConfig+0x33a>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	f000 fb73 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005322:	4b0e      	ldr	r3, [pc, #56]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	2202      	movs	r2, #2
 8005328:	4013      	ands	r3, r2
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x326>
 800532c:	e021      	b.n	8005372 <HAL_RCC_OscConfig+0x38a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800532e:	4b0b      	ldr	r3, [pc, #44]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <HAL_RCC_OscConfig+0x374>)
 8005334:	2101      	movs	r1, #1
 8005336:	438a      	bics	r2, r1
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533a:	f7fb ff89 	bl	8001250 <HAL_GetTick>
 800533e:	0003      	movs	r3, r0
 8005340:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005342:	e011      	b.n	8005368 <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005344:	f7fb ff84 	bl	8001250 <HAL_GetTick>
 8005348:	0002      	movs	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d90a      	bls.n	8005368 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	f000 fb58 	bl	8005a08 <HAL_RCC_OscConfig+0xa20>
 8005358:	0800c1a4 	.word	0x0800c1a4
 800535c:	40021000 	.word	0x40021000
 8005360:	fffeffff 	.word	0xfffeffff
 8005364:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005368:	4bc3      	ldr	r3, [pc, #780]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	2202      	movs	r2, #2
 800536e:	4013      	ands	r3, r2
 8005370:	d1e8      	bne.n	8005344 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2204      	movs	r2, #4
 8005378:	4013      	ands	r3, r2
 800537a:	d100      	bne.n	800537e <HAL_RCC_OscConfig+0x396>
 800537c:	e0c0      	b.n	8005500 <HAL_RCC_OscConfig+0x518>
  {
    FlagStatus       pwrclkchanged = RESET;
 800537e:	231f      	movs	r3, #31
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00e      	beq.n	80053ac <HAL_RCC_OscConfig+0x3c4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d00a      	beq.n	80053ac <HAL_RCC_OscConfig+0x3c4>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b05      	cmp	r3, #5
 800539c:	d006      	beq.n	80053ac <HAL_RCC_OscConfig+0x3c4>
 800539e:	23ef      	movs	r3, #239	@ 0xef
 80053a0:	005a      	lsls	r2, r3, #1
 80053a2:	4bb6      	ldr	r3, [pc, #728]	@ (800567c <HAL_RCC_OscConfig+0x694>)
 80053a4:	0011      	movs	r1, r2
 80053a6:	0018      	movs	r0, r3
 80053a8:	f7fb fbce 	bl	8000b48 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ac:	4bb2      	ldr	r3, [pc, #712]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	055b      	lsls	r3, r3, #21
 80053b4:	4013      	ands	r3, r2
 80053b6:	d111      	bne.n	80053dc <HAL_RCC_OscConfig+0x3f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053b8:	4baf      	ldr	r3, [pc, #700]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	4bae      	ldr	r3, [pc, #696]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80053be:	2180      	movs	r1, #128	@ 0x80
 80053c0:	0549      	lsls	r1, r1, #21
 80053c2:	430a      	orrs	r2, r1
 80053c4:	61da      	str	r2, [r3, #28]
 80053c6:	4bac      	ldr	r3, [pc, #688]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	2380      	movs	r3, #128	@ 0x80
 80053cc:	055b      	lsls	r3, r3, #21
 80053ce:	4013      	ands	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053d4:	231f      	movs	r3, #31
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053dc:	4ba8      	ldr	r3, [pc, #672]	@ (8005680 <HAL_RCC_OscConfig+0x698>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	4013      	ands	r3, r2
 80053e6:	d11a      	bne.n	800541e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053e8:	4ba5      	ldr	r3, [pc, #660]	@ (8005680 <HAL_RCC_OscConfig+0x698>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4ba4      	ldr	r3, [pc, #656]	@ (8005680 <HAL_RCC_OscConfig+0x698>)
 80053ee:	2180      	movs	r1, #128	@ 0x80
 80053f0:	0049      	lsls	r1, r1, #1
 80053f2:	430a      	orrs	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f6:	f7fb ff2b 	bl	8001250 <HAL_GetTick>
 80053fa:	0003      	movs	r3, r0
 80053fc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005400:	f7fb ff26 	bl	8001250 <HAL_GetTick>
 8005404:	0002      	movs	r2, r0
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	@ 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e2fa      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005412:	4b9b      	ldr	r3, [pc, #620]	@ (8005680 <HAL_RCC_OscConfig+0x698>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4013      	ands	r3, r2
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0x418>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d106      	bne.n	8005434 <HAL_RCC_OscConfig+0x44c>
 8005426:	4b94      	ldr	r3, [pc, #592]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	4b93      	ldr	r3, [pc, #588]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800542c:	2101      	movs	r1, #1
 800542e:	430a      	orrs	r2, r1
 8005430:	621a      	str	r2, [r3, #32]
 8005432:	e02d      	b.n	8005490 <HAL_RCC_OscConfig+0x4a8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10c      	bne.n	8005456 <HAL_RCC_OscConfig+0x46e>
 800543c:	4b8e      	ldr	r3, [pc, #568]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800543e:	6a1a      	ldr	r2, [r3, #32]
 8005440:	4b8d      	ldr	r3, [pc, #564]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005442:	2101      	movs	r1, #1
 8005444:	438a      	bics	r2, r1
 8005446:	621a      	str	r2, [r3, #32]
 8005448:	4b8b      	ldr	r3, [pc, #556]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	4b8a      	ldr	r3, [pc, #552]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800544e:	2104      	movs	r1, #4
 8005450:	438a      	bics	r2, r1
 8005452:	621a      	str	r2, [r3, #32]
 8005454:	e01c      	b.n	8005490 <HAL_RCC_OscConfig+0x4a8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b05      	cmp	r3, #5
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0x490>
 800545e:	4b86      	ldr	r3, [pc, #536]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	4b85      	ldr	r3, [pc, #532]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005464:	2104      	movs	r1, #4
 8005466:	430a      	orrs	r2, r1
 8005468:	621a      	str	r2, [r3, #32]
 800546a:	4b83      	ldr	r3, [pc, #524]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	4b82      	ldr	r3, [pc, #520]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005470:	2101      	movs	r1, #1
 8005472:	430a      	orrs	r2, r1
 8005474:	621a      	str	r2, [r3, #32]
 8005476:	e00b      	b.n	8005490 <HAL_RCC_OscConfig+0x4a8>
 8005478:	4b7f      	ldr	r3, [pc, #508]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800547a:	6a1a      	ldr	r2, [r3, #32]
 800547c:	4b7e      	ldr	r3, [pc, #504]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800547e:	2101      	movs	r1, #1
 8005480:	438a      	bics	r2, r1
 8005482:	621a      	str	r2, [r3, #32]
 8005484:	4b7c      	ldr	r3, [pc, #496]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	4b7b      	ldr	r3, [pc, #492]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800548a:	2104      	movs	r1, #4
 800548c:	438a      	bics	r2, r1
 800548e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d014      	beq.n	80054c2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005498:	f7fb feda 	bl	8001250 <HAL_GetTick>
 800549c:	0003      	movs	r3, r0
 800549e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	e009      	b.n	80054b6 <HAL_RCC_OscConfig+0x4ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fb fed5 	bl	8001250 <HAL_GetTick>
 80054a6:	0002      	movs	r2, r0
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	4a75      	ldr	r2, [pc, #468]	@ (8005684 <HAL_RCC_OscConfig+0x69c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e2a8      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b6:	4b70      	ldr	r3, [pc, #448]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	2202      	movs	r2, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x4ba>
 80054c0:	e013      	b.n	80054ea <HAL_RCC_OscConfig+0x502>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c2:	f7fb fec5 	bl	8001250 <HAL_GetTick>
 80054c6:	0003      	movs	r3, r0
 80054c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ca:	e009      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054cc:	f7fb fec0 	bl	8001250 <HAL_GetTick>
 80054d0:	0002      	movs	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	4a6b      	ldr	r2, [pc, #428]	@ (8005684 <HAL_RCC_OscConfig+0x69c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e293      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e0:	4b65      	ldr	r3, [pc, #404]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	2202      	movs	r2, #2
 80054e6:	4013      	ands	r3, r2
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0x4e4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054ea:	231f      	movs	r3, #31
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d105      	bne.n	8005500 <HAL_RCC_OscConfig+0x518>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f4:	4b60      	ldr	r3, [pc, #384]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80054fa:	4963      	ldr	r1, [pc, #396]	@ (8005688 <HAL_RCC_OscConfig+0x6a0>)
 80054fc:	400a      	ands	r2, r1
 80054fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2210      	movs	r2, #16
 8005506:	4013      	ands	r3, r2
 8005508:	d100      	bne.n	800550c <HAL_RCC_OscConfig+0x524>
 800550a:	e080      	b.n	800560e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00e      	beq.n	8005532 <HAL_RCC_OscConfig+0x54a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d00a      	beq.n	8005532 <HAL_RCC_OscConfig+0x54a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	3305      	adds	r3, #5
 8005522:	d006      	beq.n	8005532 <HAL_RCC_OscConfig+0x54a>
 8005524:	2389      	movs	r3, #137	@ 0x89
 8005526:	009a      	lsls	r2, r3, #2
 8005528:	4b54      	ldr	r3, [pc, #336]	@ (800567c <HAL_RCC_OscConfig+0x694>)
 800552a:	0011      	movs	r1, r2
 800552c:	0018      	movs	r0, r3
 800552e:	f7fb fb0b 	bl	8000b48 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b1f      	cmp	r3, #31
 8005538:	d905      	bls.n	8005546 <HAL_RCC_OscConfig+0x55e>
 800553a:	4a54      	ldr	r2, [pc, #336]	@ (800568c <HAL_RCC_OscConfig+0x6a4>)
 800553c:	4b4f      	ldr	r3, [pc, #316]	@ (800567c <HAL_RCC_OscConfig+0x694>)
 800553e:	0011      	movs	r1, r2
 8005540:	0018      	movs	r0, r3
 8005542:	f7fb fb01 	bl	8000b48 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d12a      	bne.n	80055a4 <HAL_RCC_OscConfig+0x5bc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800554e:	4b4a      	ldr	r3, [pc, #296]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005550:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005552:	4b49      	ldr	r3, [pc, #292]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005554:	2104      	movs	r1, #4
 8005556:	430a      	orrs	r2, r1
 8005558:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800555a:	4b47      	ldr	r3, [pc, #284]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800555c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800555e:	4b46      	ldr	r3, [pc, #280]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005560:	2101      	movs	r1, #1
 8005562:	430a      	orrs	r2, r1
 8005564:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005566:	f7fb fe73 	bl	8001250 <HAL_GetTick>
 800556a:	0003      	movs	r3, r0
 800556c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x59a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005570:	f7fb fe6e 	bl	8001250 <HAL_GetTick>
 8005574:	0002      	movs	r2, r0
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x59a>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e242      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005582:	4b3d      	ldr	r3, [pc, #244]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005586:	2202      	movs	r2, #2
 8005588:	4013      	ands	r3, r2
 800558a:	d0f1      	beq.n	8005570 <HAL_RCC_OscConfig+0x588>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800558c:	4b3a      	ldr	r3, [pc, #232]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800558e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005590:	22f8      	movs	r2, #248	@ 0xf8
 8005592:	4393      	bics	r3, r2
 8005594:	0019      	movs	r1, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	00da      	lsls	r2, r3, #3
 800559c:	4b36      	ldr	r3, [pc, #216]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 800559e:	430a      	orrs	r2, r1
 80055a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80055a2:	e034      	b.n	800560e <HAL_RCC_OscConfig+0x626>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	3305      	adds	r3, #5
 80055aa:	d111      	bne.n	80055d0 <HAL_RCC_OscConfig+0x5e8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80055ac:	4b32      	ldr	r3, [pc, #200]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80055ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055b0:	4b31      	ldr	r3, [pc, #196]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80055b2:	2104      	movs	r1, #4
 80055b4:	438a      	bics	r2, r1
 80055b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80055b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80055ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055bc:	22f8      	movs	r2, #248	@ 0xf8
 80055be:	4393      	bics	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	00da      	lsls	r2, r3, #3
 80055c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80055ca:	430a      	orrs	r2, r1
 80055cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80055ce:	e01e      	b.n	800560e <HAL_RCC_OscConfig+0x626>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80055d0:	4b29      	ldr	r3, [pc, #164]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80055d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d4:	4b28      	ldr	r3, [pc, #160]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80055d6:	2104      	movs	r1, #4
 80055d8:	430a      	orrs	r2, r1
 80055da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80055dc:	4b26      	ldr	r3, [pc, #152]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80055de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055e0:	4b25      	ldr	r3, [pc, #148]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 80055e2:	2101      	movs	r1, #1
 80055e4:	438a      	bics	r2, r1
 80055e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e8:	f7fb fe32 	bl	8001250 <HAL_GetTick>
 80055ec:	0003      	movs	r3, r0
 80055ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x61c>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80055f2:	f7fb fe2d 	bl	8001250 <HAL_GetTick>
 80055f6:	0002      	movs	r2, r0
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e201      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005604:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005608:	2202      	movs	r2, #2
 800560a:	4013      	ands	r3, r2
 800560c:	d1f1      	bne.n	80055f2 <HAL_RCC_OscConfig+0x60a>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2220      	movs	r2, #32
 8005614:	4013      	ands	r3, r2
 8005616:	d100      	bne.n	800561a <HAL_RCC_OscConfig+0x632>
 8005618:	e078      	b.n	800570c <HAL_RCC_OscConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <HAL_RCC_OscConfig+0x64e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d005      	beq.n	8005636 <HAL_RCC_OscConfig+0x64e>
 800562a:	4a19      	ldr	r2, [pc, #100]	@ (8005690 <HAL_RCC_OscConfig+0x6a8>)
 800562c:	4b13      	ldr	r3, [pc, #76]	@ (800567c <HAL_RCC_OscConfig+0x694>)
 800562e:	0011      	movs	r1, r2
 8005630:	0018      	movs	r0, r3
 8005632:	f7fb fa89 	bl	8000b48 <assert_failed>

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005636:	4b10      	ldr	r3, [pc, #64]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	220c      	movs	r2, #12
 800563c:	4013      	ands	r3, r2
 800563e:	2b0c      	cmp	r3, #12
 8005640:	d00e      	beq.n	8005660 <HAL_RCC_OscConfig+0x678>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	220c      	movs	r2, #12
 8005648:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800564a:	2b08      	cmp	r3, #8
 800564c:	d122      	bne.n	8005694 <HAL_RCC_OscConfig+0x6ac>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800564e:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	23c0      	movs	r3, #192	@ 0xc0
 8005654:	025b      	lsls	r3, r3, #9
 8005656:	401a      	ands	r2, r3
 8005658:	23c0      	movs	r3, #192	@ 0xc0
 800565a:	025b      	lsls	r3, r3, #9
 800565c:	429a      	cmp	r2, r3
 800565e:	d119      	bne.n	8005694 <HAL_RCC_OscConfig+0x6ac>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <HAL_RCC_OscConfig+0x690>)
 8005662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	4013      	ands	r3, r2
 800566a:	d04e      	beq.n	800570a <HAL_RCC_OscConfig+0x722>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d04a      	beq.n	800570a <HAL_RCC_OscConfig+0x722>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e1c7      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
 8005678:	40021000 	.word	0x40021000
 800567c:	0800c1a4 	.word	0x0800c1a4
 8005680:	40007000 	.word	0x40007000
 8005684:	00001388 	.word	0x00001388
 8005688:	efffffff 	.word	0xefffffff
 800568c:	00000225 	.word	0x00000225
 8005690:	00000262 	.word	0x00000262
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_RCC_OscConfig+0x6ec>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800569c:	4bbf      	ldr	r3, [pc, #764]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 800569e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a0:	4bbe      	ldr	r3, [pc, #760]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 80056a2:	2180      	movs	r1, #128	@ 0x80
 80056a4:	0249      	lsls	r1, r1, #9
 80056a6:	430a      	orrs	r2, r1
 80056a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056aa:	f7fb fdd1 	bl	8001250 <HAL_GetTick>
 80056ae:	0003      	movs	r3, r0
 80056b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056b4:	f7fb fdcc 	bl	8001250 <HAL_GetTick>
 80056b8:	0002      	movs	r2, r0
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e1a0      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80056c6:	4bb5      	ldr	r3, [pc, #724]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 80056c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ca:	2380      	movs	r3, #128	@ 0x80
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	4013      	ands	r3, r2
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x6cc>
 80056d2:	e01b      	b.n	800570c <HAL_RCC_OscConfig+0x724>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80056d4:	4bb1      	ldr	r3, [pc, #708]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 80056d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056d8:	4bb0      	ldr	r3, [pc, #704]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 80056da:	49b1      	ldr	r1, [pc, #708]	@ (80059a0 <HAL_RCC_OscConfig+0x9b8>)
 80056dc:	400a      	ands	r2, r1
 80056de:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7fb fdb6 	bl	8001250 <HAL_GetTick>
 80056e4:	0003      	movs	r3, r0
 80056e6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056ea:	f7fb fdb1 	bl	8001250 <HAL_GetTick>
 80056ee:	0002      	movs	r2, r0
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e185      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80056fc:	4ba7      	ldr	r3, [pc, #668]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 80056fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	4013      	ands	r3, r2
 8005706:	d1f0      	bne.n	80056ea <HAL_RCC_OscConfig+0x702>
 8005708:	e000      	b.n	800570c <HAL_RCC_OscConfig+0x724>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800570a:	46c0      	nop			@ (mov r8, r8)
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <HAL_RCC_OscConfig+0x74a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005718:	2b01      	cmp	r3, #1
 800571a:	d00a      	beq.n	8005732 <HAL_RCC_OscConfig+0x74a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	2b02      	cmp	r3, #2
 8005722:	d006      	beq.n	8005732 <HAL_RCC_OscConfig+0x74a>
 8005724:	23a6      	movs	r3, #166	@ 0xa6
 8005726:	009a      	lsls	r2, r3, #2
 8005728:	4b9e      	ldr	r3, [pc, #632]	@ (80059a4 <HAL_RCC_OscConfig+0x9bc>)
 800572a:	0011      	movs	r1, r2
 800572c:	0018      	movs	r0, r3
 800572e:	f7fb fa0b 	bl	8000b48 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	2b00      	cmp	r3, #0
 8005738:	d100      	bne.n	800573c <HAL_RCC_OscConfig+0x754>
 800573a:	e164      	b.n	8005a06 <HAL_RCC_OscConfig+0xa1e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800573c:	4b97      	ldr	r3, [pc, #604]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	220c      	movs	r2, #12
 8005742:	4013      	ands	r3, r2
 8005744:	2b08      	cmp	r3, #8
 8005746:	d100      	bne.n	800574a <HAL_RCC_OscConfig+0x762>
 8005748:	e138      	b.n	80059bc <HAL_RCC_OscConfig+0x9d4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	2b02      	cmp	r3, #2
 8005750:	d000      	beq.n	8005754 <HAL_RCC_OscConfig+0x76c>
 8005752:	e108      	b.n	8005966 <HAL_RCC_OscConfig+0x97e>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005758:	2380      	movs	r3, #128	@ 0x80
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	429a      	cmp	r2, r3
 800575e:	d011      	beq.n	8005784 <HAL_RCC_OscConfig+0x79c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005764:	23c0      	movs	r3, #192	@ 0xc0
 8005766:	025b      	lsls	r3, r3, #9
 8005768:	429a      	cmp	r2, r3
 800576a:	d00b      	beq.n	8005784 <HAL_RCC_OscConfig+0x79c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005770:	2380      	movs	r3, #128	@ 0x80
 8005772:	025b      	lsls	r3, r3, #9
 8005774:	429a      	cmp	r2, r3
 8005776:	d005      	beq.n	8005784 <HAL_RCC_OscConfig+0x79c>
 8005778:	4a8b      	ldr	r2, [pc, #556]	@ (80059a8 <HAL_RCC_OscConfig+0x9c0>)
 800577a:	4b8a      	ldr	r3, [pc, #552]	@ (80059a4 <HAL_RCC_OscConfig+0x9bc>)
 800577c:	0011      	movs	r1, r2
 800577e:	0018      	movs	r0, r3
 8005780:	f7fb f9e2 	bl	8000b48 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d059      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005790:	2380      	movs	r3, #128	@ 0x80
 8005792:	02db      	lsls	r3, r3, #11
 8005794:	429a      	cmp	r2, r3
 8005796:	d053      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579c:	2380      	movs	r3, #128	@ 0x80
 800579e:	031b      	lsls	r3, r3, #12
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d04d      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	23c0      	movs	r3, #192	@ 0xc0
 80057aa:	031b      	lsls	r3, r3, #12
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d047      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b4:	2380      	movs	r3, #128	@ 0x80
 80057b6:	035b      	lsls	r3, r3, #13
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d041      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c0:	23a0      	movs	r3, #160	@ 0xa0
 80057c2:	035b      	lsls	r3, r3, #13
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d03b      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057cc:	23c0      	movs	r3, #192	@ 0xc0
 80057ce:	035b      	lsls	r3, r3, #13
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d035      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d8:	23e0      	movs	r3, #224	@ 0xe0
 80057da:	035b      	lsls	r3, r3, #13
 80057dc:	429a      	cmp	r2, r3
 80057de:	d02f      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e4:	2380      	movs	r3, #128	@ 0x80
 80057e6:	039b      	lsls	r3, r3, #14
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d029      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f0:	2390      	movs	r3, #144	@ 0x90
 80057f2:	039b      	lsls	r3, r3, #14
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d023      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fc:	23a0      	movs	r3, #160	@ 0xa0
 80057fe:	039b      	lsls	r3, r3, #14
 8005800:	429a      	cmp	r2, r3
 8005802:	d01d      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005808:	23b0      	movs	r3, #176	@ 0xb0
 800580a:	039b      	lsls	r3, r3, #14
 800580c:	429a      	cmp	r2, r3
 800580e:	d017      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005814:	23c0      	movs	r3, #192	@ 0xc0
 8005816:	039b      	lsls	r3, r3, #14
 8005818:	429a      	cmp	r2, r3
 800581a:	d011      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005820:	23d0      	movs	r3, #208	@ 0xd0
 8005822:	039b      	lsls	r3, r3, #14
 8005824:	429a      	cmp	r2, r3
 8005826:	d00b      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582c:	23e0      	movs	r3, #224	@ 0xe0
 800582e:	039b      	lsls	r3, r3, #14
 8005830:	429a      	cmp	r2, r3
 8005832:	d005      	beq.n	8005840 <HAL_RCC_OscConfig+0x858>
 8005834:	4a5d      	ldr	r2, [pc, #372]	@ (80059ac <HAL_RCC_OscConfig+0x9c4>)
 8005836:	4b5b      	ldr	r3, [pc, #364]	@ (80059a4 <HAL_RCC_OscConfig+0x9bc>)
 8005838:	0011      	movs	r1, r2
 800583a:	0018      	movs	r0, r3
 800583c:	f7fb f984 	bl	8000b48 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	2b00      	cmp	r3, #0
 8005846:	d041      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	d03d      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	2b02      	cmp	r3, #2
 8005856:	d039      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585c:	2b03      	cmp	r3, #3
 800585e:	d035      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	2b04      	cmp	r3, #4
 8005866:	d031      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586c:	2b05      	cmp	r3, #5
 800586e:	d02d      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	2b06      	cmp	r3, #6
 8005876:	d029      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587c:	2b07      	cmp	r3, #7
 800587e:	d025      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	2b08      	cmp	r3, #8
 8005886:	d021      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	2b09      	cmp	r3, #9
 800588e:	d01d      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005894:	2b0a      	cmp	r3, #10
 8005896:	d019      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	2b0b      	cmp	r3, #11
 800589e:	d015      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	2b0c      	cmp	r3, #12
 80058a6:	d011      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ac:	2b0d      	cmp	r3, #13
 80058ae:	d00d      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	2b0e      	cmp	r3, #14
 80058b6:	d009      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058bc:	2b0f      	cmp	r3, #15
 80058be:	d005      	beq.n	80058cc <HAL_RCC_OscConfig+0x8e4>
 80058c0:	4a3b      	ldr	r2, [pc, #236]	@ (80059b0 <HAL_RCC_OscConfig+0x9c8>)
 80058c2:	4b38      	ldr	r3, [pc, #224]	@ (80059a4 <HAL_RCC_OscConfig+0x9bc>)
 80058c4:	0011      	movs	r1, r2
 80058c6:	0018      	movs	r0, r3
 80058c8:	f7fb f93e 	bl	8000b48 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058cc:	4b33      	ldr	r3, [pc, #204]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	4b32      	ldr	r3, [pc, #200]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 80058d2:	4938      	ldr	r1, [pc, #224]	@ (80059b4 <HAL_RCC_OscConfig+0x9cc>)
 80058d4:	400a      	ands	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fb fcba 	bl	8001250 <HAL_GetTick>
 80058dc:	0003      	movs	r3, r0
 80058de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x90c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e2:	f7fb fcb5 	bl	8001250 <HAL_GetTick>
 80058e6:	0002      	movs	r2, r0
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x90c>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e089      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058f4:	4b29      	ldr	r3, [pc, #164]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	049b      	lsls	r3, r3, #18
 80058fc:	4013      	ands	r3, r2
 80058fe:	d1f0      	bne.n	80058e2 <HAL_RCC_OscConfig+0x8fa>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005900:	4b26      	ldr	r3, [pc, #152]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	220f      	movs	r2, #15
 8005906:	4393      	bics	r3, r2
 8005908:	0019      	movs	r1, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800590e:	4b23      	ldr	r3, [pc, #140]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 8005910:	430a      	orrs	r2, r1
 8005912:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005914:	4b21      	ldr	r3, [pc, #132]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4a27      	ldr	r2, [pc, #156]	@ (80059b8 <HAL_RCC_OscConfig+0x9d0>)
 800591a:	4013      	ands	r3, r2
 800591c:	0019      	movs	r1, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005926:	431a      	orrs	r2, r3
 8005928:	4b1c      	ldr	r3, [pc, #112]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800592e:	4b1b      	ldr	r3, [pc, #108]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b1a      	ldr	r3, [pc, #104]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 8005934:	2180      	movs	r1, #128	@ 0x80
 8005936:	0449      	lsls	r1, r1, #17
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593c:	f7fb fc88 	bl	8001250 <HAL_GetTick>
 8005940:	0003      	movs	r3, r0
 8005942:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x970>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005946:	f7fb fc83 	bl	8001250 <HAL_GetTick>
 800594a:	0002      	movs	r2, r0
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x970>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e057      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005958:	4b10      	ldr	r3, [pc, #64]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	2380      	movs	r3, #128	@ 0x80
 800595e:	049b      	lsls	r3, r3, #18
 8005960:	4013      	ands	r3, r2
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_OscConfig+0x95e>
 8005964:	e04f      	b.n	8005a06 <HAL_RCC_OscConfig+0xa1e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005966:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b0c      	ldr	r3, [pc, #48]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 800596c:	4911      	ldr	r1, [pc, #68]	@ (80059b4 <HAL_RCC_OscConfig+0x9cc>)
 800596e:	400a      	ands	r2, r1
 8005970:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005972:	f7fb fc6d 	bl	8001250 <HAL_GetTick>
 8005976:	0003      	movs	r3, r0
 8005978:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x9a6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597c:	f7fb fc68 	bl	8001250 <HAL_GetTick>
 8005980:	0002      	movs	r2, r0
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x9a6>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e03c      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800598e:	4b03      	ldr	r3, [pc, #12]	@ (800599c <HAL_RCC_OscConfig+0x9b4>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	2380      	movs	r3, #128	@ 0x80
 8005994:	049b      	lsls	r3, r3, #18
 8005996:	4013      	ands	r3, r2
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x994>
 800599a:	e034      	b.n	8005a06 <HAL_RCC_OscConfig+0xa1e>
 800599c:	40021000 	.word	0x40021000
 80059a0:	fffeffff 	.word	0xfffeffff
 80059a4:	0800c1a4 	.word	0x0800c1a4
 80059a8:	000002a1 	.word	0x000002a1
 80059ac:	000002a2 	.word	0x000002a2
 80059b0:	000002a3 	.word	0x000002a3
 80059b4:	feffffff 	.word	0xfeffffff
 80059b8:	ffc27fff 	.word	0xffc27fff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_OscConfig+0x9e0>
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e01f      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80059c8:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <HAL_RCC_OscConfig+0xa28>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80059ce:	4b10      	ldr	r3, [pc, #64]	@ (8005a10 <HAL_RCC_OscConfig+0xa28>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	23c0      	movs	r3, #192	@ 0xc0
 80059d8:	025b      	lsls	r3, r3, #9
 80059da:	401a      	ands	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d10e      	bne.n	8005a02 <HAL_RCC_OscConfig+0xa1a>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	220f      	movs	r2, #15
 80059e8:	401a      	ands	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_OscConfig+0xa1a>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	23f0      	movs	r3, #240	@ 0xf0
 80059f6:	039b      	lsls	r3, r3, #14
 80059f8:	401a      	ands	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d001      	beq.n	8005a06 <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <HAL_RCC_OscConfig+0xa20>
        }
      }
    }
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	0018      	movs	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b008      	add	sp, #32
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40021000 	.word	0x40021000

08005a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e145      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x2a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d110      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x40>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2202      	movs	r2, #2
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d10b      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2204      	movs	r2, #4
 8005a42:	4013      	ands	r3, r2
 8005a44:	d106      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x40>
 8005a46:	23c5      	movs	r3, #197	@ 0xc5
 8005a48:	009a      	lsls	r2, r3, #2
 8005a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8005cbc <HAL_RCC_ClockConfig+0x2a8>)
 8005a4c:	0011      	movs	r1, r2
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7fb f87a 	bl	8000b48 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x58>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d005      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x58>
 8005a60:	4a97      	ldr	r2, [pc, #604]	@ (8005cc0 <HAL_RCC_ClockConfig+0x2ac>)
 8005a62:	4b96      	ldr	r3, [pc, #600]	@ (8005cbc <HAL_RCC_ClockConfig+0x2a8>)
 8005a64:	0011      	movs	r1, r2
 8005a66:	0018      	movs	r0, r3
 8005a68:	f7fb f86e 	bl	8000b48 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b95      	ldr	r3, [pc, #596]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2b0>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2201      	movs	r2, #1
 8005a72:	4013      	ands	r3, r2
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d911      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x8a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b92      	ldr	r3, [pc, #584]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2b0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4393      	bics	r3, r2
 8005a82:	0019      	movs	r1, r3
 8005a84:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2b0>)
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2b0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2201      	movs	r2, #1
 8005a92:	4013      	ands	r3, r2
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d001      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x8a>
    {
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e10a      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x2a0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d040      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x116>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2204      	movs	r2, #4
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d006      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0xac>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ab2:	4b85      	ldr	r3, [pc, #532]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4b84      	ldr	r3, [pc, #528]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005ab8:	21e0      	movs	r1, #224	@ 0xe0
 8005aba:	00c9      	lsls	r1, r1, #3
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d026      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b80      	cmp	r3, #128	@ 0x80
 8005ace:	d022      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b90      	cmp	r3, #144	@ 0x90
 8005ad6:	d01e      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ade:	d01a      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2bb0      	cmp	r3, #176	@ 0xb0
 8005ae6:	d016      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2bc0      	cmp	r3, #192	@ 0xc0
 8005aee:	d012      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2bd0      	cmp	r3, #208	@ 0xd0
 8005af6:	d00e      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2be0      	cmp	r3, #224	@ 0xe0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2bf0      	cmp	r3, #240	@ 0xf0
 8005b06:	d006      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x102>
 8005b08:	23cd      	movs	r3, #205	@ 0xcd
 8005b0a:	009a      	lsls	r2, r3, #2
 8005b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8005cbc <HAL_RCC_ClockConfig+0x2a8>)
 8005b0e:	0011      	movs	r1, r2
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7fb f819 	bl	8000b48 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b16:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	22f0      	movs	r2, #240	@ 0xf0
 8005b1c:	4393      	bics	r3, r2
 8005b1e:	0019      	movs	r1, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	4b68      	ldr	r3, [pc, #416]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	4013      	ands	r3, r2
 8005b32:	d100      	bne.n	8005b36 <HAL_RCC_ClockConfig+0x122>
 8005b34:	e062      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d011      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x14e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d00d      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x14e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x14e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d005      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x14e>
 8005b56:	4a5d      	ldr	r2, [pc, #372]	@ (8005ccc <HAL_RCC_ClockConfig+0x2b8>)
 8005b58:	4b58      	ldr	r3, [pc, #352]	@ (8005cbc <HAL_RCC_ClockConfig+0x2a8>)
 8005b5a:	0011      	movs	r1, r2
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f7fa fff3 	bl	8000b48 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d107      	bne.n	8005b7a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6a:	4b57      	ldr	r3, [pc, #348]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	2380      	movs	r3, #128	@ 0x80
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	4013      	ands	r3, r2
 8005b74:	d120      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x1a4>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e09c      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d107      	bne.n	8005b92 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b82:	4b51      	ldr	r3, [pc, #324]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	2380      	movs	r3, #128	@ 0x80
 8005b88:	049b      	lsls	r3, r3, #18
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d114      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x1a4>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e090      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d107      	bne.n	8005baa <HAL_RCC_ClockConfig+0x196>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9e:	2380      	movs	r3, #128	@ 0x80
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x1a4>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e084      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x2a0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005baa:	4b47      	ldr	r3, [pc, #284]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x1a4>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e07d      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bb8:	4b43      	ldr	r3, [pc, #268]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	4393      	bics	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b40      	ldr	r3, [pc, #256]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bcc:	f7fb fb40 	bl	8001250 <HAL_GetTick>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd4:	e009      	b.n	8005bea <HAL_RCC_ClockConfig+0x1d6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd6:	f7fb fb3b 	bl	8001250 <HAL_GetTick>
 8005bda:	0002      	movs	r2, r0
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	4a3b      	ldr	r2, [pc, #236]	@ (8005cd0 <HAL_RCC_ClockConfig+0x2bc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_ClockConfig+0x1d6>
      {
        return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e064      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x2a0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bea:	4b37      	ldr	r3, [pc, #220]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	220c      	movs	r2, #12
 8005bf0:	401a      	ands	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d1ec      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0x1c2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b31      	ldr	r3, [pc, #196]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2b0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2201      	movs	r2, #1
 8005c02:	4013      	ands	r3, r2
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d211      	bcs.n	8005c2e <HAL_RCC_ClockConfig+0x21a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2b0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4393      	bics	r3, r2
 8005c12:	0019      	movs	r1, r3
 8005c14:	4b2b      	ldr	r3, [pc, #172]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2b0>)
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1c:	4b29      	ldr	r3, [pc, #164]	@ (8005cc4 <HAL_RCC_ClockConfig+0x2b0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	4013      	ands	r3, r2
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d001      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x21a>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e042      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x2a0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2204      	movs	r2, #4
 8005c34:	4013      	ands	r3, r2
 8005c36:	d02b      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01d      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x268>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d017      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x268>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	23a0      	movs	r3, #160	@ 0xa0
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d011      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x268>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	23c0      	movs	r3, #192	@ 0xc0
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d00b      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x268>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	23e0      	movs	r3, #224	@ 0xe0
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x268>
 8005c70:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <HAL_RCC_ClockConfig+0x2c0>)
 8005c72:	4b12      	ldr	r3, [pc, #72]	@ (8005cbc <HAL_RCC_ClockConfig+0x2a8>)
 8005c74:	0011      	movs	r1, r2
 8005c76:	0018      	movs	r0, r3
 8005c78:	f7fa ff66 	bl	8000b48 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c7c:	4b12      	ldr	r3, [pc, #72]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <HAL_RCC_ClockConfig+0x2c4>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	0019      	movs	r1, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c90:	f000 f828 	bl	8005ce4 <HAL_RCC_GetSysClockFreq>
 8005c94:	0001      	movs	r1, r0
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <HAL_RCC_ClockConfig+0x2b4>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	220f      	movs	r2, #15
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8005cdc <HAL_RCC_ClockConfig+0x2c8>)
 8005ca2:	5cd3      	ldrb	r3, [r2, r3]
 8005ca4:	000a      	movs	r2, r1
 8005ca6:	40da      	lsrs	r2, r3
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <HAL_RCC_ClockConfig+0x2cc>)
 8005caa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005cac:	2003      	movs	r0, #3
 8005cae:	f7fb fa89 	bl	80011c4 <HAL_InitTick>
  
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b004      	add	sp, #16
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	0800c1a4 	.word	0x0800c1a4
 8005cc0:	00000315 	.word	0x00000315
 8005cc4:	40022000 	.word	0x40022000
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	0000033b 	.word	0x0000033b
 8005cd0:	00001388 	.word	0x00001388
 8005cd4:	00000382 	.word	0x00000382
 8005cd8:	fffff8ff 	.word	0xfffff8ff
 8005cdc:	0800c2c0 	.word	0x0800c2c0
 8005ce0:	20000018 	.word	0x20000018

08005ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8005db4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	220c      	movs	r2, #12
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b0c      	cmp	r3, #12
 8005d0c:	d046      	beq.n	8005d9c <HAL_RCC_GetSysClockFreq+0xb8>
 8005d0e:	d848      	bhi.n	8005da2 <HAL_RCC_GetSysClockFreq+0xbe>
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d002      	beq.n	8005d1a <HAL_RCC_GetSysClockFreq+0x36>
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d003      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x3c>
 8005d18:	e043      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d1a:	4b27      	ldr	r3, [pc, #156]	@ (8005db8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d1c:	613b      	str	r3, [r7, #16]
      break;
 8005d1e:	e043      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	0c9b      	lsrs	r3, r3, #18
 8005d24:	220f      	movs	r2, #15
 8005d26:	4013      	ands	r3, r2
 8005d28:	4a24      	ldr	r2, [pc, #144]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0xd8>)
 8005d2a:	5cd3      	ldrb	r3, [r2, r3]
 8005d2c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005d2e:	4b21      	ldr	r3, [pc, #132]	@ (8005db4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	220f      	movs	r2, #15
 8005d34:	4013      	ands	r3, r2
 8005d36:	4a22      	ldr	r2, [pc, #136]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005d38:	5cd3      	ldrb	r3, [r2, r3]
 8005d3a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	23c0      	movs	r3, #192	@ 0xc0
 8005d40:	025b      	lsls	r3, r3, #9
 8005d42:	401a      	ands	r2, r3
 8005d44:	2380      	movs	r3, #128	@ 0x80
 8005d46:	025b      	lsls	r3, r3, #9
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d109      	bne.n	8005d60 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	481a      	ldr	r0, [pc, #104]	@ (8005db8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d50:	f7fa f9ec 	bl	800012c <__udivsi3>
 8005d54:	0003      	movs	r3, r0
 8005d56:	001a      	movs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4353      	muls	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e01a      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	23c0      	movs	r3, #192	@ 0xc0
 8005d64:	025b      	lsls	r3, r3, #9
 8005d66:	401a      	ands	r2, r3
 8005d68:	23c0      	movs	r3, #192	@ 0xc0
 8005d6a:	025b      	lsls	r3, r3, #9
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d109      	bne.n	8005d84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	4814      	ldr	r0, [pc, #80]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005d74:	f7fa f9da 	bl	800012c <__udivsi3>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	001a      	movs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4353      	muls	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	480c      	ldr	r0, [pc, #48]	@ (8005db8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d88:	f7fa f9d0 	bl	800012c <__udivsi3>
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	001a      	movs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4353      	muls	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	613b      	str	r3, [r7, #16]
      break;
 8005d9a:	e005      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005d9c:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005d9e:	613b      	str	r3, [r7, #16]
      break;
 8005da0:	e002      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005da2:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005da4:	613b      	str	r3, [r7, #16]
      break;
 8005da6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005da8:	693b      	ldr	r3, [r7, #16]
}
 8005daa:	0018      	movs	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b006      	add	sp, #24
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	40021000 	.word	0x40021000
 8005db8:	007a1200 	.word	0x007a1200
 8005dbc:	0800c2d0 	.word	0x0800c2d0
 8005dc0:	0800c2e0 	.word	0x0800c2e0
 8005dc4:	02dc6c00 	.word	0x02dc6c00

08005dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4ab0      	ldr	r2, [pc, #704]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d904      	bls.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005de2:	4bb0      	ldr	r3, [pc, #704]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005de4:	216c      	movs	r1, #108	@ 0x6c
 8005de6:	0018      	movs	r0, r3
 8005de8:	f7fa feae 	bl	8000b48 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	2380      	movs	r3, #128	@ 0x80
 8005df2:	025b      	lsls	r3, r3, #9
 8005df4:	4013      	ands	r3, r2
 8005df6:	d100      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005df8:	e0a9      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	2380      	movs	r3, #128	@ 0x80
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d010      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	2380      	movs	r3, #128	@ 0x80
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d00a      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	23c0      	movs	r3, #192	@ 0xc0
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d004      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005e26:	4b9f      	ldr	r3, [pc, #636]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005e28:	2172      	movs	r1, #114	@ 0x72
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f7fa fe8c 	bl	8000b48 <assert_failed>
    
    FlagStatus       pwrclkchanged = RESET;
 8005e30:	2017      	movs	r0, #23
 8005e32:	183b      	adds	r3, r7, r0
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e38:	4b9b      	ldr	r3, [pc, #620]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	2380      	movs	r3, #128	@ 0x80
 8005e3e:	055b      	lsls	r3, r3, #21
 8005e40:	4013      	ands	r3, r2
 8005e42:	d110      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e44:	4b98      	ldr	r3, [pc, #608]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	4b97      	ldr	r3, [pc, #604]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e4a:	2180      	movs	r1, #128	@ 0x80
 8005e4c:	0549      	lsls	r1, r1, #21
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	61da      	str	r2, [r3, #28]
 8005e52:	4b95      	ldr	r3, [pc, #596]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e54:	69da      	ldr	r2, [r3, #28]
 8005e56:	2380      	movs	r3, #128	@ 0x80
 8005e58:	055b      	lsls	r3, r3, #21
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e60:	183b      	adds	r3, r7, r0
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e66:	4b91      	ldr	r3, [pc, #580]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	2380      	movs	r3, #128	@ 0x80
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d11a      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e72:	4b8e      	ldr	r3, [pc, #568]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b8d      	ldr	r3, [pc, #564]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e78:	2180      	movs	r1, #128	@ 0x80
 8005e7a:	0049      	lsls	r1, r1, #1
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e80:	f7fb f9e6 	bl	8001250 <HAL_GetTick>
 8005e84:	0003      	movs	r3, r0
 8005e86:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e88:	e008      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e8a:	f7fb f9e1 	bl	8001250 <HAL_GetTick>
 8005e8e:	0002      	movs	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b64      	cmp	r3, #100	@ 0x64
 8005e96:	d901      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e0fd      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9c:	4b83      	ldr	r3, [pc, #524]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ea8:	4b7f      	ldr	r3, [pc, #508]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	23c0      	movs	r3, #192	@ 0xc0
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d034      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	23c0      	movs	r3, #192	@ 0xc0
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d02c      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eca:	4b77      	ldr	r3, [pc, #476]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	4a78      	ldr	r2, [pc, #480]	@ (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ed4:	4b74      	ldr	r3, [pc, #464]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ed6:	6a1a      	ldr	r2, [r3, #32]
 8005ed8:	4b73      	ldr	r3, [pc, #460]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005eda:	2180      	movs	r1, #128	@ 0x80
 8005edc:	0249      	lsls	r1, r1, #9
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee2:	4b71      	ldr	r3, [pc, #452]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	4b70      	ldr	r3, [pc, #448]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ee8:	4972      	ldr	r1, [pc, #456]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005eea:	400a      	ands	r2, r1
 8005eec:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005eee:	4b6e      	ldr	r3, [pc, #440]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d013      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7fb f9a8 	bl	8001250 <HAL_GetTick>
 8005f00:	0003      	movs	r3, r0
 8005f02:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f04:	e009      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x152>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f06:	f7fb f9a3 	bl	8001250 <HAL_GetTick>
 8005f0a:	0002      	movs	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	4a69      	ldr	r2, [pc, #420]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x152>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e0be      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f1a:	4b63      	ldr	r3, [pc, #396]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	4013      	ands	r3, r2
 8005f22:	d0f0      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f24:	4b60      	ldr	r3, [pc, #384]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	4a61      	ldr	r2, [pc, #388]	@ (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	0019      	movs	r1, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	4b5d      	ldr	r3, [pc, #372]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f34:	430a      	orrs	r2, r1
 8005f36:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f38:	2317      	movs	r3, #23
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d105      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f42:	4b59      	ldr	r3, [pc, #356]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	4b58      	ldr	r3, [pc, #352]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f48:	495c      	ldr	r1, [pc, #368]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2201      	movs	r2, #1
 8005f54:	4013      	ands	r3, r2
 8005f56:	d01e      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d010      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d00c      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d008      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d004      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8005f78:	4b4a      	ldr	r3, [pc, #296]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005f7a:	21b9      	movs	r1, #185	@ 0xb9
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7fa fde3 	bl	8000b48 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f82:	4b49      	ldr	r3, [pc, #292]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f86:	2203      	movs	r2, #3
 8005f88:	4393      	bics	r3, r2
 8005f8a:	0019      	movs	r1, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	4b45      	ldr	r3, [pc, #276]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f92:	430a      	orrs	r2, r1
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d024      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d016      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	2380      	movs	r3, #128	@ 0x80
 8005fae:	025b      	lsls	r3, r3, #9
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d010      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	2380      	movs	r3, #128	@ 0x80
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d00a      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	23c0      	movs	r3, #192	@ 0xc0
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d004      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8005fcc:	4b35      	ldr	r3, [pc, #212]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005fce:	21c5      	movs	r1, #197	@ 0xc5
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f7fa fdb9 	bl	8000b48 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fd6:	4b34      	ldr	r3, [pc, #208]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fda:	4a39      	ldr	r2, [pc, #228]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	0019      	movs	r1, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	4b30      	ldr	r3, [pc, #192]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d016      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b10      	cmp	r3, #16
 8006002:	d004      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8006004:	4b27      	ldr	r3, [pc, #156]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006006:	21dd      	movs	r1, #221	@ 0xdd
 8006008:	0018      	movs	r0, r3
 800600a:	f7fa fd9d 	bl	8000b48 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800600e:	4b26      	ldr	r3, [pc, #152]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	2210      	movs	r2, #16
 8006014:	4393      	bics	r3, r2
 8006016:	0019      	movs	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	4b22      	ldr	r3, [pc, #136]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800601e:	430a      	orrs	r2, r1
 8006020:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	2380      	movs	r3, #128	@ 0x80
 8006028:	029b      	lsls	r3, r3, #10
 800602a:	4013      	ands	r3, r2
 800602c:	d016      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b80      	cmp	r3, #128	@ 0x80
 800603c:	d004      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800603e:	4b19      	ldr	r3, [pc, #100]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006040:	21e8      	movs	r1, #232	@ 0xe8
 8006042:	0018      	movs	r0, r3
 8006044:	f7fa fd80 	bl	8000b48 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006048:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800604a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604c:	2280      	movs	r2, #128	@ 0x80
 800604e:	4393      	bics	r3, r2
 8006050:	0019      	movs	r1, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	4b14      	ldr	r3, [pc, #80]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006058:	430a      	orrs	r2, r1
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	2380      	movs	r3, #128	@ 0x80
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4013      	ands	r3, r2
 8006066:	d016      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	2b40      	cmp	r3, #64	@ 0x40
 8006076:	d004      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006078:	4b0a      	ldr	r3, [pc, #40]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800607a:	21f7      	movs	r1, #247	@ 0xf7
 800607c:	0018      	movs	r0, r3
 800607e:	f7fa fd63 	bl	8000b48 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006082:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006086:	2240      	movs	r2, #64	@ 0x40
 8006088:	4393      	bics	r3, r2
 800608a:	0019      	movs	r1, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006092:	430a      	orrs	r2, r1
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	0018      	movs	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	b006      	add	sp, #24
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	00030423 	.word	0x00030423
 80060a4:	0800c1dc 	.word	0x0800c1dc
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40007000 	.word	0x40007000
 80060b0:	fffffcff 	.word	0xfffffcff
 80060b4:	fffeffff 	.word	0xfffeffff
 80060b8:	00001388 	.word	0x00001388
 80060bc:	efffffff 	.word	0xefffffff
 80060c0:	fffcffff 	.word	0xfffcffff

080060c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e0e1      	b.n	800629a <HAL_TIM_Base_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a72      	ldr	r2, [pc, #456]	@ (80062a4 <HAL_TIM_Base_Init+0x1e0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d030      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	2380      	movs	r3, #128	@ 0x80
 80060e6:	05db      	lsls	r3, r3, #23
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d02a      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a6d      	ldr	r2, [pc, #436]	@ (80062a8 <HAL_TIM_Base_Init+0x1e4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d025      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a6c      	ldr	r2, [pc, #432]	@ (80062ac <HAL_TIM_Base_Init+0x1e8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d020      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a6a      	ldr	r2, [pc, #424]	@ (80062b0 <HAL_TIM_Base_Init+0x1ec>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d01b      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a69      	ldr	r2, [pc, #420]	@ (80062b4 <HAL_TIM_Base_Init+0x1f0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d016      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a67      	ldr	r2, [pc, #412]	@ (80062b8 <HAL_TIM_Base_Init+0x1f4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d011      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a66      	ldr	r2, [pc, #408]	@ (80062bc <HAL_TIM_Base_Init+0x1f8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00c      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a64      	ldr	r2, [pc, #400]	@ (80062c0 <HAL_TIM_Base_Init+0x1fc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d007      	beq.n	8006142 <HAL_TIM_Base_Init+0x7e>
 8006132:	2314      	movs	r3, #20
 8006134:	33ff      	adds	r3, #255	@ 0xff
 8006136:	001a      	movs	r2, r3
 8006138:	4b62      	ldr	r3, [pc, #392]	@ (80062c4 <HAL_TIM_Base_Init+0x200>)
 800613a:	0011      	movs	r1, r2
 800613c:	0018      	movs	r0, r3
 800613e:	f7fa fd03 	bl	8000b48 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d016      	beq.n	8006178 <HAL_TIM_Base_Init+0xb4>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b10      	cmp	r3, #16
 8006150:	d012      	beq.n	8006178 <HAL_TIM_Base_Init+0xb4>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b20      	cmp	r3, #32
 8006158:	d00e      	beq.n	8006178 <HAL_TIM_Base_Init+0xb4>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b40      	cmp	r3, #64	@ 0x40
 8006160:	d00a      	beq.n	8006178 <HAL_TIM_Base_Init+0xb4>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b60      	cmp	r3, #96	@ 0x60
 8006168:	d006      	beq.n	8006178 <HAL_TIM_Base_Init+0xb4>
 800616a:	238a      	movs	r3, #138	@ 0x8a
 800616c:	005a      	lsls	r2, r3, #1
 800616e:	4b55      	ldr	r3, [pc, #340]	@ (80062c4 <HAL_TIM_Base_Init+0x200>)
 8006170:	0011      	movs	r1, r2
 8006172:	0018      	movs	r0, r3
 8006174:	f7fa fce8 	bl	8000b48 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d013      	beq.n	80061a8 <HAL_TIM_Base_Init+0xe4>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	2380      	movs	r3, #128	@ 0x80
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	429a      	cmp	r2, r3
 800618a:	d00d      	beq.n	80061a8 <HAL_TIM_Base_Init+0xe4>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	2380      	movs	r3, #128	@ 0x80
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	429a      	cmp	r2, r3
 8006196:	d007      	beq.n	80061a8 <HAL_TIM_Base_Init+0xe4>
 8006198:	2316      	movs	r3, #22
 800619a:	33ff      	adds	r3, #255	@ 0xff
 800619c:	001a      	movs	r2, r3
 800619e:	4b49      	ldr	r3, [pc, #292]	@ (80062c4 <HAL_TIM_Base_Init+0x200>)
 80061a0:	0011      	movs	r1, r2
 80061a2:	0018      	movs	r0, r3
 80061a4:	f7fa fcd0 	bl	8000b48 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	2380      	movs	r3, #128	@ 0x80
 80061ae:	05db      	lsls	r3, r3, #23
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d011      	beq.n	80061d8 <HAL_TIM_Base_Init+0x114>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <HAL_TIM_Base_Init+0x108>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	2380      	movs	r3, #128	@ 0x80
 80061c2:	025b      	lsls	r3, r3, #9
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d201      	bcs.n	80061cc <HAL_TIM_Base_Init+0x108>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <HAL_TIM_Base_Init+0x10a>
 80061cc:	2300      	movs	r3, #0
 80061ce:	1c1a      	adds	r2, r3, #0
 80061d0:	2301      	movs	r3, #1
 80061d2:	4013      	ands	r3, r2
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e004      	b.n	80061e2 <HAL_TIM_Base_Init+0x11e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	1e5a      	subs	r2, r3, #1
 80061de:	4193      	sbcs	r3, r2
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0x130>
 80061e6:	238b      	movs	r3, #139	@ 0x8b
 80061e8:	005a      	lsls	r2, r3, #1
 80061ea:	4b36      	ldr	r3, [pc, #216]	@ (80062c4 <HAL_TIM_Base_Init+0x200>)
 80061ec:	0011      	movs	r1, r2
 80061ee:	0018      	movs	r0, r3
 80061f0:	f7fa fcaa 	bl	8000b48 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <HAL_TIM_Base_Init+0x150>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b80      	cmp	r3, #128	@ 0x80
 8006202:	d007      	beq.n	8006214 <HAL_TIM_Base_Init+0x150>
 8006204:	2318      	movs	r3, #24
 8006206:	33ff      	adds	r3, #255	@ 0xff
 8006208:	001a      	movs	r2, r3
 800620a:	4b2e      	ldr	r3, [pc, #184]	@ (80062c4 <HAL_TIM_Base_Init+0x200>)
 800620c:	0011      	movs	r1, r2
 800620e:	0018      	movs	r0, r3
 8006210:	f7fa fc9a 	bl	8000b48 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	223d      	movs	r2, #61	@ 0x3d
 8006218:	5c9b      	ldrb	r3, [r3, r2]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d107      	bne.n	8006230 <HAL_TIM_Base_Init+0x16c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	223c      	movs	r2, #60	@ 0x3c
 8006224:	2100      	movs	r1, #0
 8006226:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	0018      	movs	r0, r3
 800622c:	f7fa fec2 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	223d      	movs	r2, #61	@ 0x3d
 8006234:	2102      	movs	r1, #2
 8006236:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	0019      	movs	r1, r3
 8006242:	0010      	movs	r0, r2
 8006244:	f000 fcfe 	bl	8006c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2246      	movs	r2, #70	@ 0x46
 800624c:	2101      	movs	r1, #1
 800624e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	223e      	movs	r2, #62	@ 0x3e
 8006254:	2101      	movs	r1, #1
 8006256:	5499      	strb	r1, [r3, r2]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	223f      	movs	r2, #63	@ 0x3f
 800625c:	2101      	movs	r1, #1
 800625e:	5499      	strb	r1, [r3, r2]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2240      	movs	r2, #64	@ 0x40
 8006264:	2101      	movs	r1, #1
 8006266:	5499      	strb	r1, [r3, r2]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2241      	movs	r2, #65	@ 0x41
 800626c:	2101      	movs	r1, #1
 800626e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2242      	movs	r2, #66	@ 0x42
 8006274:	2101      	movs	r1, #1
 8006276:	5499      	strb	r1, [r3, r2]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2243      	movs	r2, #67	@ 0x43
 800627c:	2101      	movs	r1, #1
 800627e:	5499      	strb	r1, [r3, r2]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2244      	movs	r2, #68	@ 0x44
 8006284:	2101      	movs	r1, #1
 8006286:	5499      	strb	r1, [r3, r2]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2245      	movs	r2, #69	@ 0x45
 800628c:	2101      	movs	r1, #1
 800628e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	223d      	movs	r2, #61	@ 0x3d
 8006294:	2101      	movs	r1, #1
 8006296:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b002      	add	sp, #8
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			@ (mov r8, r8)
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40001000 	.word	0x40001000
 80062b0:	40001400 	.word	0x40001400
 80062b4:	40002000 	.word	0x40002000
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800
 80062c4:	0800c218 	.word	0x0800c218

080062c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a3d      	ldr	r2, [pc, #244]	@ (80063cc <HAL_TIM_Base_Start_IT+0x104>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d02f      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	2380      	movs	r3, #128	@ 0x80
 80062e0:	05db      	lsls	r3, r3, #23
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d029      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a39      	ldr	r2, [pc, #228]	@ (80063d0 <HAL_TIM_Base_Start_IT+0x108>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d024      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a37      	ldr	r2, [pc, #220]	@ (80063d4 <HAL_TIM_Base_Start_IT+0x10c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01f      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a36      	ldr	r2, [pc, #216]	@ (80063d8 <HAL_TIM_Base_Start_IT+0x110>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d01a      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a34      	ldr	r2, [pc, #208]	@ (80063dc <HAL_TIM_Base_Start_IT+0x114>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d015      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a33      	ldr	r2, [pc, #204]	@ (80063e0 <HAL_TIM_Base_Start_IT+0x118>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d010      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a31      	ldr	r2, [pc, #196]	@ (80063e4 <HAL_TIM_Base_Start_IT+0x11c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00b      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a30      	ldr	r2, [pc, #192]	@ (80063e8 <HAL_TIM_Base_Start_IT+0x120>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d006      	beq.n	800633a <HAL_TIM_Base_Start_IT+0x72>
 800632c:	23e8      	movs	r3, #232	@ 0xe8
 800632e:	005a      	lsls	r2, r3, #1
 8006330:	4b2e      	ldr	r3, [pc, #184]	@ (80063ec <HAL_TIM_Base_Start_IT+0x124>)
 8006332:	0011      	movs	r1, r2
 8006334:	0018      	movs	r0, r3
 8006336:	f7fa fc07 	bl	8000b48 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	223d      	movs	r2, #61	@ 0x3d
 800633e:	5c9b      	ldrb	r3, [r3, r2]
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b01      	cmp	r3, #1
 8006344:	d001      	beq.n	800634a <HAL_TIM_Base_Start_IT+0x82>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e03b      	b.n	80063c2 <HAL_TIM_Base_Start_IT+0xfa>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	223d      	movs	r2, #61	@ 0x3d
 800634e:	2102      	movs	r1, #2
 8006350:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2101      	movs	r1, #1
 800635e:	430a      	orrs	r2, r1
 8006360:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a19      	ldr	r2, [pc, #100]	@ (80063cc <HAL_TIM_Base_Start_IT+0x104>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00f      	beq.n	800638c <HAL_TIM_Base_Start_IT+0xc4>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	2380      	movs	r3, #128	@ 0x80
 8006372:	05db      	lsls	r3, r3, #23
 8006374:	429a      	cmp	r2, r3
 8006376:	d009      	beq.n	800638c <HAL_TIM_Base_Start_IT+0xc4>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a14      	ldr	r2, [pc, #80]	@ (80063d0 <HAL_TIM_Base_Start_IT+0x108>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d004      	beq.n	800638c <HAL_TIM_Base_Start_IT+0xc4>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a16      	ldr	r2, [pc, #88]	@ (80063e0 <HAL_TIM_Base_Start_IT+0x118>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d111      	bne.n	80063b0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2207      	movs	r2, #7
 8006394:	4013      	ands	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b06      	cmp	r3, #6
 800639c:	d010      	beq.n	80063c0 <HAL_TIM_Base_Start_IT+0xf8>
    {
      __HAL_TIM_ENABLE(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2101      	movs	r1, #1
 80063aa:	430a      	orrs	r2, r1
 80063ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ae:	e007      	b.n	80063c0 <HAL_TIM_Base_Start_IT+0xf8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2101      	movs	r1, #1
 80063bc:	430a      	orrs	r2, r1
 80063be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b004      	add	sp, #16
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	40012c00 	.word	0x40012c00
 80063d0:	40000400 	.word	0x40000400
 80063d4:	40001000 	.word	0x40001000
 80063d8:	40001400 	.word	0x40001400
 80063dc:	40002000 	.word	0x40002000
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40014400 	.word	0x40014400
 80063e8:	40014800 	.word	0x40014800
 80063ec:	0800c218 	.word	0x0800c218

080063f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2202      	movs	r2, #2
 800640c:	4013      	ands	r3, r2
 800640e:	d021      	beq.n	8006454 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2202      	movs	r2, #2
 8006414:	4013      	ands	r3, r2
 8006416:	d01d      	beq.n	8006454 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2203      	movs	r2, #3
 800641e:	4252      	negs	r2, r2
 8006420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2203      	movs	r2, #3
 8006430:	4013      	ands	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0018      	movs	r0, r3
 8006438:	f000 fbec 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 800643c:	e007      	b.n	800644e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	0018      	movs	r0, r3
 8006442:	f000 fbdf 	bl	8006c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	0018      	movs	r0, r3
 800644a:	f000 fbeb 	bl	8006c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2204      	movs	r2, #4
 8006458:	4013      	ands	r3, r2
 800645a:	d022      	beq.n	80064a2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2204      	movs	r2, #4
 8006460:	4013      	ands	r3, r2
 8006462:	d01e      	beq.n	80064a2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2205      	movs	r2, #5
 800646a:	4252      	negs	r2, r2
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	23c0      	movs	r3, #192	@ 0xc0
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4013      	ands	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0018      	movs	r0, r3
 8006486:	f000 fbc5 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 800648a:	e007      	b.n	800649c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	0018      	movs	r0, r3
 8006490:	f000 fbb8 	bl	8006c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	0018      	movs	r0, r3
 8006498:	f000 fbc4 	bl	8006c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2208      	movs	r2, #8
 80064a6:	4013      	ands	r3, r2
 80064a8:	d021      	beq.n	80064ee <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2208      	movs	r2, #8
 80064ae:	4013      	ands	r3, r2
 80064b0:	d01d      	beq.n	80064ee <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2209      	movs	r2, #9
 80064b8:	4252      	negs	r2, r2
 80064ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2204      	movs	r2, #4
 80064c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	2203      	movs	r2, #3
 80064ca:	4013      	ands	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	0018      	movs	r0, r3
 80064d2:	f000 fb9f 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 80064d6:	e007      	b.n	80064e8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 fb92 	bl	8006c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	0018      	movs	r0, r3
 80064e4:	f000 fb9e 	bl	8006c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2210      	movs	r2, #16
 80064f2:	4013      	ands	r3, r2
 80064f4:	d022      	beq.n	800653c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2210      	movs	r2, #16
 80064fa:	4013      	ands	r3, r2
 80064fc:	d01e      	beq.n	800653c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2211      	movs	r2, #17
 8006504:	4252      	negs	r2, r2
 8006506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2208      	movs	r2, #8
 800650c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	23c0      	movs	r3, #192	@ 0xc0
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4013      	ands	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0018      	movs	r0, r3
 8006520:	f000 fb78 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 8006524:	e007      	b.n	8006536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	0018      	movs	r0, r3
 800652a:	f000 fb6b 	bl	8006c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	0018      	movs	r0, r3
 8006532:	f000 fb77 	bl	8006c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2201      	movs	r2, #1
 8006540:	4013      	ands	r3, r2
 8006542:	d00c      	beq.n	800655e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	4013      	ands	r3, r2
 800654a:	d008      	beq.n	800655e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2202      	movs	r2, #2
 8006552:	4252      	negs	r2, r2
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	0018      	movs	r0, r3
 800655a:	f7f9 ffdf 	bl	800051c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2280      	movs	r2, #128	@ 0x80
 8006562:	4013      	ands	r3, r2
 8006564:	d00c      	beq.n	8006580 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2280      	movs	r2, #128	@ 0x80
 800656a:	4013      	ands	r3, r2
 800656c:	d008      	beq.n	8006580 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2281      	movs	r2, #129	@ 0x81
 8006574:	4252      	negs	r2, r2
 8006576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0018      	movs	r0, r3
 800657c:	f000 fd56 	bl	800702c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2240      	movs	r2, #64	@ 0x40
 8006584:	4013      	ands	r3, r2
 8006586:	d00c      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2240      	movs	r2, #64	@ 0x40
 800658c:	4013      	ands	r3, r2
 800658e:	d008      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2241      	movs	r2, #65	@ 0x41
 8006596:	4252      	negs	r2, r2
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	0018      	movs	r0, r3
 800659e:	f000 fb49 	bl	8006c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2220      	movs	r2, #32
 80065a6:	4013      	ands	r3, r2
 80065a8:	d00c      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2220      	movs	r2, #32
 80065ae:	4013      	ands	r3, r2
 80065b0:	d008      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2221      	movs	r2, #33	@ 0x21
 80065b8:	4252      	negs	r2, r2
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 fd2c 	bl	800701c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065c4:	46c0      	nop			@ (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b004      	add	sp, #16
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065d6:	230f      	movs	r3, #15
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	223c      	movs	r2, #60	@ 0x3c
 80065e2:	5c9b      	ldrb	r3, [r3, r2]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_TIM_ConfigClockSource+0x20>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e2eb      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x5f8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	223c      	movs	r2, #60	@ 0x3c
 80065f0:	2101      	movs	r1, #1
 80065f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	223d      	movs	r2, #61	@ 0x3d
 80065f8:	2102      	movs	r1, #2
 80065fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	2380      	movs	r3, #128	@ 0x80
 8006602:	015b      	lsls	r3, r3, #5
 8006604:	429a      	cmp	r2, r3
 8006606:	d02b      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b70      	cmp	r3, #112	@ 0x70
 800660e:	d027      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	2380      	movs	r3, #128	@ 0x80
 8006616:	019b      	lsls	r3, r3, #6
 8006618:	429a      	cmp	r2, r3
 800661a:	d021      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b40      	cmp	r3, #64	@ 0x40
 8006622:	d01d      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b50      	cmp	r3, #80	@ 0x50
 800662a:	d019      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b60      	cmp	r3, #96	@ 0x60
 8006632:	d015      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b10      	cmp	r3, #16
 8006642:	d00d      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b20      	cmp	r3, #32
 800664a:	d009      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b30      	cmp	r3, #48	@ 0x30
 8006652:	d005      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x94>
 8006654:	4ab3      	ldr	r2, [pc, #716]	@ (8006924 <HAL_TIM_ConfigClockSource+0x358>)
 8006656:	4bb4      	ldr	r3, [pc, #720]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 8006658:	0011      	movs	r1, r2
 800665a:	0018      	movs	r0, r3
 800665c:	f7fa fa74 	bl	8000b48 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2277      	movs	r2, #119	@ 0x77
 800666c:	4393      	bics	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4aae      	ldr	r2, [pc, #696]	@ (800692c <HAL_TIM_ConfigClockSource+0x360>)
 8006674:	4013      	ands	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2280      	movs	r2, #128	@ 0x80
 8006686:	0192      	lsls	r2, r2, #6
 8006688:	4293      	cmp	r3, r2
 800668a:	d100      	bne.n	800668e <HAL_TIM_ConfigClockSource+0xc2>
 800668c:	e0de      	b.n	800684c <HAL_TIM_ConfigClockSource+0x280>
 800668e:	2280      	movs	r2, #128	@ 0x80
 8006690:	0192      	lsls	r2, r2, #6
 8006692:	4293      	cmp	r3, r2
 8006694:	d900      	bls.n	8006698 <HAL_TIM_ConfigClockSource+0xcc>
 8006696:	e284      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
 8006698:	2280      	movs	r2, #128	@ 0x80
 800669a:	0152      	lsls	r2, r2, #5
 800669c:	4293      	cmp	r3, r2
 800669e:	d028      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x126>
 80066a0:	2280      	movs	r2, #128	@ 0x80
 80066a2:	0152      	lsls	r2, r2, #5
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d900      	bls.n	80066aa <HAL_TIM_ConfigClockSource+0xde>
 80066a8:	e27b      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
 80066aa:	2b70      	cmp	r3, #112	@ 0x70
 80066ac:	d05f      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x1a2>
 80066ae:	d900      	bls.n	80066b2 <HAL_TIM_ConfigClockSource+0xe6>
 80066b0:	e277      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
 80066b2:	2b60      	cmp	r3, #96	@ 0x60
 80066b4:	d100      	bne.n	80066b8 <HAL_TIM_ConfigClockSource+0xec>
 80066b6:	e1ae      	b.n	8006a16 <HAL_TIM_ConfigClockSource+0x44a>
 80066b8:	d900      	bls.n	80066bc <HAL_TIM_ConfigClockSource+0xf0>
 80066ba:	e272      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
 80066bc:	2b50      	cmp	r3, #80	@ 0x50
 80066be:	d100      	bne.n	80066c2 <HAL_TIM_ConfigClockSource+0xf6>
 80066c0:	e158      	b.n	8006974 <HAL_TIM_ConfigClockSource+0x3a8>
 80066c2:	d900      	bls.n	80066c6 <HAL_TIM_ConfigClockSource+0xfa>
 80066c4:	e26d      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d100      	bne.n	80066cc <HAL_TIM_ConfigClockSource+0x100>
 80066ca:	e1f5      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x4ec>
 80066cc:	d900      	bls.n	80066d0 <HAL_TIM_ConfigClockSource+0x104>
 80066ce:	e268      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
 80066d0:	2b30      	cmp	r3, #48	@ 0x30
 80066d2:	d100      	bne.n	80066d6 <HAL_TIM_ConfigClockSource+0x10a>
 80066d4:	e241      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x58e>
 80066d6:	d900      	bls.n	80066da <HAL_TIM_ConfigClockSource+0x10e>
 80066d8:	e263      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d100      	bne.n	80066e0 <HAL_TIM_ConfigClockSource+0x114>
 80066de:	e23c      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x58e>
 80066e0:	d900      	bls.n	80066e4 <HAL_TIM_ConfigClockSource+0x118>
 80066e2:	e25e      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d100      	bne.n	80066ea <HAL_TIM_ConfigClockSource+0x11e>
 80066e8:	e237      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x58e>
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d100      	bne.n	80066f0 <HAL_TIM_ConfigClockSource+0x124>
 80066ee:	e234      	b.n	8006b5a <HAL_TIM_ConfigClockSource+0x58e>
 80066f0:	e257      	b.n	8006ba2 <HAL_TIM_ConfigClockSource+0x5d6>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a8e      	ldr	r2, [pc, #568]	@ (8006930 <HAL_TIM_ConfigClockSource+0x364>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d100      	bne.n	80066fe <HAL_TIM_ConfigClockSource+0x132>
 80066fc:	e256      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	2380      	movs	r3, #128	@ 0x80
 8006704:	05db      	lsls	r3, r3, #23
 8006706:	429a      	cmp	r2, r3
 8006708:	d100      	bne.n	800670c <HAL_TIM_ConfigClockSource+0x140>
 800670a:	e24f      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a88      	ldr	r2, [pc, #544]	@ (8006934 <HAL_TIM_ConfigClockSource+0x368>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d100      	bne.n	8006718 <HAL_TIM_ConfigClockSource+0x14c>
 8006716:	e249      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a86      	ldr	r2, [pc, #536]	@ (8006938 <HAL_TIM_ConfigClockSource+0x36c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d100      	bne.n	8006724 <HAL_TIM_ConfigClockSource+0x158>
 8006722:	e243      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a84      	ldr	r2, [pc, #528]	@ (800693c <HAL_TIM_ConfigClockSource+0x370>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d100      	bne.n	8006730 <HAL_TIM_ConfigClockSource+0x164>
 800672e:	e23d      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a82      	ldr	r2, [pc, #520]	@ (8006940 <HAL_TIM_ConfigClockSource+0x374>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d100      	bne.n	800673c <HAL_TIM_ConfigClockSource+0x170>
 800673a:	e237      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a80      	ldr	r2, [pc, #512]	@ (8006944 <HAL_TIM_ConfigClockSource+0x378>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d100      	bne.n	8006748 <HAL_TIM_ConfigClockSource+0x17c>
 8006746:	e231      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a7e      	ldr	r2, [pc, #504]	@ (8006948 <HAL_TIM_ConfigClockSource+0x37c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d100      	bne.n	8006754 <HAL_TIM_ConfigClockSource+0x188>
 8006752:	e22b      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a7c      	ldr	r2, [pc, #496]	@ (800694c <HAL_TIM_ConfigClockSource+0x380>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d100      	bne.n	8006760 <HAL_TIM_ConfigClockSource+0x194>
 800675e:	e225      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
 8006760:	4a7b      	ldr	r2, [pc, #492]	@ (8006950 <HAL_TIM_ConfigClockSource+0x384>)
 8006762:	4b71      	ldr	r3, [pc, #452]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 8006764:	0011      	movs	r1, r2
 8006766:	0018      	movs	r0, r3
 8006768:	f7fa f9ee 	bl	8000b48 <assert_failed>
      break;
 800676c:	e21e      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x5e0>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a6f      	ldr	r2, [pc, #444]	@ (8006930 <HAL_TIM_ConfigClockSource+0x364>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d010      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x1ce>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	2380      	movs	r3, #128	@ 0x80
 800677e:	05db      	lsls	r3, r3, #23
 8006780:	429a      	cmp	r2, r3
 8006782:	d00a      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x1ce>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a6a      	ldr	r2, [pc, #424]	@ (8006934 <HAL_TIM_ConfigClockSource+0x368>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d005      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x1ce>
 800678e:	4a71      	ldr	r2, [pc, #452]	@ (8006954 <HAL_TIM_ConfigClockSource+0x388>)
 8006790:	4b65      	ldr	r3, [pc, #404]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 8006792:	0011      	movs	r1, r2
 8006794:	0018      	movs	r0, r3
 8006796:	f7fa f9d7 	bl	8000b48 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x206>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	015b      	lsls	r3, r3, #5
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d011      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x206>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	2380      	movs	r3, #128	@ 0x80
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d00b      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x206>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	23c0      	movs	r3, #192	@ 0xc0
 80067c0:	019b      	lsls	r3, r3, #6
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d005      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x206>
 80067c6:	4a64      	ldr	r2, [pc, #400]	@ (8006958 <HAL_TIM_ConfigClockSource+0x38c>)
 80067c8:	4b57      	ldr	r3, [pc, #348]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 80067ca:	0011      	movs	r1, r2
 80067cc:	0018      	movs	r0, r3
 80067ce:	f7fa f9bb 	bl	8000b48 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	2380      	movs	r3, #128	@ 0x80
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	429a      	cmp	r2, r3
 80067dc:	d015      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x23e>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d011      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x23e>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00d      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x23e>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d009      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x23e>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b0a      	cmp	r3, #10
 80067fc:	d005      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x23e>
 80067fe:	4a57      	ldr	r2, [pc, #348]	@ (800695c <HAL_TIM_ConfigClockSource+0x390>)
 8006800:	4b49      	ldr	r3, [pc, #292]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 8006802:	0011      	movs	r1, r2
 8006804:	0018      	movs	r0, r3
 8006806:	f7fa f99f 	bl	8000b48 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b0f      	cmp	r3, #15
 8006810:	d905      	bls.n	800681e <HAL_TIM_ConfigClockSource+0x252>
 8006812:	4a53      	ldr	r2, [pc, #332]	@ (8006960 <HAL_TIM_ConfigClockSource+0x394>)
 8006814:	4b44      	ldr	r3, [pc, #272]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 8006816:	0011      	movs	r1, r2
 8006818:	0018      	movs	r0, r3
 800681a:	f7fa f995 	bl	8000b48 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800682e:	f000 fb11 	bl	8006e54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2277      	movs	r2, #119	@ 0x77
 800683e:	4313      	orrs	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	609a      	str	r2, [r3, #8]
      break;
 800684a:	e1b0      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x5e2>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a37      	ldr	r2, [pc, #220]	@ (8006930 <HAL_TIM_ConfigClockSource+0x364>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d010      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0x2ac>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	2380      	movs	r3, #128	@ 0x80
 800685c:	05db      	lsls	r3, r3, #23
 800685e:	429a      	cmp	r2, r3
 8006860:	d00a      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0x2ac>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a33      	ldr	r2, [pc, #204]	@ (8006934 <HAL_TIM_ConfigClockSource+0x368>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d005      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0x2ac>
 800686c:	4a3d      	ldr	r2, [pc, #244]	@ (8006964 <HAL_TIM_ConfigClockSource+0x398>)
 800686e:	4b2e      	ldr	r3, [pc, #184]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 8006870:	0011      	movs	r1, r2
 8006872:	0018      	movs	r0, r3
 8006874:	f7fa f968 	bl	8000b48 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d017      	beq.n	80068b0 <HAL_TIM_ConfigClockSource+0x2e4>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	2380      	movs	r3, #128	@ 0x80
 8006886:	015b      	lsls	r3, r3, #5
 8006888:	429a      	cmp	r2, r3
 800688a:	d011      	beq.n	80068b0 <HAL_TIM_ConfigClockSource+0x2e4>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	2380      	movs	r3, #128	@ 0x80
 8006892:	019b      	lsls	r3, r3, #6
 8006894:	429a      	cmp	r2, r3
 8006896:	d00b      	beq.n	80068b0 <HAL_TIM_ConfigClockSource+0x2e4>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	23c0      	movs	r3, #192	@ 0xc0
 800689e:	019b      	lsls	r3, r3, #6
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d005      	beq.n	80068b0 <HAL_TIM_ConfigClockSource+0x2e4>
 80068a4:	4a30      	ldr	r2, [pc, #192]	@ (8006968 <HAL_TIM_ConfigClockSource+0x39c>)
 80068a6:	4b20      	ldr	r3, [pc, #128]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 80068a8:	0011      	movs	r1, r2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f7fa f94c 	bl	8000b48 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	2380      	movs	r3, #128	@ 0x80
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d015      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x31c>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d011      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x31c>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00d      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x31c>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d009      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x31c>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b0a      	cmp	r3, #10
 80068da:	d005      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x31c>
 80068dc:	4a23      	ldr	r2, [pc, #140]	@ (800696c <HAL_TIM_ConfigClockSource+0x3a0>)
 80068de:	4b12      	ldr	r3, [pc, #72]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 80068e0:	0011      	movs	r1, r2
 80068e2:	0018      	movs	r0, r3
 80068e4:	f7fa f930 	bl	8000b48 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b0f      	cmp	r3, #15
 80068ee:	d905      	bls.n	80068fc <HAL_TIM_ConfigClockSource+0x330>
 80068f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006970 <HAL_TIM_ConfigClockSource+0x3a4>)
 80068f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <HAL_TIM_ConfigClockSource+0x35c>)
 80068f4:	0011      	movs	r1, r2
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7fa f926 	bl	8000b48 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800690c:	f000 faa2 	bl	8006e54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2180      	movs	r1, #128	@ 0x80
 800691c:	01c9      	lsls	r1, r1, #7
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]
      break;
 8006922:	e144      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x5e2>
 8006924:	000014cc 	.word	0x000014cc
 8006928:	0800c218 	.word	0x0800c218
 800692c:	ffff00ff 	.word	0xffff00ff
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40000400 	.word	0x40000400
 8006938:	40001000 	.word	0x40001000
 800693c:	40001400 	.word	0x40001400
 8006940:	40002000 	.word	0x40002000
 8006944:	40014000 	.word	0x40014000
 8006948:	40014400 	.word	0x40014400
 800694c:	40014800 	.word	0x40014800
 8006950:	000014d8 	.word	0x000014d8
 8006954:	000014df 	.word	0x000014df
 8006958:	000014e2 	.word	0x000014e2
 800695c:	000014e3 	.word	0x000014e3
 8006960:	000014e4 	.word	0x000014e4
 8006964:	000014f7 	.word	0x000014f7
 8006968:	000014fa 	.word	0x000014fa
 800696c:	000014fb 	.word	0x000014fb
 8006970:	000014fc 	.word	0x000014fc
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a94      	ldr	r2, [pc, #592]	@ (8006bcc <HAL_TIM_ConfigClockSource+0x600>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d015      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x3de>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	2380      	movs	r3, #128	@ 0x80
 8006984:	05db      	lsls	r3, r3, #23
 8006986:	429a      	cmp	r2, r3
 8006988:	d00f      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x3de>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a90      	ldr	r2, [pc, #576]	@ (8006bd0 <HAL_TIM_ConfigClockSource+0x604>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00a      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x3de>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a8e      	ldr	r2, [pc, #568]	@ (8006bd4 <HAL_TIM_ConfigClockSource+0x608>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d005      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x3de>
 800699e:	4a8e      	ldr	r2, [pc, #568]	@ (8006bd8 <HAL_TIM_ConfigClockSource+0x60c>)
 80069a0:	4b8e      	ldr	r3, [pc, #568]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 80069a2:	0011      	movs	r1, r2
 80069a4:	0018      	movs	r0, r3
 80069a6:	f7fa f8cf 	bl	8000b48 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	2380      	movs	r3, #128	@ 0x80
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d015      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x416>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d011      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x416>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00d      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x416>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d009      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x416>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b0a      	cmp	r3, #10
 80069d4:	d005      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x416>
 80069d6:	4a82      	ldr	r2, [pc, #520]	@ (8006be0 <HAL_TIM_ConfigClockSource+0x614>)
 80069d8:	4b80      	ldr	r3, [pc, #512]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 80069da:	0011      	movs	r1, r2
 80069dc:	0018      	movs	r0, r3
 80069de:	f7fa f8b3 	bl	8000b48 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d905      	bls.n	80069f6 <HAL_TIM_ConfigClockSource+0x42a>
 80069ea:	4a7e      	ldr	r2, [pc, #504]	@ (8006be4 <HAL_TIM_ConfigClockSource+0x618>)
 80069ec:	4b7b      	ldr	r3, [pc, #492]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7fa f8a9 	bl	8000b48 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a02:	001a      	movs	r2, r3
 8006a04:	f000 f9ac 	bl	8006d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2150      	movs	r1, #80	@ 0x50
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f000 fa06 	bl	8006e20 <TIM_ITRx_SetConfig>
      break;
 8006a14:	e0cb      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x5e2>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a6c      	ldr	r2, [pc, #432]	@ (8006bcc <HAL_TIM_ConfigClockSource+0x600>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d015      	beq.n	8006a4c <HAL_TIM_ConfigClockSource+0x480>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	2380      	movs	r3, #128	@ 0x80
 8006a26:	05db      	lsls	r3, r3, #23
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d00f      	beq.n	8006a4c <HAL_TIM_ConfigClockSource+0x480>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a67      	ldr	r2, [pc, #412]	@ (8006bd0 <HAL_TIM_ConfigClockSource+0x604>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00a      	beq.n	8006a4c <HAL_TIM_ConfigClockSource+0x480>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a66      	ldr	r2, [pc, #408]	@ (8006bd4 <HAL_TIM_ConfigClockSource+0x608>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d005      	beq.n	8006a4c <HAL_TIM_ConfigClockSource+0x480>
 8006a40:	4a69      	ldr	r2, [pc, #420]	@ (8006be8 <HAL_TIM_ConfigClockSource+0x61c>)
 8006a42:	4b66      	ldr	r3, [pc, #408]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 8006a44:	0011      	movs	r1, r2
 8006a46:	0018      	movs	r0, r3
 8006a48:	f7fa f87e 	bl	8000b48 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	2380      	movs	r3, #128	@ 0x80
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d015      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x4b8>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d011      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x4b8>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00d      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x4b8>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d009      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x4b8>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b0a      	cmp	r3, #10
 8006a76:	d005      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x4b8>
 8006a78:	4a5c      	ldr	r2, [pc, #368]	@ (8006bec <HAL_TIM_ConfigClockSource+0x620>)
 8006a7a:	4b58      	ldr	r3, [pc, #352]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 8006a7c:	0011      	movs	r1, r2
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f7fa f862 	bl	8000b48 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b0f      	cmp	r3, #15
 8006a8a:	d905      	bls.n	8006a98 <HAL_TIM_ConfigClockSource+0x4cc>
 8006a8c:	4a58      	ldr	r2, [pc, #352]	@ (8006bf0 <HAL_TIM_ConfigClockSource+0x624>)
 8006a8e:	4b53      	ldr	r3, [pc, #332]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 8006a90:	0011      	movs	r1, r2
 8006a92:	0018      	movs	r0, r3
 8006a94:	f7fa f858 	bl	8000b48 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aa4:	001a      	movs	r2, r3
 8006aa6:	f000 f989 	bl	8006dbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2160      	movs	r1, #96	@ 0x60
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f000 f9b5 	bl	8006e20 <TIM_ITRx_SetConfig>
      break;
 8006ab6:	e07a      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x5e2>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a43      	ldr	r2, [pc, #268]	@ (8006bcc <HAL_TIM_ConfigClockSource+0x600>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d015      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x522>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	2380      	movs	r3, #128	@ 0x80
 8006ac8:	05db      	lsls	r3, r3, #23
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d00f      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x522>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a3f      	ldr	r2, [pc, #252]	@ (8006bd0 <HAL_TIM_ConfigClockSource+0x604>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00a      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x522>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a3d      	ldr	r2, [pc, #244]	@ (8006bd4 <HAL_TIM_ConfigClockSource+0x608>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d005      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x522>
 8006ae2:	4a44      	ldr	r2, [pc, #272]	@ (8006bf4 <HAL_TIM_ConfigClockSource+0x628>)
 8006ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 8006ae6:	0011      	movs	r1, r2
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7fa f82d 	bl	8000b48 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	2380      	movs	r3, #128	@ 0x80
 8006af4:	021b      	lsls	r3, r3, #8
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d015      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x55a>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d011      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x55a>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x55a>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d009      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x55a>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b0a      	cmp	r3, #10
 8006b18:	d005      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x55a>
 8006b1a:	4a37      	ldr	r2, [pc, #220]	@ (8006bf8 <HAL_TIM_ConfigClockSource+0x62c>)
 8006b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 8006b1e:	0011      	movs	r1, r2
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7fa f811 	bl	8000b48 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d905      	bls.n	8006b3a <HAL_TIM_ConfigClockSource+0x56e>
 8006b2e:	4a33      	ldr	r2, [pc, #204]	@ (8006bfc <HAL_TIM_ConfigClockSource+0x630>)
 8006b30:	4b2a      	ldr	r3, [pc, #168]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 8006b32:	0011      	movs	r1, r2
 8006b34:	0018      	movs	r0, r3
 8006b36:	f7fa f807 	bl	8000b48 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b46:	001a      	movs	r2, r3
 8006b48:	f000 f90a 	bl	8006d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2140      	movs	r1, #64	@ 0x40
 8006b52:	0018      	movs	r0, r3
 8006b54:	f000 f964 	bl	8006e20 <TIM_ITRx_SetConfig>
      break;
 8006b58:	e029      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x5e2>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006bcc <HAL_TIM_ConfigClockSource+0x600>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d015      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x5c4>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	2380      	movs	r3, #128	@ 0x80
 8006b6a:	05db      	lsls	r3, r3, #23
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d00f      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x5c4>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a16      	ldr	r2, [pc, #88]	@ (8006bd0 <HAL_TIM_ConfigClockSource+0x604>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00a      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x5c4>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a15      	ldr	r2, [pc, #84]	@ (8006bd4 <HAL_TIM_ConfigClockSource+0x608>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d005      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x5c4>
 8006b84:	4a1e      	ldr	r2, [pc, #120]	@ (8006c00 <HAL_TIM_ConfigClockSource+0x634>)
 8006b86:	4b15      	ldr	r3, [pc, #84]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x610>)
 8006b88:	0011      	movs	r1, r2
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f7f9 ffdc 	bl	8000b48 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	0019      	movs	r1, r3
 8006b9a:	0010      	movs	r0, r2
 8006b9c:	f000 f940 	bl	8006e20 <TIM_ITRx_SetConfig>
      break;
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x5e2>
    }

    default:
      status = HAL_ERROR;
 8006ba2:	230f      	movs	r3, #15
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	701a      	strb	r2, [r3, #0]
      break;
 8006baa:	e000      	b.n	8006bae <HAL_TIM_ConfigClockSource+0x5e2>
      break;
 8006bac:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	223d      	movs	r2, #61	@ 0x3d
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	223c      	movs	r2, #60	@ 0x3c
 8006bba:	2100      	movs	r1, #0
 8006bbc:	5499      	strb	r1, [r3, r2]

  return status;
 8006bbe:	230f      	movs	r3, #15
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	781b      	ldrb	r3, [r3, #0]
}
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b004      	add	sp, #16
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	0000150b 	.word	0x0000150b
 8006bdc:	0800c218 	.word	0x0800c218
 8006be0:	0000150e 	.word	0x0000150e
 8006be4:	0000150f 	.word	0x0000150f
 8006be8:	0000151b 	.word	0x0000151b
 8006bec:	0000151e 	.word	0x0000151e
 8006bf0:	0000151f 	.word	0x0000151f
 8006bf4:	0000152b 	.word	0x0000152b
 8006bf8:	0000152e 	.word	0x0000152e
 8006bfc:	0000152f 	.word	0x0000152f
 8006c00:	0000153e 	.word	0x0000153e

08006c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c0c:	46c0      	nop			@ (mov r8, r8)
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b002      	add	sp, #8
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c1c:	46c0      	nop			@ (mov r8, r8)
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b002      	add	sp, #8
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c2c:	46c0      	nop			@ (mov r8, r8)
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b002      	add	sp, #8
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c3c:	46c0      	nop			@ (mov r8, r8)
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b002      	add	sp, #8
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a3b      	ldr	r2, [pc, #236]	@ (8006d44 <TIM_Base_SetConfig+0x100>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d008      	beq.n	8006c6e <TIM_Base_SetConfig+0x2a>
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	2380      	movs	r3, #128	@ 0x80
 8006c60:	05db      	lsls	r3, r3, #23
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d003      	beq.n	8006c6e <TIM_Base_SetConfig+0x2a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a37      	ldr	r2, [pc, #220]	@ (8006d48 <TIM_Base_SetConfig+0x104>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d108      	bne.n	8006c80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2270      	movs	r2, #112	@ 0x70
 8006c72:	4393      	bics	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a30      	ldr	r2, [pc, #192]	@ (8006d44 <TIM_Base_SetConfig+0x100>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d018      	beq.n	8006cba <TIM_Base_SetConfig+0x76>
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	2380      	movs	r3, #128	@ 0x80
 8006c8c:	05db      	lsls	r3, r3, #23
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d013      	beq.n	8006cba <TIM_Base_SetConfig+0x76>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2c      	ldr	r2, [pc, #176]	@ (8006d48 <TIM_Base_SetConfig+0x104>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00f      	beq.n	8006cba <TIM_Base_SetConfig+0x76>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d4c <TIM_Base_SetConfig+0x108>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <TIM_Base_SetConfig+0x76>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d50 <TIM_Base_SetConfig+0x10c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d007      	beq.n	8006cba <TIM_Base_SetConfig+0x76>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a29      	ldr	r2, [pc, #164]	@ (8006d54 <TIM_Base_SetConfig+0x110>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_Base_SetConfig+0x76>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a28      	ldr	r2, [pc, #160]	@ (8006d58 <TIM_Base_SetConfig+0x114>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d108      	bne.n	8006ccc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a27      	ldr	r2, [pc, #156]	@ (8006d5c <TIM_Base_SetConfig+0x118>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2280      	movs	r2, #128	@ 0x80
 8006cd0:	4393      	bics	r3, r2
 8006cd2:	001a      	movs	r2, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a13      	ldr	r2, [pc, #76]	@ (8006d44 <TIM_Base_SetConfig+0x100>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_Base_SetConfig+0xce>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a14      	ldr	r2, [pc, #80]	@ (8006d50 <TIM_Base_SetConfig+0x10c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_Base_SetConfig+0xce>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a13      	ldr	r2, [pc, #76]	@ (8006d54 <TIM_Base_SetConfig+0x110>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_Base_SetConfig+0xce>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a12      	ldr	r2, [pc, #72]	@ (8006d58 <TIM_Base_SetConfig+0x114>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d103      	bne.n	8006d1a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2201      	movs	r2, #1
 8006d26:	4013      	ands	r3, r2
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d106      	bne.n	8006d3a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2201      	movs	r2, #1
 8006d32:	4393      	bics	r3, r2
 8006d34:	001a      	movs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	611a      	str	r2, [r3, #16]
  }
}
 8006d3a:	46c0      	nop			@ (mov r8, r8)
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	b004      	add	sp, #16
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	46c0      	nop			@ (mov r8, r8)
 8006d44:	40012c00 	.word	0x40012c00
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40002000 	.word	0x40002000
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800
 8006d5c:	fffffcff 	.word	0xfffffcff

08006d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	2201      	movs	r2, #1
 8006d78:	4393      	bics	r3, r2
 8006d7a:	001a      	movs	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	22f0      	movs	r2, #240	@ 0xf0
 8006d8a:	4393      	bics	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	220a      	movs	r2, #10
 8006d9c:	4393      	bics	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	621a      	str	r2, [r3, #32]
}
 8006db4:	46c0      	nop			@ (mov r8, r8)
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b006      	add	sp, #24
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	2210      	movs	r2, #16
 8006dd4:	4393      	bics	r3, r2
 8006dd6:	001a      	movs	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	4a0d      	ldr	r2, [pc, #52]	@ (8006e1c <TIM_TI2_ConfigInputStage+0x60>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	031b      	lsls	r3, r3, #12
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	22a0      	movs	r2, #160	@ 0xa0
 8006df8:	4393      	bics	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	621a      	str	r2, [r3, #32]
}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b006      	add	sp, #24
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	46c0      	nop			@ (mov r8, r8)
 8006e1c:	ffff0fff 	.word	0xffff0fff

08006e20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2270      	movs	r2, #112	@ 0x70
 8006e34:	4393      	bics	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	2207      	movs	r2, #7
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	609a      	str	r2, [r3, #8]
}
 8006e4a:	46c0      	nop			@ (mov r8, r8)
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b004      	add	sp, #16
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	4a09      	ldr	r2, [pc, #36]	@ (8006e90 <TIM_ETR_SetConfig+0x3c>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	021a      	lsls	r2, r3, #8
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	609a      	str	r2, [r3, #8]
}
 8006e88:	46c0      	nop			@ (mov r8, r8)
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	b006      	add	sp, #24
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	ffff00ff 	.word	0xffff00ff

08006e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a55      	ldr	r2, [pc, #340]	@ (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d01f      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	2380      	movs	r3, #128	@ 0x80
 8006eae:	05db      	lsls	r3, r3, #23
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d019      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a50      	ldr	r2, [pc, #320]	@ (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d014      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a4f      	ldr	r2, [pc, #316]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00f      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00a      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a4c      	ldr	r2, [pc, #304]	@ (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d005      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006edc:	4a4b      	ldr	r2, [pc, #300]	@ (800700c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006ede:	4b4c      	ldr	r3, [pc, #304]	@ (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006ee0:	0011      	movs	r1, r2
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f7f9 fe30 	bl	8000b48 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d021      	beq.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d01d      	beq.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d019      	beq.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b30      	cmp	r3, #48	@ 0x30
 8006f06:	d015      	beq.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b40      	cmp	r3, #64	@ 0x40
 8006f0e:	d011      	beq.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b50      	cmp	r3, #80	@ 0x50
 8006f16:	d00d      	beq.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b60      	cmp	r3, #96	@ 0x60
 8006f1e:	d009      	beq.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b70      	cmp	r3, #112	@ 0x70
 8006f26:	d005      	beq.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006f28:	4a3a      	ldr	r2, [pc, #232]	@ (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006f2a:	4b39      	ldr	r3, [pc, #228]	@ (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006f2c:	0011      	movs	r1, r2
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f7f9 fe0a 	bl	8000b48 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b80      	cmp	r3, #128	@ 0x80
 8006f3a:	d009      	beq.n	8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006f44:	4a34      	ldr	r2, [pc, #208]	@ (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006f46:	4b32      	ldr	r3, [pc, #200]	@ (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006f48:	0011      	movs	r1, r2
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f7f9 fdfc 	bl	8000b48 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	223c      	movs	r2, #60	@ 0x3c
 8006f54:	5c9b      	ldrb	r3, [r3, r2]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xca>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e047      	b.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	223c      	movs	r2, #60	@ 0x3c
 8006f62:	2101      	movs	r1, #1
 8006f64:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	223d      	movs	r2, #61	@ 0x3d
 8006f6a:	2102      	movs	r1, #2
 8006f6c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2270      	movs	r2, #112	@ 0x70
 8006f82:	4393      	bics	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a16      	ldr	r2, [pc, #88]	@ (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00f      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	2380      	movs	r3, #128	@ 0x80
 8006fa8:	05db      	lsls	r3, r3, #23
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d009      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a12      	ldr	r2, [pc, #72]	@ (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a12      	ldr	r2, [pc, #72]	@ (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d10c      	bne.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2280      	movs	r2, #128	@ 0x80
 8006fc6:	4393      	bics	r3, r2
 8006fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	223d      	movs	r2, #61	@ 0x3d
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	223c      	movs	r2, #60	@ 0x3c
 8006fe8:	2100      	movs	r1, #0
 8006fea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	0018      	movs	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	b004      	add	sp, #16
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	46c0      	nop			@ (mov r8, r8)
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40001000 	.word	0x40001000
 8007004:	40001400 	.word	0x40001400
 8007008:	40014000 	.word	0x40014000
 800700c:	000007aa 	.word	0x000007aa
 8007010:	0800c250 	.word	0x0800c250
 8007014:	000007ab 	.word	0x000007ab
 8007018:	000007ac 	.word	0x000007ac

0800701c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007024:	46c0      	nop			@ (mov r8, r8)
 8007026:	46bd      	mov	sp, r7
 8007028:	b002      	add	sp, #8
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007034:	46c0      	nop			@ (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b002      	add	sp, #8
 800703a:	bd80      	pop	{r7, pc}

0800703c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2244      	movs	r2, #68	@ 0x44
 8007048:	2100      	movs	r1, #0
 800704a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800704c:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <USB_EnableGlobalInt+0x28>)
 800704e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	b299      	uxth	r1, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2240      	movs	r2, #64	@ 0x40
 8007058:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	0018      	movs	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	b004      	add	sp, #16
 8007062:	bd80      	pop	{r7, pc}
 8007064:	0000bf80 	.word	0x0000bf80

08007068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007070:	4b09      	ldr	r3, [pc, #36]	@ (8007098 <USB_DisableGlobalInt+0x30>)
 8007072:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2240      	movs	r2, #64	@ 0x40
 8007078:	5a9b      	ldrh	r3, [r3, r2]
 800707a:	b29b      	uxth	r3, r3
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	b292      	uxth	r2, r2
 8007080:	43d2      	mvns	r2, r2
 8007082:	b292      	uxth	r2, r2
 8007084:	4013      	ands	r3, r2
 8007086:	b299      	uxth	r1, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2240      	movs	r2, #64	@ 0x40
 800708c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	0018      	movs	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	b004      	add	sp, #16
 8007096:	bd80      	pop	{r7, pc}
 8007098:	0000bf80 	.word	0x0000bf80

0800709c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	1d3b      	adds	r3, r7, #4
 80070a6:	6019      	str	r1, [r3, #0]
 80070a8:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2240      	movs	r2, #64	@ 0x40
 80070ae:	2101      	movs	r1, #1
 80070b0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2240      	movs	r2, #64	@ 0x40
 80070b6:	2100      	movs	r1, #0
 80070b8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2244      	movs	r2, #68	@ 0x44
 80070be:	2100      	movs	r1, #0
 80070c0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2250      	movs	r2, #80	@ 0x50
 80070c6:	2100      	movs	r1, #0
 80070c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	0018      	movs	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b004      	add	sp, #16
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b09c      	sub	sp, #112	@ 0x70
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80070de:	236f      	movs	r3, #111	@ 0x6f
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	18d3      	adds	r3, r2, r3
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	236c      	movs	r3, #108	@ 0x6c
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	49a1      	ldr	r1, [pc, #644]	@ (8007380 <USB_ActivateEndpoint+0x2ac>)
 80070fa:	400a      	ands	r2, r1
 80070fc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	78db      	ldrb	r3, [r3, #3]
 8007102:	2b03      	cmp	r3, #3
 8007104:	d017      	beq.n	8007136 <USB_ActivateEndpoint+0x62>
 8007106:	dc28      	bgt.n	800715a <USB_ActivateEndpoint+0x86>
 8007108:	2b02      	cmp	r3, #2
 800710a:	d00e      	beq.n	800712a <USB_ActivateEndpoint+0x56>
 800710c:	dc25      	bgt.n	800715a <USB_ActivateEndpoint+0x86>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <USB_ActivateEndpoint+0x44>
 8007112:	2b01      	cmp	r3, #1
 8007114:	d018      	beq.n	8007148 <USB_ActivateEndpoint+0x74>
 8007116:	e020      	b.n	800715a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007118:	226c      	movs	r2, #108	@ 0x6c
 800711a:	18bb      	adds	r3, r7, r2
 800711c:	18ba      	adds	r2, r7, r2
 800711e:	8812      	ldrh	r2, [r2, #0]
 8007120:	2180      	movs	r1, #128	@ 0x80
 8007122:	0089      	lsls	r1, r1, #2
 8007124:	430a      	orrs	r2, r1
 8007126:	801a      	strh	r2, [r3, #0]
      break;
 8007128:	e01c      	b.n	8007164 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800712a:	226c      	movs	r2, #108	@ 0x6c
 800712c:	18bb      	adds	r3, r7, r2
 800712e:	18ba      	adds	r2, r7, r2
 8007130:	8812      	ldrh	r2, [r2, #0]
 8007132:	801a      	strh	r2, [r3, #0]
      break;
 8007134:	e016      	b.n	8007164 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007136:	226c      	movs	r2, #108	@ 0x6c
 8007138:	18bb      	adds	r3, r7, r2
 800713a:	18ba      	adds	r2, r7, r2
 800713c:	8812      	ldrh	r2, [r2, #0]
 800713e:	21c0      	movs	r1, #192	@ 0xc0
 8007140:	00c9      	lsls	r1, r1, #3
 8007142:	430a      	orrs	r2, r1
 8007144:	801a      	strh	r2, [r3, #0]
      break;
 8007146:	e00d      	b.n	8007164 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007148:	226c      	movs	r2, #108	@ 0x6c
 800714a:	18bb      	adds	r3, r7, r2
 800714c:	18ba      	adds	r2, r7, r2
 800714e:	8812      	ldrh	r2, [r2, #0]
 8007150:	2180      	movs	r1, #128	@ 0x80
 8007152:	00c9      	lsls	r1, r1, #3
 8007154:	430a      	orrs	r2, r1
 8007156:	801a      	strh	r2, [r3, #0]
      break;
 8007158:	e004      	b.n	8007164 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800715a:	236f      	movs	r3, #111	@ 0x6f
 800715c:	18fb      	adds	r3, r7, r3
 800715e:	2201      	movs	r2, #1
 8007160:	701a      	strb	r2, [r3, #0]
      break;
 8007162:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	18d3      	adds	r3, r2, r3
 800716e:	226c      	movs	r2, #108	@ 0x6c
 8007170:	18ba      	adds	r2, r7, r2
 8007172:	8812      	ldrh	r2, [r2, #0]
 8007174:	4983      	ldr	r1, [pc, #524]	@ (8007384 <USB_ActivateEndpoint+0x2b0>)
 8007176:	430a      	orrs	r2, r1
 8007178:	b292      	uxth	r2, r2
 800717a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	18d3      	adds	r3, r2, r3
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	b21b      	sxth	r3, r3
 800718c:	4a7e      	ldr	r2, [pc, #504]	@ (8007388 <USB_ActivateEndpoint+0x2b4>)
 800718e:	4013      	ands	r3, r2
 8007190:	b21a      	sxth	r2, r3
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	b21b      	sxth	r3, r3
 8007198:	4313      	orrs	r3, r2
 800719a:	b21a      	sxth	r2, r3
 800719c:	2166      	movs	r1, #102	@ 0x66
 800719e:	187b      	adds	r3, r7, r1
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	18d3      	adds	r3, r2, r3
 80071ac:	187a      	adds	r2, r7, r1
 80071ae:	8812      	ldrh	r2, [r2, #0]
 80071b0:	4974      	ldr	r1, [pc, #464]	@ (8007384 <USB_ActivateEndpoint+0x2b0>)
 80071b2:	430a      	orrs	r2, r1
 80071b4:	b292      	uxth	r2, r2
 80071b6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	7b1b      	ldrb	r3, [r3, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d000      	beq.n	80071c2 <USB_ActivateEndpoint+0xee>
 80071c0:	e177      	b.n	80074b2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d100      	bne.n	80071cc <USB_ActivateEndpoint+0xf8>
 80071ca:	e07a      	b.n	80072c2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2250      	movs	r2, #80	@ 0x50
 80071d4:	5a9b      	ldrh	r3, [r3, r2]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	001a      	movs	r2, r3
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	189b      	adds	r3, r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	00da      	lsls	r2, r3, #3
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	18d3      	adds	r3, r2, r3
 80071ea:	2280      	movs	r2, #128	@ 0x80
 80071ec:	00d2      	lsls	r2, r2, #3
 80071ee:	4694      	mov	ip, r2
 80071f0:	4463      	add	r3, ip
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	88db      	ldrh	r3, [r3, #6]
 80071f8:	085b      	lsrs	r3, r3, #1
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	18db      	adds	r3, r3, r3
 80071fe:	b29a      	uxth	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	18d2      	adds	r2, r2, r3
 800720e:	2112      	movs	r1, #18
 8007210:	187b      	adds	r3, r7, r1
 8007212:	8812      	ldrh	r2, [r2, #0]
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	187b      	adds	r3, r7, r1
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	2240      	movs	r2, #64	@ 0x40
 800721c:	4013      	ands	r3, r2
 800721e:	d016      	beq.n	800724e <USB_ActivateEndpoint+0x17a>
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	18d3      	adds	r3, r2, r3
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29a      	uxth	r2, r3
 800722e:	2010      	movs	r0, #16
 8007230:	183b      	adds	r3, r7, r0
 8007232:	4955      	ldr	r1, [pc, #340]	@ (8007388 <USB_ActivateEndpoint+0x2b4>)
 8007234:	400a      	ands	r2, r1
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	18d3      	adds	r3, r2, r3
 8007242:	183a      	adds	r2, r7, r0
 8007244:	8812      	ldrh	r2, [r2, #0]
 8007246:	4951      	ldr	r1, [pc, #324]	@ (800738c <USB_ActivateEndpoint+0x2b8>)
 8007248:	430a      	orrs	r2, r1
 800724a:	b292      	uxth	r2, r2
 800724c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	78db      	ldrb	r3, [r3, #3]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d01d      	beq.n	8007292 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	18d3      	adds	r3, r2, r3
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29a      	uxth	r2, r3
 8007264:	200c      	movs	r0, #12
 8007266:	183b      	adds	r3, r7, r0
 8007268:	4949      	ldr	r1, [pc, #292]	@ (8007390 <USB_ActivateEndpoint+0x2bc>)
 800726a:	400a      	ands	r2, r1
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	183b      	adds	r3, r7, r0
 8007270:	183a      	adds	r2, r7, r0
 8007272:	8812      	ldrh	r2, [r2, #0]
 8007274:	2120      	movs	r1, #32
 8007276:	404a      	eors	r2, r1
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	18d3      	adds	r3, r2, r3
 8007284:	183a      	adds	r2, r7, r0
 8007286:	8812      	ldrh	r2, [r2, #0]
 8007288:	493e      	ldr	r1, [pc, #248]	@ (8007384 <USB_ActivateEndpoint+0x2b0>)
 800728a:	430a      	orrs	r2, r1
 800728c:	b292      	uxth	r2, r2
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e2b5      	b.n	80077fe <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	18d3      	adds	r3, r2, r3
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	200e      	movs	r0, #14
 80072a2:	183b      	adds	r3, r7, r0
 80072a4:	493a      	ldr	r1, [pc, #232]	@ (8007390 <USB_ActivateEndpoint+0x2bc>)
 80072a6:	400a      	ands	r2, r1
 80072a8:	801a      	strh	r2, [r3, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	18d3      	adds	r3, r2, r3
 80072b4:	183a      	adds	r2, r7, r0
 80072b6:	8812      	ldrh	r2, [r2, #0]
 80072b8:	4932      	ldr	r1, [pc, #200]	@ (8007384 <USB_ActivateEndpoint+0x2b0>)
 80072ba:	430a      	orrs	r2, r1
 80072bc:	b292      	uxth	r2, r2
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e29d      	b.n	80077fe <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2250      	movs	r2, #80	@ 0x50
 80072ca:	5a9b      	ldrh	r3, [r3, r2]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	001a      	movs	r2, r3
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	189b      	adds	r3, r3, r2
 80072d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	00da      	lsls	r2, r3, #3
 80072dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072de:	18d3      	adds	r3, r2, r3
 80072e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007394 <USB_ActivateEndpoint+0x2c0>)
 80072e2:	4694      	mov	ip, r2
 80072e4:	4463      	add	r3, ip
 80072e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88db      	ldrh	r3, [r3, #6]
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	18db      	adds	r3, r3, r3
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2250      	movs	r2, #80	@ 0x50
 8007300:	5a9b      	ldrh	r3, [r3, r2]
 8007302:	b29b      	uxth	r3, r3
 8007304:	001a      	movs	r2, r3
 8007306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007308:	189b      	adds	r3, r3, r2
 800730a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	00da      	lsls	r2, r3, #3
 8007312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007314:	18d3      	adds	r3, r2, r3
 8007316:	4a20      	ldr	r2, [pc, #128]	@ (8007398 <USB_ActivateEndpoint+0x2c4>)
 8007318:	4694      	mov	ip, r2
 800731a:	4463      	add	r3, ip
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	059b      	lsls	r3, r3, #22
 8007326:	0d9b      	lsrs	r3, r3, #22
 8007328:	b29a      	uxth	r2, r3
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d108      	bne.n	8007348 <USB_ActivateEndpoint+0x274>
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	4a17      	ldr	r2, [pc, #92]	@ (800739c <USB_ActivateEndpoint+0x2c8>)
 800733e:	4313      	orrs	r3, r2
 8007340:	b29a      	uxth	r2, r3
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e045      	b.n	80073d4 <USB_ActivateEndpoint+0x300>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b3e      	cmp	r3, #62	@ 0x3e
 800734e:	d827      	bhi.n	80073a0 <USB_ActivateEndpoint+0x2cc>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2201      	movs	r2, #1
 800735e:	4013      	ands	r3, r2
 8007360:	d002      	beq.n	8007368 <USB_ActivateEndpoint+0x294>
 8007362:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007364:	3301      	adds	r3, #1
 8007366:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29a      	uxth	r2, r3
 800736e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007370:	b29b      	uxth	r3, r3
 8007372:	029b      	lsls	r3, r3, #10
 8007374:	b29b      	uxth	r3, r3
 8007376:	4313      	orrs	r3, r2
 8007378:	b29a      	uxth	r2, r3
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	e029      	b.n	80073d4 <USB_ActivateEndpoint+0x300>
 8007380:	ffff898f 	.word	0xffff898f
 8007384:	ffff8080 	.word	0xffff8080
 8007388:	ffff8f8f 	.word	0xffff8f8f
 800738c:	ffff80c0 	.word	0xffff80c0
 8007390:	ffff8fbf 	.word	0xffff8fbf
 8007394:	00000404 	.word	0x00000404
 8007398:	00000406 	.word	0x00000406
 800739c:	ffff8000 	.word	0xffff8000
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	221f      	movs	r2, #31
 80073ae:	4013      	ands	r3, r2
 80073b0:	d102      	bne.n	80073b8 <USB_ActivateEndpoint+0x2e4>
 80073b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073b4:	3b01      	subs	r3, #1
 80073b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	029b      	lsls	r3, r3, #10
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	4313      	orrs	r3, r2
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	4ab5      	ldr	r2, [pc, #724]	@ (80076a0 <USB_ActivateEndpoint+0x5cc>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	18d2      	adds	r2, r2, r3
 80073de:	2122      	movs	r1, #34	@ 0x22
 80073e0:	187b      	adds	r3, r7, r1
 80073e2:	8812      	ldrh	r2, [r2, #0]
 80073e4:	801a      	strh	r2, [r3, #0]
 80073e6:	187b      	adds	r3, r7, r1
 80073e8:	881a      	ldrh	r2, [r3, #0]
 80073ea:	2380      	movs	r3, #128	@ 0x80
 80073ec:	01db      	lsls	r3, r3, #7
 80073ee:	4013      	ands	r3, r2
 80073f0:	d016      	beq.n	8007420 <USB_ActivateEndpoint+0x34c>
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	18d3      	adds	r3, r2, r3
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29a      	uxth	r2, r3
 8007400:	2020      	movs	r0, #32
 8007402:	183b      	adds	r3, r7, r0
 8007404:	49a7      	ldr	r1, [pc, #668]	@ (80076a4 <USB_ActivateEndpoint+0x5d0>)
 8007406:	400a      	ands	r2, r1
 8007408:	801a      	strh	r2, [r3, #0]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	18d3      	adds	r3, r2, r3
 8007414:	183a      	adds	r2, r7, r0
 8007416:	8812      	ldrh	r2, [r2, #0]
 8007418:	49a3      	ldr	r1, [pc, #652]	@ (80076a8 <USB_ActivateEndpoint+0x5d4>)
 800741a:	430a      	orrs	r2, r1
 800741c:	b292      	uxth	r2, r2
 800741e:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d125      	bne.n	8007474 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	18d3      	adds	r3, r2, r3
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29a      	uxth	r2, r3
 8007436:	201c      	movs	r0, #28
 8007438:	183b      	adds	r3, r7, r0
 800743a:	499c      	ldr	r1, [pc, #624]	@ (80076ac <USB_ActivateEndpoint+0x5d8>)
 800743c:	400a      	ands	r2, r1
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	183b      	adds	r3, r7, r0
 8007442:	183a      	adds	r2, r7, r0
 8007444:	8812      	ldrh	r2, [r2, #0]
 8007446:	2180      	movs	r1, #128	@ 0x80
 8007448:	0149      	lsls	r1, r1, #5
 800744a:	404a      	eors	r2, r1
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	183b      	adds	r3, r7, r0
 8007450:	183a      	adds	r2, r7, r0
 8007452:	8812      	ldrh	r2, [r2, #0]
 8007454:	2180      	movs	r1, #128	@ 0x80
 8007456:	0189      	lsls	r1, r1, #6
 8007458:	404a      	eors	r2, r1
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	18d3      	adds	r3, r2, r3
 8007466:	183a      	adds	r2, r7, r0
 8007468:	8812      	ldrh	r2, [r2, #0]
 800746a:	4991      	ldr	r1, [pc, #580]	@ (80076b0 <USB_ActivateEndpoint+0x5dc>)
 800746c:	430a      	orrs	r2, r1
 800746e:	b292      	uxth	r2, r2
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	e1c4      	b.n	80077fe <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	18d3      	adds	r3, r2, r3
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29a      	uxth	r2, r3
 8007482:	201e      	movs	r0, #30
 8007484:	183b      	adds	r3, r7, r0
 8007486:	4989      	ldr	r1, [pc, #548]	@ (80076ac <USB_ActivateEndpoint+0x5d8>)
 8007488:	400a      	ands	r2, r1
 800748a:	801a      	strh	r2, [r3, #0]
 800748c:	183b      	adds	r3, r7, r0
 800748e:	183a      	adds	r2, r7, r0
 8007490:	8812      	ldrh	r2, [r2, #0]
 8007492:	2180      	movs	r1, #128	@ 0x80
 8007494:	0189      	lsls	r1, r1, #6
 8007496:	404a      	eors	r2, r1
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	18d3      	adds	r3, r2, r3
 80074a4:	183a      	adds	r2, r7, r0
 80074a6:	8812      	ldrh	r2, [r2, #0]
 80074a8:	4981      	ldr	r1, [pc, #516]	@ (80076b0 <USB_ActivateEndpoint+0x5dc>)
 80074aa:	430a      	orrs	r2, r1
 80074ac:	b292      	uxth	r2, r2
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	e1a5      	b.n	80077fe <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	78db      	ldrb	r3, [r3, #3]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d117      	bne.n	80074ea <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	18d3      	adds	r3, r2, r3
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	2062      	movs	r0, #98	@ 0x62
 80074ca:	183b      	adds	r3, r7, r0
 80074cc:	4975      	ldr	r1, [pc, #468]	@ (80076a4 <USB_ActivateEndpoint+0x5d0>)
 80074ce:	400a      	ands	r2, r1
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	18d3      	adds	r3, r2, r3
 80074dc:	183a      	adds	r2, r7, r0
 80074de:	8812      	ldrh	r2, [r2, #0]
 80074e0:	4974      	ldr	r1, [pc, #464]	@ (80076b4 <USB_ActivateEndpoint+0x5e0>)
 80074e2:	430a      	orrs	r2, r1
 80074e4:	b292      	uxth	r2, r2
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	e016      	b.n	8007518 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	18d3      	adds	r3, r2, r3
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	2064      	movs	r0, #100	@ 0x64
 80074fa:	183b      	adds	r3, r7, r0
 80074fc:	496e      	ldr	r1, [pc, #440]	@ (80076b8 <USB_ActivateEndpoint+0x5e4>)
 80074fe:	400a      	ands	r2, r1
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	18d3      	adds	r3, r2, r3
 800750c:	183a      	adds	r2, r7, r0
 800750e:	8812      	ldrh	r2, [r2, #0]
 8007510:	4967      	ldr	r1, [pc, #412]	@ (80076b0 <USB_ActivateEndpoint+0x5dc>)
 8007512:	430a      	orrs	r2, r1
 8007514:	b292      	uxth	r2, r2
 8007516:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2250      	movs	r2, #80	@ 0x50
 8007520:	5a9b      	ldrh	r3, [r3, r2]
 8007522:	b29b      	uxth	r3, r3
 8007524:	001a      	movs	r2, r3
 8007526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007528:	189b      	adds	r3, r3, r2
 800752a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	00da      	lsls	r2, r3, #3
 8007532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007534:	18d3      	adds	r3, r2, r3
 8007536:	2280      	movs	r2, #128	@ 0x80
 8007538:	00d2      	lsls	r2, r2, #3
 800753a:	4694      	mov	ip, r2
 800753c:	4463      	add	r3, ip
 800753e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	891b      	ldrh	r3, [r3, #8]
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	b29b      	uxth	r3, r3
 8007548:	18db      	adds	r3, r3, r3
 800754a:	b29a      	uxth	r2, r3
 800754c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800754e:	801a      	strh	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	657b      	str	r3, [r7, #84]	@ 0x54
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2250      	movs	r2, #80	@ 0x50
 8007558:	5a9b      	ldrh	r3, [r3, r2]
 800755a:	b29b      	uxth	r3, r3
 800755c:	001a      	movs	r2, r3
 800755e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007560:	189b      	adds	r3, r3, r2
 8007562:	657b      	str	r3, [r7, #84]	@ 0x54
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	00da      	lsls	r2, r3, #3
 800756a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800756c:	18d3      	adds	r3, r2, r3
 800756e:	4a53      	ldr	r2, [pc, #332]	@ (80076bc <USB_ActivateEndpoint+0x5e8>)
 8007570:	4694      	mov	ip, r2
 8007572:	4463      	add	r3, ip
 8007574:	653b      	str	r3, [r7, #80]	@ 0x50
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	895b      	ldrh	r3, [r3, #10]
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	b29b      	uxth	r3, r3
 800757e:	18db      	adds	r3, r3, r3
 8007580:	b29a      	uxth	r2, r3
 8007582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007584:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d000      	beq.n	8007590 <USB_ActivateEndpoint+0x4bc>
 800758e:	e09b      	b.n	80076c8 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	18d2      	adds	r2, r2, r3
 800759a:	2140      	movs	r1, #64	@ 0x40
 800759c:	187b      	adds	r3, r7, r1
 800759e:	8812      	ldrh	r2, [r2, #0]
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	187b      	adds	r3, r7, r1
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	2380      	movs	r3, #128	@ 0x80
 80075a8:	01db      	lsls	r3, r3, #7
 80075aa:	4013      	ands	r3, r2
 80075ac:	d016      	beq.n	80075dc <USB_ActivateEndpoint+0x508>
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	18d3      	adds	r3, r2, r3
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	203e      	movs	r0, #62	@ 0x3e
 80075be:	183b      	adds	r3, r7, r0
 80075c0:	4938      	ldr	r1, [pc, #224]	@ (80076a4 <USB_ActivateEndpoint+0x5d0>)
 80075c2:	400a      	ands	r2, r1
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	18d3      	adds	r3, r2, r3
 80075d0:	183a      	adds	r2, r7, r0
 80075d2:	8812      	ldrh	r2, [r2, #0]
 80075d4:	4934      	ldr	r1, [pc, #208]	@ (80076a8 <USB_ActivateEndpoint+0x5d4>)
 80075d6:	430a      	orrs	r2, r1
 80075d8:	b292      	uxth	r2, r2
 80075da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	18d2      	adds	r2, r2, r3
 80075e6:	213c      	movs	r1, #60	@ 0x3c
 80075e8:	187b      	adds	r3, r7, r1
 80075ea:	8812      	ldrh	r2, [r2, #0]
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	187b      	adds	r3, r7, r1
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	2240      	movs	r2, #64	@ 0x40
 80075f4:	4013      	ands	r3, r2
 80075f6:	d016      	beq.n	8007626 <USB_ActivateEndpoint+0x552>
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	18d3      	adds	r3, r2, r3
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29a      	uxth	r2, r3
 8007606:	203a      	movs	r0, #58	@ 0x3a
 8007608:	183b      	adds	r3, r7, r0
 800760a:	4926      	ldr	r1, [pc, #152]	@ (80076a4 <USB_ActivateEndpoint+0x5d0>)
 800760c:	400a      	ands	r2, r1
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	18d3      	adds	r3, r2, r3
 800761a:	183a      	adds	r2, r7, r0
 800761c:	8812      	ldrh	r2, [r2, #0]
 800761e:	4928      	ldr	r1, [pc, #160]	@ (80076c0 <USB_ActivateEndpoint+0x5ec>)
 8007620:	430a      	orrs	r2, r1
 8007622:	b292      	uxth	r2, r2
 8007624:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	18d3      	adds	r3, r2, r3
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29a      	uxth	r2, r3
 8007634:	2038      	movs	r0, #56	@ 0x38
 8007636:	183b      	adds	r3, r7, r0
 8007638:	491c      	ldr	r1, [pc, #112]	@ (80076ac <USB_ActivateEndpoint+0x5d8>)
 800763a:	400a      	ands	r2, r1
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	183b      	adds	r3, r7, r0
 8007640:	183a      	adds	r2, r7, r0
 8007642:	8812      	ldrh	r2, [r2, #0]
 8007644:	2180      	movs	r1, #128	@ 0x80
 8007646:	0149      	lsls	r1, r1, #5
 8007648:	404a      	eors	r2, r1
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	183b      	adds	r3, r7, r0
 800764e:	183a      	adds	r2, r7, r0
 8007650:	8812      	ldrh	r2, [r2, #0]
 8007652:	2180      	movs	r1, #128	@ 0x80
 8007654:	0189      	lsls	r1, r1, #6
 8007656:	404a      	eors	r2, r1
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	18d3      	adds	r3, r2, r3
 8007664:	183a      	adds	r2, r7, r0
 8007666:	8812      	ldrh	r2, [r2, #0]
 8007668:	4911      	ldr	r1, [pc, #68]	@ (80076b0 <USB_ActivateEndpoint+0x5dc>)
 800766a:	430a      	orrs	r2, r1
 800766c:	b292      	uxth	r2, r2
 800766e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	18d3      	adds	r3, r2, r3
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29a      	uxth	r2, r3
 800767e:	2036      	movs	r0, #54	@ 0x36
 8007680:	183b      	adds	r3, r7, r0
 8007682:	4910      	ldr	r1, [pc, #64]	@ (80076c4 <USB_ActivateEndpoint+0x5f0>)
 8007684:	400a      	ands	r2, r1
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	18d3      	adds	r3, r2, r3
 8007692:	183a      	adds	r2, r7, r0
 8007694:	8812      	ldrh	r2, [r2, #0]
 8007696:	4906      	ldr	r1, [pc, #24]	@ (80076b0 <USB_ActivateEndpoint+0x5dc>)
 8007698:	430a      	orrs	r2, r1
 800769a:	b292      	uxth	r2, r2
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e0ae      	b.n	80077fe <USB_ActivateEndpoint+0x72a>
 80076a0:	ffff8000 	.word	0xffff8000
 80076a4:	ffff8f8f 	.word	0xffff8f8f
 80076a8:	ffffc080 	.word	0xffffc080
 80076ac:	ffffbf8f 	.word	0xffffbf8f
 80076b0:	ffff8080 	.word	0xffff8080
 80076b4:	ffff8180 	.word	0xffff8180
 80076b8:	ffff8e8f 	.word	0xffff8e8f
 80076bc:	00000404 	.word	0x00000404
 80076c0:	ffff80c0 	.word	0xffff80c0
 80076c4:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	18d2      	adds	r2, r2, r3
 80076d2:	214e      	movs	r1, #78	@ 0x4e
 80076d4:	187b      	adds	r3, r7, r1
 80076d6:	8812      	ldrh	r2, [r2, #0]
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	187b      	adds	r3, r7, r1
 80076dc:	881a      	ldrh	r2, [r3, #0]
 80076de:	2380      	movs	r3, #128	@ 0x80
 80076e0:	01db      	lsls	r3, r3, #7
 80076e2:	4013      	ands	r3, r2
 80076e4:	d016      	beq.n	8007714 <USB_ActivateEndpoint+0x640>
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	18d3      	adds	r3, r2, r3
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	204c      	movs	r0, #76	@ 0x4c
 80076f6:	183b      	adds	r3, r7, r0
 80076f8:	4944      	ldr	r1, [pc, #272]	@ (800780c <USB_ActivateEndpoint+0x738>)
 80076fa:	400a      	ands	r2, r1
 80076fc:	801a      	strh	r2, [r3, #0]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	18d3      	adds	r3, r2, r3
 8007708:	183a      	adds	r2, r7, r0
 800770a:	8812      	ldrh	r2, [r2, #0]
 800770c:	4940      	ldr	r1, [pc, #256]	@ (8007810 <USB_ActivateEndpoint+0x73c>)
 800770e:	430a      	orrs	r2, r1
 8007710:	b292      	uxth	r2, r2
 8007712:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	18d2      	adds	r2, r2, r3
 800771e:	214a      	movs	r1, #74	@ 0x4a
 8007720:	187b      	adds	r3, r7, r1
 8007722:	8812      	ldrh	r2, [r2, #0]
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	187b      	adds	r3, r7, r1
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	2240      	movs	r2, #64	@ 0x40
 800772c:	4013      	ands	r3, r2
 800772e:	d016      	beq.n	800775e <USB_ActivateEndpoint+0x68a>
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	18d3      	adds	r3, r2, r3
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29a      	uxth	r2, r3
 800773e:	2048      	movs	r0, #72	@ 0x48
 8007740:	183b      	adds	r3, r7, r0
 8007742:	4932      	ldr	r1, [pc, #200]	@ (800780c <USB_ActivateEndpoint+0x738>)
 8007744:	400a      	ands	r2, r1
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	18d3      	adds	r3, r2, r3
 8007752:	183a      	adds	r2, r7, r0
 8007754:	8812      	ldrh	r2, [r2, #0]
 8007756:	492f      	ldr	r1, [pc, #188]	@ (8007814 <USB_ActivateEndpoint+0x740>)
 8007758:	430a      	orrs	r2, r1
 800775a:	b292      	uxth	r2, r2
 800775c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	78db      	ldrb	r3, [r3, #3]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d01d      	beq.n	80077a2 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	18d3      	adds	r3, r2, r3
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29a      	uxth	r2, r3
 8007774:	2044      	movs	r0, #68	@ 0x44
 8007776:	183b      	adds	r3, r7, r0
 8007778:	4927      	ldr	r1, [pc, #156]	@ (8007818 <USB_ActivateEndpoint+0x744>)
 800777a:	400a      	ands	r2, r1
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	183b      	adds	r3, r7, r0
 8007780:	183a      	adds	r2, r7, r0
 8007782:	8812      	ldrh	r2, [r2, #0]
 8007784:	2120      	movs	r1, #32
 8007786:	404a      	eors	r2, r1
 8007788:	801a      	strh	r2, [r3, #0]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	18d3      	adds	r3, r2, r3
 8007794:	183a      	adds	r2, r7, r0
 8007796:	8812      	ldrh	r2, [r2, #0]
 8007798:	4920      	ldr	r1, [pc, #128]	@ (800781c <USB_ActivateEndpoint+0x748>)
 800779a:	430a      	orrs	r2, r1
 800779c:	b292      	uxth	r2, r2
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	e016      	b.n	80077d0 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	18d3      	adds	r3, r2, r3
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	2046      	movs	r0, #70	@ 0x46
 80077b2:	183b      	adds	r3, r7, r0
 80077b4:	4918      	ldr	r1, [pc, #96]	@ (8007818 <USB_ActivateEndpoint+0x744>)
 80077b6:	400a      	ands	r2, r1
 80077b8:	801a      	strh	r2, [r3, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	18d3      	adds	r3, r2, r3
 80077c4:	183a      	adds	r2, r7, r0
 80077c6:	8812      	ldrh	r2, [r2, #0]
 80077c8:	4914      	ldr	r1, [pc, #80]	@ (800781c <USB_ActivateEndpoint+0x748>)
 80077ca:	430a      	orrs	r2, r1
 80077cc:	b292      	uxth	r2, r2
 80077ce:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	18d3      	adds	r3, r2, r3
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	2042      	movs	r0, #66	@ 0x42
 80077e0:	183b      	adds	r3, r7, r0
 80077e2:	490f      	ldr	r1, [pc, #60]	@ (8007820 <USB_ActivateEndpoint+0x74c>)
 80077e4:	400a      	ands	r2, r1
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	18d3      	adds	r3, r2, r3
 80077f2:	183a      	adds	r2, r7, r0
 80077f4:	8812      	ldrh	r2, [r2, #0]
 80077f6:	4909      	ldr	r1, [pc, #36]	@ (800781c <USB_ActivateEndpoint+0x748>)
 80077f8:	430a      	orrs	r2, r1
 80077fa:	b292      	uxth	r2, r2
 80077fc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80077fe:	236f      	movs	r3, #111	@ 0x6f
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	781b      	ldrb	r3, [r3, #0]
}
 8007804:	0018      	movs	r0, r3
 8007806:	46bd      	mov	sp, r7
 8007808:	b01c      	add	sp, #112	@ 0x70
 800780a:	bd80      	pop	{r7, pc}
 800780c:	ffff8f8f 	.word	0xffff8f8f
 8007810:	ffffc080 	.word	0xffffc080
 8007814:	ffff80c0 	.word	0xffff80c0
 8007818:	ffff8fbf 	.word	0xffff8fbf
 800781c:	ffff8080 	.word	0xffff8080
 8007820:	ffffbf8f 	.word	0xffffbf8f

08007824 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08c      	sub	sp, #48	@ 0x30
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	7b1b      	ldrb	r3, [r3, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d000      	beq.n	8007838 <USB_DeactivateEndpoint+0x14>
 8007836:	e07e      	b.n	8007936 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d03c      	beq.n	80078ba <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	18d2      	adds	r2, r2, r3
 800784a:	210c      	movs	r1, #12
 800784c:	187b      	adds	r3, r7, r1
 800784e:	8812      	ldrh	r2, [r2, #0]
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	187b      	adds	r3, r7, r1
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	2240      	movs	r2, #64	@ 0x40
 8007858:	4013      	ands	r3, r2
 800785a:	d016      	beq.n	800788a <USB_DeactivateEndpoint+0x66>
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	18d3      	adds	r3, r2, r3
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29a      	uxth	r2, r3
 800786a:	200a      	movs	r0, #10
 800786c:	183b      	adds	r3, r7, r0
 800786e:	49c7      	ldr	r1, [pc, #796]	@ (8007b8c <USB_DeactivateEndpoint+0x368>)
 8007870:	400a      	ands	r2, r1
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	18d3      	adds	r3, r2, r3
 800787e:	183a      	adds	r2, r7, r0
 8007880:	8812      	ldrh	r2, [r2, #0]
 8007882:	49c3      	ldr	r1, [pc, #780]	@ (8007b90 <USB_DeactivateEndpoint+0x36c>)
 8007884:	430a      	orrs	r2, r1
 8007886:	b292      	uxth	r2, r2
 8007888:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	18d3      	adds	r3, r2, r3
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29a      	uxth	r2, r3
 8007898:	2008      	movs	r0, #8
 800789a:	183b      	adds	r3, r7, r0
 800789c:	49bd      	ldr	r1, [pc, #756]	@ (8007b94 <USB_DeactivateEndpoint+0x370>)
 800789e:	400a      	ands	r2, r1
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	18d3      	adds	r3, r2, r3
 80078ac:	183a      	adds	r2, r7, r0
 80078ae:	8812      	ldrh	r2, [r2, #0]
 80078b0:	49b9      	ldr	r1, [pc, #740]	@ (8007b98 <USB_DeactivateEndpoint+0x374>)
 80078b2:	430a      	orrs	r2, r1
 80078b4:	b292      	uxth	r2, r2
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	e163      	b.n	8007b82 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	18d2      	adds	r2, r2, r3
 80078c4:	2112      	movs	r1, #18
 80078c6:	187b      	adds	r3, r7, r1
 80078c8:	8812      	ldrh	r2, [r2, #0]
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	187b      	adds	r3, r7, r1
 80078ce:	881a      	ldrh	r2, [r3, #0]
 80078d0:	2380      	movs	r3, #128	@ 0x80
 80078d2:	01db      	lsls	r3, r3, #7
 80078d4:	4013      	ands	r3, r2
 80078d6:	d016      	beq.n	8007906 <USB_DeactivateEndpoint+0xe2>
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	18d3      	adds	r3, r2, r3
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	2010      	movs	r0, #16
 80078e8:	183b      	adds	r3, r7, r0
 80078ea:	49a8      	ldr	r1, [pc, #672]	@ (8007b8c <USB_DeactivateEndpoint+0x368>)
 80078ec:	400a      	ands	r2, r1
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	183a      	adds	r2, r7, r0
 80078fc:	8812      	ldrh	r2, [r2, #0]
 80078fe:	49a7      	ldr	r1, [pc, #668]	@ (8007b9c <USB_DeactivateEndpoint+0x378>)
 8007900:	430a      	orrs	r2, r1
 8007902:	b292      	uxth	r2, r2
 8007904:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	18d3      	adds	r3, r2, r3
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29a      	uxth	r2, r3
 8007914:	200e      	movs	r0, #14
 8007916:	183b      	adds	r3, r7, r0
 8007918:	49a1      	ldr	r1, [pc, #644]	@ (8007ba0 <USB_DeactivateEndpoint+0x37c>)
 800791a:	400a      	ands	r2, r1
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	18d3      	adds	r3, r2, r3
 8007928:	183a      	adds	r2, r7, r0
 800792a:	8812      	ldrh	r2, [r2, #0]
 800792c:	499a      	ldr	r1, [pc, #616]	@ (8007b98 <USB_DeactivateEndpoint+0x374>)
 800792e:	430a      	orrs	r2, r1
 8007930:	b292      	uxth	r2, r2
 8007932:	801a      	strh	r2, [r3, #0]
 8007934:	e125      	b.n	8007b82 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	785b      	ldrb	r3, [r3, #1]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d000      	beq.n	8007940 <USB_DeactivateEndpoint+0x11c>
 800793e:	e090      	b.n	8007a62 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	18d2      	adds	r2, r2, r3
 800794a:	2120      	movs	r1, #32
 800794c:	187b      	adds	r3, r7, r1
 800794e:	8812      	ldrh	r2, [r2, #0]
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	187b      	adds	r3, r7, r1
 8007954:	881a      	ldrh	r2, [r3, #0]
 8007956:	2380      	movs	r3, #128	@ 0x80
 8007958:	01db      	lsls	r3, r3, #7
 800795a:	4013      	ands	r3, r2
 800795c:	d016      	beq.n	800798c <USB_DeactivateEndpoint+0x168>
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	18d3      	adds	r3, r2, r3
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	201e      	movs	r0, #30
 800796e:	183b      	adds	r3, r7, r0
 8007970:	4986      	ldr	r1, [pc, #536]	@ (8007b8c <USB_DeactivateEndpoint+0x368>)
 8007972:	400a      	ands	r2, r1
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	18d3      	adds	r3, r2, r3
 8007980:	183a      	adds	r2, r7, r0
 8007982:	8812      	ldrh	r2, [r2, #0]
 8007984:	4985      	ldr	r1, [pc, #532]	@ (8007b9c <USB_DeactivateEndpoint+0x378>)
 8007986:	430a      	orrs	r2, r1
 8007988:	b292      	uxth	r2, r2
 800798a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	18d2      	adds	r2, r2, r3
 8007996:	211c      	movs	r1, #28
 8007998:	187b      	adds	r3, r7, r1
 800799a:	8812      	ldrh	r2, [r2, #0]
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	187b      	adds	r3, r7, r1
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	2240      	movs	r2, #64	@ 0x40
 80079a4:	4013      	ands	r3, r2
 80079a6:	d016      	beq.n	80079d6 <USB_DeactivateEndpoint+0x1b2>
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	18d3      	adds	r3, r2, r3
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	201a      	movs	r0, #26
 80079b8:	183b      	adds	r3, r7, r0
 80079ba:	4974      	ldr	r1, [pc, #464]	@ (8007b8c <USB_DeactivateEndpoint+0x368>)
 80079bc:	400a      	ands	r2, r1
 80079be:	801a      	strh	r2, [r3, #0]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	18d3      	adds	r3, r2, r3
 80079ca:	183a      	adds	r2, r7, r0
 80079cc:	8812      	ldrh	r2, [r2, #0]
 80079ce:	4970      	ldr	r1, [pc, #448]	@ (8007b90 <USB_DeactivateEndpoint+0x36c>)
 80079d0:	430a      	orrs	r2, r1
 80079d2:	b292      	uxth	r2, r2
 80079d4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	18d3      	adds	r3, r2, r3
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	2018      	movs	r0, #24
 80079e6:	183b      	adds	r3, r7, r0
 80079e8:	4968      	ldr	r1, [pc, #416]	@ (8007b8c <USB_DeactivateEndpoint+0x368>)
 80079ea:	400a      	ands	r2, r1
 80079ec:	801a      	strh	r2, [r3, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	18d3      	adds	r3, r2, r3
 80079f8:	183a      	adds	r2, r7, r0
 80079fa:	8812      	ldrh	r2, [r2, #0]
 80079fc:	4964      	ldr	r1, [pc, #400]	@ (8007b90 <USB_DeactivateEndpoint+0x36c>)
 80079fe:	430a      	orrs	r2, r1
 8007a00:	b292      	uxth	r2, r2
 8007a02:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	18d3      	adds	r3, r2, r3
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	2016      	movs	r0, #22
 8007a14:	183b      	adds	r3, r7, r0
 8007a16:	4962      	ldr	r1, [pc, #392]	@ (8007ba0 <USB_DeactivateEndpoint+0x37c>)
 8007a18:	400a      	ands	r2, r1
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	18d3      	adds	r3, r2, r3
 8007a26:	183a      	adds	r2, r7, r0
 8007a28:	8812      	ldrh	r2, [r2, #0]
 8007a2a:	495b      	ldr	r1, [pc, #364]	@ (8007b98 <USB_DeactivateEndpoint+0x374>)
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	18d3      	adds	r3, r2, r3
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	2014      	movs	r0, #20
 8007a42:	183b      	adds	r3, r7, r0
 8007a44:	4953      	ldr	r1, [pc, #332]	@ (8007b94 <USB_DeactivateEndpoint+0x370>)
 8007a46:	400a      	ands	r2, r1
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	18d3      	adds	r3, r2, r3
 8007a54:	183a      	adds	r2, r7, r0
 8007a56:	8812      	ldrh	r2, [r2, #0]
 8007a58:	494f      	ldr	r1, [pc, #316]	@ (8007b98 <USB_DeactivateEndpoint+0x374>)
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	b292      	uxth	r2, r2
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	e08f      	b.n	8007b82 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	18d2      	adds	r2, r2, r3
 8007a6c:	212e      	movs	r1, #46	@ 0x2e
 8007a6e:	187b      	adds	r3, r7, r1
 8007a70:	8812      	ldrh	r2, [r2, #0]
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	187b      	adds	r3, r7, r1
 8007a76:	881a      	ldrh	r2, [r3, #0]
 8007a78:	2380      	movs	r3, #128	@ 0x80
 8007a7a:	01db      	lsls	r3, r3, #7
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	d016      	beq.n	8007aae <USB_DeactivateEndpoint+0x28a>
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	18d3      	adds	r3, r2, r3
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	202c      	movs	r0, #44	@ 0x2c
 8007a90:	183b      	adds	r3, r7, r0
 8007a92:	493e      	ldr	r1, [pc, #248]	@ (8007b8c <USB_DeactivateEndpoint+0x368>)
 8007a94:	400a      	ands	r2, r1
 8007a96:	801a      	strh	r2, [r3, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	18d3      	adds	r3, r2, r3
 8007aa2:	183a      	adds	r2, r7, r0
 8007aa4:	8812      	ldrh	r2, [r2, #0]
 8007aa6:	493d      	ldr	r1, [pc, #244]	@ (8007b9c <USB_DeactivateEndpoint+0x378>)
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	b292      	uxth	r2, r2
 8007aac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	18d2      	adds	r2, r2, r3
 8007ab8:	212a      	movs	r1, #42	@ 0x2a
 8007aba:	187b      	adds	r3, r7, r1
 8007abc:	8812      	ldrh	r2, [r2, #0]
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	187b      	adds	r3, r7, r1
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	2240      	movs	r2, #64	@ 0x40
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	d016      	beq.n	8007af8 <USB_DeactivateEndpoint+0x2d4>
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	18d3      	adds	r3, r2, r3
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	2028      	movs	r0, #40	@ 0x28
 8007ada:	183b      	adds	r3, r7, r0
 8007adc:	492b      	ldr	r1, [pc, #172]	@ (8007b8c <USB_DeactivateEndpoint+0x368>)
 8007ade:	400a      	ands	r2, r1
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	18d3      	adds	r3, r2, r3
 8007aec:	183a      	adds	r2, r7, r0
 8007aee:	8812      	ldrh	r2, [r2, #0]
 8007af0:	4927      	ldr	r1, [pc, #156]	@ (8007b90 <USB_DeactivateEndpoint+0x36c>)
 8007af2:	430a      	orrs	r2, r1
 8007af4:	b292      	uxth	r2, r2
 8007af6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	18d3      	adds	r3, r2, r3
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	2026      	movs	r0, #38	@ 0x26
 8007b08:	183b      	adds	r3, r7, r0
 8007b0a:	4920      	ldr	r1, [pc, #128]	@ (8007b8c <USB_DeactivateEndpoint+0x368>)
 8007b0c:	400a      	ands	r2, r1
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	18d3      	adds	r3, r2, r3
 8007b1a:	183a      	adds	r2, r7, r0
 8007b1c:	8812      	ldrh	r2, [r2, #0]
 8007b1e:	491f      	ldr	r1, [pc, #124]	@ (8007b9c <USB_DeactivateEndpoint+0x378>)
 8007b20:	430a      	orrs	r2, r1
 8007b22:	b292      	uxth	r2, r2
 8007b24:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	18d3      	adds	r3, r2, r3
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	2024      	movs	r0, #36	@ 0x24
 8007b36:	183b      	adds	r3, r7, r0
 8007b38:	4916      	ldr	r1, [pc, #88]	@ (8007b94 <USB_DeactivateEndpoint+0x370>)
 8007b3a:	400a      	ands	r2, r1
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	18d3      	adds	r3, r2, r3
 8007b48:	183a      	adds	r2, r7, r0
 8007b4a:	8812      	ldrh	r2, [r2, #0]
 8007b4c:	4912      	ldr	r1, [pc, #72]	@ (8007b98 <USB_DeactivateEndpoint+0x374>)
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	b292      	uxth	r2, r2
 8007b52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	18d3      	adds	r3, r2, r3
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	2022      	movs	r0, #34	@ 0x22
 8007b64:	183b      	adds	r3, r7, r0
 8007b66:	490e      	ldr	r1, [pc, #56]	@ (8007ba0 <USB_DeactivateEndpoint+0x37c>)
 8007b68:	400a      	ands	r2, r1
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	18d3      	adds	r3, r2, r3
 8007b76:	183a      	adds	r2, r7, r0
 8007b78:	8812      	ldrh	r2, [r2, #0]
 8007b7a:	4907      	ldr	r1, [pc, #28]	@ (8007b98 <USB_DeactivateEndpoint+0x374>)
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	b292      	uxth	r2, r2
 8007b80:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	0018      	movs	r0, r3
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b00c      	add	sp, #48	@ 0x30
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	ffff8f8f 	.word	0xffff8f8f
 8007b90:	ffff80c0 	.word	0xffff80c0
 8007b94:	ffff8fbf 	.word	0xffff8fbf
 8007b98:	ffff8080 	.word	0xffff8080
 8007b9c:	ffffc080 	.word	0xffffc080
 8007ba0:	ffffbf8f 	.word	0xffffbf8f

08007ba4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ba4:	b590      	push	{r4, r7, lr}
 8007ba6:	b0c3      	sub	sp, #268	@ 0x10c
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d001      	beq.n	8007bba <USB_EPStartXfer+0x16>
 8007bb6:	f000 fd2d 	bl	8008614 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d905      	bls.n	8007bd2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	1d7a      	adds	r2, r7, #5
 8007bcc:	32ff      	adds	r2, #255	@ 0xff
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	e004      	b.n	8007bdc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	1d7a      	adds	r2, r7, #5
 8007bd8:	32ff      	adds	r2, #255	@ 0xff
 8007bda:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	7b1b      	ldrb	r3, [r3, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d125      	bne.n	8007c30 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	6959      	ldr	r1, [r3, #20]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	88da      	ldrh	r2, [r3, #6]
 8007bec:	1d7b      	adds	r3, r7, #5
 8007bee:	33ff      	adds	r3, #255	@ 0xff
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 fa3f 	bl	8009078 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2250      	movs	r2, #80	@ 0x50
 8007c02:	5a9b      	ldrh	r3, [r3, r2]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	001a      	movs	r2, r3
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	189b      	adds	r3, r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	00da      	lsls	r2, r3, #3
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	18d3      	adds	r3, r2, r3
 8007c18:	4ad7      	ldr	r2, [pc, #860]	@ (8007f78 <USB_EPStartXfer+0x3d4>)
 8007c1a:	4694      	mov	ip, r2
 8007c1c:	4463      	add	r3, ip
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	1d7b      	adds	r3, r7, #5
 8007c22:	33ff      	adds	r3, #255	@ 0xff
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	f000 fccd 	bl	80085ca <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d000      	beq.n	8007c3a <USB_EPStartXfer+0x96>
 8007c38:	e362      	b.n	8008300 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d800      	bhi.n	8007c48 <USB_EPStartXfer+0xa4>
 8007c46:	e309      	b.n	800825c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	18d3      	adds	r3, r2, r3
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	2056      	movs	r0, #86	@ 0x56
 8007c58:	183b      	adds	r3, r7, r0
 8007c5a:	49c8      	ldr	r1, [pc, #800]	@ (8007f7c <USB_EPStartXfer+0x3d8>)
 8007c5c:	400a      	ands	r2, r1
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	18d3      	adds	r3, r2, r3
 8007c6a:	183a      	adds	r2, r7, r0
 8007c6c:	8812      	ldrh	r2, [r2, #0]
 8007c6e:	49c4      	ldr	r1, [pc, #784]	@ (8007f80 <USB_EPStartXfer+0x3dc>)
 8007c70:	430a      	orrs	r2, r1
 8007c72:	b292      	uxth	r2, r2
 8007c74:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	6a1a      	ldr	r2, [r3, #32]
 8007c7a:	1d7b      	adds	r3, r7, #5
 8007c7c:	33ff      	adds	r3, #255	@ 0xff
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	1ad2      	subs	r2, r2, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	18d3      	adds	r3, r2, r3
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	001a      	movs	r2, r3
 8007c96:	2340      	movs	r3, #64	@ 0x40
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d100      	bne.n	8007c9e <USB_EPStartXfer+0xfa>
 8007c9c:	e176      	b.n	8007f8c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d000      	beq.n	8007cac <USB_EPStartXfer+0x108>
 8007caa:	e074      	b.n	8007d96 <USB_EPStartXfer+0x1f2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2250      	movs	r2, #80	@ 0x50
 8007cb4:	5a9b      	ldrh	r3, [r3, r2]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	001a      	movs	r2, r3
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	189b      	adds	r3, r3, r2
 8007cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	00da      	lsls	r2, r3, #3
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	18d3      	adds	r3, r2, r3
 8007cca:	4aae      	ldr	r2, [pc, #696]	@ (8007f84 <USB_EPStartXfer+0x3e0>)
 8007ccc:	4694      	mov	ip, r2
 8007cce:	4463      	add	r3, ip
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	059b      	lsls	r3, r3, #22
 8007cda:	0d9b      	lsrs	r3, r3, #22
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	801a      	strh	r2, [r3, #0]
 8007ce2:	1d7b      	adds	r3, r7, #5
 8007ce4:	33ff      	adds	r3, #255	@ 0xff
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d108      	bne.n	8007cfe <USB_EPStartXfer+0x15a>
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	4aa5      	ldr	r2, [pc, #660]	@ (8007f88 <USB_EPStartXfer+0x3e4>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	e066      	b.n	8007dcc <USB_EPStartXfer+0x228>
 8007cfe:	1d7b      	adds	r3, r7, #5
 8007d00:	33ff      	adds	r3, #255	@ 0xff
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d06:	d821      	bhi.n	8007d4c <USB_EPStartXfer+0x1a8>
 8007d08:	1d7b      	adds	r3, r7, #5
 8007d0a:	33ff      	adds	r3, #255	@ 0xff
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	1c7a      	adds	r2, r7, #1
 8007d12:	32ff      	adds	r2, #255	@ 0xff
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	1d7b      	adds	r3, r7, #5
 8007d18:	33ff      	adds	r3, #255	@ 0xff
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d006      	beq.n	8007d30 <USB_EPStartXfer+0x18c>
 8007d22:	1c7b      	adds	r3, r7, #1
 8007d24:	33ff      	adds	r3, #255	@ 0xff
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	1c7a      	adds	r2, r7, #1
 8007d2c:	32ff      	adds	r2, #255	@ 0xff
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	1c7b      	adds	r3, r7, #1
 8007d38:	33ff      	adds	r3, #255	@ 0xff
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	029b      	lsls	r3, r3, #10
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	801a      	strh	r2, [r3, #0]
 8007d4a:	e03f      	b.n	8007dcc <USB_EPStartXfer+0x228>
 8007d4c:	1d7b      	adds	r3, r7, #5
 8007d4e:	33ff      	adds	r3, #255	@ 0xff
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	1c7a      	adds	r2, r7, #1
 8007d56:	32ff      	adds	r2, #255	@ 0xff
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	1d7b      	adds	r3, r7, #5
 8007d5c:	33ff      	adds	r3, #255	@ 0xff
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	221f      	movs	r2, #31
 8007d62:	4013      	ands	r3, r2
 8007d64:	d106      	bne.n	8007d74 <USB_EPStartXfer+0x1d0>
 8007d66:	1c7b      	adds	r3, r7, #1
 8007d68:	33ff      	adds	r3, #255	@ 0xff
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	1c7a      	adds	r2, r7, #1
 8007d70:	32ff      	adds	r2, #255	@ 0xff
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	1c7b      	adds	r3, r7, #1
 8007d7c:	33ff      	adds	r3, #255	@ 0xff
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	029b      	lsls	r3, r3, #10
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	4313      	orrs	r3, r2
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4a7f      	ldr	r2, [pc, #508]	@ (8007f88 <USB_EPStartXfer+0x3e4>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	e01a      	b.n	8007dcc <USB_EPStartXfer+0x228>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d116      	bne.n	8007dcc <USB_EPStartXfer+0x228>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2250      	movs	r2, #80	@ 0x50
 8007da2:	5a9b      	ldrh	r3, [r3, r2]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	001a      	movs	r2, r3
 8007da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007daa:	189b      	adds	r3, r3, r2
 8007dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	00da      	lsls	r2, r3, #3
 8007db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db6:	18d3      	adds	r3, r2, r3
 8007db8:	4a72      	ldr	r2, [pc, #456]	@ (8007f84 <USB_EPStartXfer+0x3e0>)
 8007dba:	4694      	mov	ip, r2
 8007dbc:	4463      	add	r3, ip
 8007dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dc0:	1d7b      	adds	r3, r7, #5
 8007dc2:	33ff      	adds	r3, #255	@ 0xff
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dcc:	2076      	movs	r0, #118	@ 0x76
 8007dce:	183b      	adds	r3, r7, r0
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	8952      	ldrh	r2, [r2, #10]
 8007dd4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6959      	ldr	r1, [r3, #20]
 8007dda:	1d7b      	adds	r3, r7, #5
 8007ddc:	33ff      	adds	r3, #255	@ 0xff
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	b29c      	uxth	r4, r3
 8007de2:	183b      	adds	r3, r7, r0
 8007de4:	881a      	ldrh	r2, [r3, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	0023      	movs	r3, r4
 8007dea:	f001 f945 	bl	8009078 <USB_WritePMA>
            ep->xfer_buff += len;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	695a      	ldr	r2, [r3, #20]
 8007df2:	1d7b      	adds	r3, r7, #5
 8007df4:	33ff      	adds	r3, #255	@ 0xff
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	18d2      	adds	r2, r2, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6a1a      	ldr	r2, [r3, #32]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d908      	bls.n	8007e1c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6a1a      	ldr	r2, [r3, #32]
 8007e0e:	1d7b      	adds	r3, r7, #5
 8007e10:	33ff      	adds	r3, #255	@ 0xff
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	1ad2      	subs	r2, r2, r3
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	621a      	str	r2, [r3, #32]
 8007e1a:	e007      	b.n	8007e2c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	1d7a      	adds	r2, r7, #5
 8007e22:	32ff      	adds	r2, #255	@ 0xff
 8007e24:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d000      	beq.n	8007e36 <USB_EPStartXfer+0x292>
 8007e34:	e070      	b.n	8007f18 <USB_EPStartXfer+0x374>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2250      	movs	r2, #80	@ 0x50
 8007e3e:	5a9b      	ldrh	r3, [r3, r2]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	001a      	movs	r2, r3
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	189b      	adds	r3, r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	00da      	lsls	r2, r3, #3
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	18d3      	adds	r3, r2, r3
 8007e54:	4a48      	ldr	r2, [pc, #288]	@ (8007f78 <USB_EPStartXfer+0x3d4>)
 8007e56:	4694      	mov	ip, r2
 8007e58:	4463      	add	r3, ip
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	059b      	lsls	r3, r3, #22
 8007e64:	0d9b      	lsrs	r3, r3, #22
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	1d7b      	adds	r3, r7, #5
 8007e6e:	33ff      	adds	r3, #255	@ 0xff
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d108      	bne.n	8007e88 <USB_EPStartXfer+0x2e4>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	4a42      	ldr	r2, [pc, #264]	@ (8007f88 <USB_EPStartXfer+0x3e4>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	801a      	strh	r2, [r3, #0]
 8007e86:	e064      	b.n	8007f52 <USB_EPStartXfer+0x3ae>
 8007e88:	1d7b      	adds	r3, r7, #5
 8007e8a:	33ff      	adds	r3, #255	@ 0xff
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e90:	d81f      	bhi.n	8007ed2 <USB_EPStartXfer+0x32e>
 8007e92:	1d7b      	adds	r3, r7, #5
 8007e94:	33ff      	adds	r3, #255	@ 0xff
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	21fc      	movs	r1, #252	@ 0xfc
 8007e9c:	187a      	adds	r2, r7, r1
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	1d7b      	adds	r3, r7, #5
 8007ea2:	33ff      	adds	r3, #255	@ 0xff
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	d004      	beq.n	8007eb6 <USB_EPStartXfer+0x312>
 8007eac:	187b      	adds	r3, r7, r1
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	187a      	adds	r2, r7, r1
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	23fc      	movs	r3, #252	@ 0xfc
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	029b      	lsls	r3, r3, #10
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	e03f      	b.n	8007f52 <USB_EPStartXfer+0x3ae>
 8007ed2:	1d7b      	adds	r3, r7, #5
 8007ed4:	33ff      	adds	r3, #255	@ 0xff
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	21fc      	movs	r1, #252	@ 0xfc
 8007edc:	187a      	adds	r2, r7, r1
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	1d7b      	adds	r3, r7, #5
 8007ee2:	33ff      	adds	r3, #255	@ 0xff
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	221f      	movs	r2, #31
 8007ee8:	4013      	ands	r3, r2
 8007eea:	d104      	bne.n	8007ef6 <USB_EPStartXfer+0x352>
 8007eec:	187b      	adds	r3, r7, r1
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	187a      	adds	r2, r7, r1
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	23fc      	movs	r3, #252	@ 0xfc
 8007efe:	18fb      	adds	r3, r7, r3
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8007f88 <USB_EPStartXfer+0x3e4>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	801a      	strh	r2, [r3, #0]
 8007f16:	e01c      	b.n	8007f52 <USB_EPStartXfer+0x3ae>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d118      	bne.n	8007f52 <USB_EPStartXfer+0x3ae>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	623b      	str	r3, [r7, #32]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2250      	movs	r2, #80	@ 0x50
 8007f28:	5a9b      	ldrh	r3, [r3, r2]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	001a      	movs	r2, r3
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	189b      	adds	r3, r3, r2
 8007f32:	623b      	str	r3, [r7, #32]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	00da      	lsls	r2, r3, #3
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	18d3      	adds	r3, r2, r3
 8007f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007f78 <USB_EPStartXfer+0x3d4>)
 8007f40:	4694      	mov	ip, r2
 8007f42:	4463      	add	r3, ip
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	1d7b      	adds	r3, r7, #5
 8007f48:	33ff      	adds	r3, #255	@ 0xff
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f52:	2076      	movs	r0, #118	@ 0x76
 8007f54:	183b      	adds	r3, r7, r0
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	8912      	ldrh	r2, [r2, #8]
 8007f5a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	6959      	ldr	r1, [r3, #20]
 8007f60:	1d7b      	adds	r3, r7, #5
 8007f62:	33ff      	adds	r3, #255	@ 0xff
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	b29c      	uxth	r4, r3
 8007f68:	183b      	adds	r3, r7, r0
 8007f6a:	881a      	ldrh	r2, [r3, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	0023      	movs	r3, r4
 8007f70:	f001 f882 	bl	8009078 <USB_WritePMA>
 8007f74:	e329      	b.n	80085ca <USB_EPStartXfer+0xa26>
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	00000402 	.word	0x00000402
 8007f7c:	ffff8f8f 	.word	0xffff8f8f
 8007f80:	ffff8180 	.word	0xffff8180
 8007f84:	00000406 	.word	0x00000406
 8007f88:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	785b      	ldrb	r3, [r3, #1]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d000      	beq.n	8007f96 <USB_EPStartXfer+0x3f2>
 8007f94:	e070      	b.n	8008078 <USB_EPStartXfer+0x4d4>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2250      	movs	r2, #80	@ 0x50
 8007f9e:	5a9b      	ldrh	r3, [r3, r2]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	001a      	movs	r2, r3
 8007fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fa6:	189b      	adds	r3, r3, r2
 8007fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	00da      	lsls	r2, r3, #3
 8007fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fb2:	18d3      	adds	r3, r2, r3
 8007fb4:	4acd      	ldr	r2, [pc, #820]	@ (80082ec <USB_EPStartXfer+0x748>)
 8007fb6:	4694      	mov	ip, r2
 8007fb8:	4463      	add	r3, ip
 8007fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	059b      	lsls	r3, r3, #22
 8007fc4:	0d9b      	lsrs	r3, r3, #22
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fca:	801a      	strh	r2, [r3, #0]
 8007fcc:	1d7b      	adds	r3, r7, #5
 8007fce:	33ff      	adds	r3, #255	@ 0xff
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d108      	bne.n	8007fe8 <USB_EPStartXfer+0x444>
 8007fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	4ac4      	ldr	r2, [pc, #784]	@ (80082f0 <USB_EPStartXfer+0x74c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	e064      	b.n	80080b2 <USB_EPStartXfer+0x50e>
 8007fe8:	1d7b      	adds	r3, r7, #5
 8007fea:	33ff      	adds	r3, #255	@ 0xff
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ff0:	d81f      	bhi.n	8008032 <USB_EPStartXfer+0x48e>
 8007ff2:	1d7b      	adds	r3, r7, #5
 8007ff4:	33ff      	adds	r3, #255	@ 0xff
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	085b      	lsrs	r3, r3, #1
 8007ffa:	21f8      	movs	r1, #248	@ 0xf8
 8007ffc:	187a      	adds	r2, r7, r1
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	1d7b      	adds	r3, r7, #5
 8008002:	33ff      	adds	r3, #255	@ 0xff
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2201      	movs	r2, #1
 8008008:	4013      	ands	r3, r2
 800800a:	d004      	beq.n	8008016 <USB_EPStartXfer+0x472>
 800800c:	187b      	adds	r3, r7, r1
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	187a      	adds	r2, r7, r1
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29a      	uxth	r2, r3
 800801c:	23f8      	movs	r3, #248	@ 0xf8
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	029b      	lsls	r3, r3, #10
 8008026:	b29b      	uxth	r3, r3
 8008028:	4313      	orrs	r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	e03f      	b.n	80080b2 <USB_EPStartXfer+0x50e>
 8008032:	1d7b      	adds	r3, r7, #5
 8008034:	33ff      	adds	r3, #255	@ 0xff
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	21f8      	movs	r1, #248	@ 0xf8
 800803c:	187a      	adds	r2, r7, r1
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	1d7b      	adds	r3, r7, #5
 8008042:	33ff      	adds	r3, #255	@ 0xff
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	221f      	movs	r2, #31
 8008048:	4013      	ands	r3, r2
 800804a:	d104      	bne.n	8008056 <USB_EPStartXfer+0x4b2>
 800804c:	187b      	adds	r3, r7, r1
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3b01      	subs	r3, #1
 8008052:	187a      	adds	r2, r7, r1
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29a      	uxth	r2, r3
 800805c:	23f8      	movs	r3, #248	@ 0xf8
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	029b      	lsls	r3, r3, #10
 8008066:	b29b      	uxth	r3, r3
 8008068:	4313      	orrs	r3, r2
 800806a:	b29b      	uxth	r3, r3
 800806c:	4aa0      	ldr	r2, [pc, #640]	@ (80082f0 <USB_EPStartXfer+0x74c>)
 800806e:	4313      	orrs	r3, r2
 8008070:	b29a      	uxth	r2, r3
 8008072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	e01c      	b.n	80080b2 <USB_EPStartXfer+0x50e>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d118      	bne.n	80080b2 <USB_EPStartXfer+0x50e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	653b      	str	r3, [r7, #80]	@ 0x50
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2250      	movs	r2, #80	@ 0x50
 8008088:	5a9b      	ldrh	r3, [r3, r2]
 800808a:	b29b      	uxth	r3, r3
 800808c:	001a      	movs	r2, r3
 800808e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008090:	189b      	adds	r3, r3, r2
 8008092:	653b      	str	r3, [r7, #80]	@ 0x50
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	00da      	lsls	r2, r3, #3
 800809a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800809c:	18d3      	adds	r3, r2, r3
 800809e:	4a93      	ldr	r2, [pc, #588]	@ (80082ec <USB_EPStartXfer+0x748>)
 80080a0:	4694      	mov	ip, r2
 80080a2:	4463      	add	r3, ip
 80080a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080a6:	1d7b      	adds	r3, r7, #5
 80080a8:	33ff      	adds	r3, #255	@ 0xff
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080b2:	2076      	movs	r0, #118	@ 0x76
 80080b4:	183b      	adds	r3, r7, r0
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	8912      	ldrh	r2, [r2, #8]
 80080ba:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	6959      	ldr	r1, [r3, #20]
 80080c0:	1d7b      	adds	r3, r7, #5
 80080c2:	33ff      	adds	r3, #255	@ 0xff
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	b29c      	uxth	r4, r3
 80080c8:	183b      	adds	r3, r7, r0
 80080ca:	881a      	ldrh	r2, [r3, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	0023      	movs	r3, r4
 80080d0:	f000 ffd2 	bl	8009078 <USB_WritePMA>
            ep->xfer_buff += len;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	695a      	ldr	r2, [r3, #20]
 80080d8:	1d7b      	adds	r3, r7, #5
 80080da:	33ff      	adds	r3, #255	@ 0xff
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	18d2      	adds	r2, r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	6a1a      	ldr	r2, [r3, #32]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d908      	bls.n	8008102 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	1d7b      	adds	r3, r7, #5
 80080f6:	33ff      	adds	r3, #255	@ 0xff
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	1ad2      	subs	r2, r2, r3
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	621a      	str	r2, [r3, #32]
 8008100:	e007      	b.n	8008112 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	1d7a      	adds	r2, r7, #5
 8008108:	32ff      	adds	r2, #255	@ 0xff
 800810a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2200      	movs	r2, #0
 8008110:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	643b      	str	r3, [r7, #64]	@ 0x40
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d000      	beq.n	8008120 <USB_EPStartXfer+0x57c>
 800811e:	e070      	b.n	8008202 <USB_EPStartXfer+0x65e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2250      	movs	r2, #80	@ 0x50
 8008128:	5a9b      	ldrh	r3, [r3, r2]
 800812a:	b29b      	uxth	r3, r3
 800812c:	001a      	movs	r2, r3
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	189b      	adds	r3, r3, r2
 8008132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	00da      	lsls	r2, r3, #3
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813c:	18d3      	adds	r3, r2, r3
 800813e:	4a6d      	ldr	r2, [pc, #436]	@ (80082f4 <USB_EPStartXfer+0x750>)
 8008140:	4694      	mov	ip, r2
 8008142:	4463      	add	r3, ip
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
 8008146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	059b      	lsls	r3, r3, #22
 800814e:	0d9b      	lsrs	r3, r3, #22
 8008150:	b29a      	uxth	r2, r3
 8008152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008154:	801a      	strh	r2, [r3, #0]
 8008156:	1d7b      	adds	r3, r7, #5
 8008158:	33ff      	adds	r3, #255	@ 0xff
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d108      	bne.n	8008172 <USB_EPStartXfer+0x5ce>
 8008160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	b29b      	uxth	r3, r3
 8008166:	4a62      	ldr	r2, [pc, #392]	@ (80082f0 <USB_EPStartXfer+0x74c>)
 8008168:	4313      	orrs	r3, r2
 800816a:	b29a      	uxth	r2, r3
 800816c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816e:	801a      	strh	r2, [r3, #0]
 8008170:	e062      	b.n	8008238 <USB_EPStartXfer+0x694>
 8008172:	1d7b      	adds	r3, r7, #5
 8008174:	33ff      	adds	r3, #255	@ 0xff
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b3e      	cmp	r3, #62	@ 0x3e
 800817a:	d81f      	bhi.n	80081bc <USB_EPStartXfer+0x618>
 800817c:	1d7b      	adds	r3, r7, #5
 800817e:	33ff      	adds	r3, #255	@ 0xff
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	085b      	lsrs	r3, r3, #1
 8008184:	21f4      	movs	r1, #244	@ 0xf4
 8008186:	187a      	adds	r2, r7, r1
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	1d7b      	adds	r3, r7, #5
 800818c:	33ff      	adds	r3, #255	@ 0xff
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2201      	movs	r2, #1
 8008192:	4013      	ands	r3, r2
 8008194:	d004      	beq.n	80081a0 <USB_EPStartXfer+0x5fc>
 8008196:	187b      	adds	r3, r7, r1
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3301      	adds	r3, #1
 800819c:	187a      	adds	r2, r7, r1
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	23f4      	movs	r3, #244	@ 0xf4
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	029b      	lsls	r3, r3, #10
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	e03d      	b.n	8008238 <USB_EPStartXfer+0x694>
 80081bc:	1d7b      	adds	r3, r7, #5
 80081be:	33ff      	adds	r3, #255	@ 0xff
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	21f4      	movs	r1, #244	@ 0xf4
 80081c6:	187a      	adds	r2, r7, r1
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	1d7b      	adds	r3, r7, #5
 80081cc:	33ff      	adds	r3, #255	@ 0xff
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	221f      	movs	r2, #31
 80081d2:	4013      	ands	r3, r2
 80081d4:	d104      	bne.n	80081e0 <USB_EPStartXfer+0x63c>
 80081d6:	187b      	adds	r3, r7, r1
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3b01      	subs	r3, #1
 80081dc:	187a      	adds	r2, r7, r1
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	23f4      	movs	r3, #244	@ 0xf4
 80081e8:	18fb      	adds	r3, r7, r3
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	029b      	lsls	r3, r3, #10
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	4313      	orrs	r3, r2
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	4a3e      	ldr	r2, [pc, #248]	@ (80082f0 <USB_EPStartXfer+0x74c>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	e01a      	b.n	8008238 <USB_EPStartXfer+0x694>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d116      	bne.n	8008238 <USB_EPStartXfer+0x694>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2250      	movs	r2, #80	@ 0x50
 800820e:	5a9b      	ldrh	r3, [r3, r2]
 8008210:	b29b      	uxth	r3, r3
 8008212:	001a      	movs	r2, r3
 8008214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008216:	189b      	adds	r3, r3, r2
 8008218:	643b      	str	r3, [r7, #64]	@ 0x40
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	00da      	lsls	r2, r3, #3
 8008220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008222:	18d3      	adds	r3, r2, r3
 8008224:	4a33      	ldr	r2, [pc, #204]	@ (80082f4 <USB_EPStartXfer+0x750>)
 8008226:	4694      	mov	ip, r2
 8008228:	4463      	add	r3, ip
 800822a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800822c:	1d7b      	adds	r3, r7, #5
 800822e:	33ff      	adds	r3, #255	@ 0xff
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	b29a      	uxth	r2, r3
 8008234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008236:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008238:	2076      	movs	r0, #118	@ 0x76
 800823a:	183b      	adds	r3, r7, r0
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	8952      	ldrh	r2, [r2, #10]
 8008240:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	6959      	ldr	r1, [r3, #20]
 8008246:	1d7b      	adds	r3, r7, #5
 8008248:	33ff      	adds	r3, #255	@ 0xff
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	b29c      	uxth	r4, r3
 800824e:	183b      	adds	r3, r7, r0
 8008250:	881a      	ldrh	r2, [r3, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	0023      	movs	r3, r4
 8008256:	f000 ff0f 	bl	8009078 <USB_WritePMA>
 800825a:	e1b6      	b.n	80085ca <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	1d7a      	adds	r2, r7, #5
 8008262:	32ff      	adds	r2, #255	@ 0xff
 8008264:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	18d3      	adds	r3, r2, r3
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29a      	uxth	r2, r3
 8008274:	2062      	movs	r0, #98	@ 0x62
 8008276:	183b      	adds	r3, r7, r0
 8008278:	491f      	ldr	r1, [pc, #124]	@ (80082f8 <USB_EPStartXfer+0x754>)
 800827a:	400a      	ands	r2, r1
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	18d3      	adds	r3, r2, r3
 8008288:	183a      	adds	r2, r7, r0
 800828a:	8812      	ldrh	r2, [r2, #0]
 800828c:	491b      	ldr	r1, [pc, #108]	@ (80082fc <USB_EPStartXfer+0x758>)
 800828e:	430a      	orrs	r2, r1
 8008290:	b292      	uxth	r2, r2
 8008292:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2250      	movs	r2, #80	@ 0x50
 800829c:	5a9b      	ldrh	r3, [r3, r2]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	001a      	movs	r2, r3
 80082a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082a4:	189b      	adds	r3, r3, r2
 80082a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	00da      	lsls	r2, r3, #3
 80082ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082b0:	18d3      	adds	r3, r2, r3
 80082b2:	4a0e      	ldr	r2, [pc, #56]	@ (80082ec <USB_EPStartXfer+0x748>)
 80082b4:	4694      	mov	ip, r2
 80082b6:	4463      	add	r3, ip
 80082b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082ba:	1d7b      	adds	r3, r7, #5
 80082bc:	33ff      	adds	r3, #255	@ 0xff
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082c6:	2076      	movs	r0, #118	@ 0x76
 80082c8:	183b      	adds	r3, r7, r0
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	8912      	ldrh	r2, [r2, #8]
 80082ce:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	6959      	ldr	r1, [r3, #20]
 80082d4:	1d7b      	adds	r3, r7, #5
 80082d6:	33ff      	adds	r3, #255	@ 0xff
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	b29c      	uxth	r4, r3
 80082dc:	183b      	adds	r3, r7, r0
 80082de:	881a      	ldrh	r2, [r3, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	0023      	movs	r3, r4
 80082e4:	f000 fec8 	bl	8009078 <USB_WritePMA>
 80082e8:	e16f      	b.n	80085ca <USB_EPStartXfer+0xa26>
 80082ea:	46c0      	nop			@ (mov r8, r8)
 80082ec:	00000402 	.word	0x00000402
 80082f0:	ffff8000 	.word	0xffff8000
 80082f4:	00000406 	.word	0x00000406
 80082f8:	ffff8e8f 	.word	0xffff8e8f
 80082fc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	6a1a      	ldr	r2, [r3, #32]
 8008304:	1d7b      	adds	r3, r7, #5
 8008306:	33ff      	adds	r3, #255	@ 0xff
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	18d3      	adds	r3, r2, r3
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	b29b      	uxth	r3, r3
 800831e:	001a      	movs	r2, r3
 8008320:	2340      	movs	r3, #64	@ 0x40
 8008322:	4013      	ands	r3, r2
 8008324:	d100      	bne.n	8008328 <USB_EPStartXfer+0x784>
 8008326:	e0a4      	b.n	8008472 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	673b      	str	r3, [r7, #112]	@ 0x70
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d000      	beq.n	8008336 <USB_EPStartXfer+0x792>
 8008334:	e070      	b.n	8008418 <USB_EPStartXfer+0x874>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2250      	movs	r2, #80	@ 0x50
 800833e:	5a9b      	ldrh	r3, [r3, r2]
 8008340:	b29b      	uxth	r3, r3
 8008342:	001a      	movs	r2, r3
 8008344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008346:	189b      	adds	r3, r3, r2
 8008348:	66bb      	str	r3, [r7, #104]	@ 0x68
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	00da      	lsls	r2, r3, #3
 8008350:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008352:	18d3      	adds	r3, r2, r3
 8008354:	4ada      	ldr	r2, [pc, #872]	@ (80086c0 <USB_EPStartXfer+0xb1c>)
 8008356:	4694      	mov	ip, r2
 8008358:	4463      	add	r3, ip
 800835a:	667b      	str	r3, [r7, #100]	@ 0x64
 800835c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	059b      	lsls	r3, r3, #22
 8008364:	0d9b      	lsrs	r3, r3, #22
 8008366:	b29a      	uxth	r2, r3
 8008368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	1d7b      	adds	r3, r7, #5
 800836e:	33ff      	adds	r3, #255	@ 0xff
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d108      	bne.n	8008388 <USB_EPStartXfer+0x7e4>
 8008376:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	4ad1      	ldr	r2, [pc, #836]	@ (80086c4 <USB_EPStartXfer+0xb20>)
 800837e:	4313      	orrs	r3, r2
 8008380:	b29a      	uxth	r2, r3
 8008382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	e062      	b.n	800844e <USB_EPStartXfer+0x8aa>
 8008388:	1d7b      	adds	r3, r7, #5
 800838a:	33ff      	adds	r3, #255	@ 0xff
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008390:	d81f      	bhi.n	80083d2 <USB_EPStartXfer+0x82e>
 8008392:	1d7b      	adds	r3, r7, #5
 8008394:	33ff      	adds	r3, #255	@ 0xff
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	21f0      	movs	r1, #240	@ 0xf0
 800839c:	187a      	adds	r2, r7, r1
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	1d7b      	adds	r3, r7, #5
 80083a2:	33ff      	adds	r3, #255	@ 0xff
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2201      	movs	r2, #1
 80083a8:	4013      	ands	r3, r2
 80083aa:	d004      	beq.n	80083b6 <USB_EPStartXfer+0x812>
 80083ac:	187b      	adds	r3, r7, r1
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	187a      	adds	r2, r7, r1
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	23f0      	movs	r3, #240	@ 0xf0
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	029b      	lsls	r3, r3, #10
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083ce:	801a      	strh	r2, [r3, #0]
 80083d0:	e03d      	b.n	800844e <USB_EPStartXfer+0x8aa>
 80083d2:	1d7b      	adds	r3, r7, #5
 80083d4:	33ff      	adds	r3, #255	@ 0xff
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	21f0      	movs	r1, #240	@ 0xf0
 80083dc:	187a      	adds	r2, r7, r1
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	1d7b      	adds	r3, r7, #5
 80083e2:	33ff      	adds	r3, #255	@ 0xff
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	221f      	movs	r2, #31
 80083e8:	4013      	ands	r3, r2
 80083ea:	d104      	bne.n	80083f6 <USB_EPStartXfer+0x852>
 80083ec:	187b      	adds	r3, r7, r1
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	187a      	adds	r2, r7, r1
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	23f0      	movs	r3, #240	@ 0xf0
 80083fe:	18fb      	adds	r3, r7, r3
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	029b      	lsls	r3, r3, #10
 8008406:	b29b      	uxth	r3, r3
 8008408:	4313      	orrs	r3, r2
 800840a:	b29b      	uxth	r3, r3
 800840c:	4aad      	ldr	r2, [pc, #692]	@ (80086c4 <USB_EPStartXfer+0xb20>)
 800840e:	4313      	orrs	r3, r2
 8008410:	b29a      	uxth	r2, r3
 8008412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008414:	801a      	strh	r2, [r3, #0]
 8008416:	e01a      	b.n	800844e <USB_EPStartXfer+0x8aa>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d116      	bne.n	800844e <USB_EPStartXfer+0x8aa>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2250      	movs	r2, #80	@ 0x50
 8008424:	5a9b      	ldrh	r3, [r3, r2]
 8008426:	b29b      	uxth	r3, r3
 8008428:	001a      	movs	r2, r3
 800842a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800842c:	189b      	adds	r3, r3, r2
 800842e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	00da      	lsls	r2, r3, #3
 8008436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008438:	18d3      	adds	r3, r2, r3
 800843a:	4aa1      	ldr	r2, [pc, #644]	@ (80086c0 <USB_EPStartXfer+0xb1c>)
 800843c:	4694      	mov	ip, r2
 800843e:	4463      	add	r3, ip
 8008440:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008442:	1d7b      	adds	r3, r7, #5
 8008444:	33ff      	adds	r3, #255	@ 0xff
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	b29a      	uxth	r2, r3
 800844a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800844c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800844e:	2076      	movs	r0, #118	@ 0x76
 8008450:	183b      	adds	r3, r7, r0
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	8952      	ldrh	r2, [r2, #10]
 8008456:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	6959      	ldr	r1, [r3, #20]
 800845c:	1d7b      	adds	r3, r7, #5
 800845e:	33ff      	adds	r3, #255	@ 0xff
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	b29c      	uxth	r4, r3
 8008464:	183b      	adds	r3, r7, r0
 8008466:	881a      	ldrh	r2, [r3, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	0023      	movs	r3, r4
 800846c:	f000 fe04 	bl	8009078 <USB_WritePMA>
 8008470:	e0ab      	b.n	80085ca <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d000      	beq.n	800847c <USB_EPStartXfer+0x8d8>
 800847a:	e070      	b.n	800855e <USB_EPStartXfer+0x9ba>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2250      	movs	r2, #80	@ 0x50
 8008484:	5a9b      	ldrh	r3, [r3, r2]
 8008486:	b29b      	uxth	r3, r3
 8008488:	001a      	movs	r2, r3
 800848a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800848c:	189b      	adds	r3, r3, r2
 800848e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	00da      	lsls	r2, r3, #3
 8008496:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008498:	18d3      	adds	r3, r2, r3
 800849a:	4a8b      	ldr	r2, [pc, #556]	@ (80086c8 <USB_EPStartXfer+0xb24>)
 800849c:	4694      	mov	ip, r2
 800849e:	4463      	add	r3, ip
 80084a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	059b      	lsls	r3, r3, #22
 80084aa:	0d9b      	lsrs	r3, r3, #22
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084b0:	801a      	strh	r2, [r3, #0]
 80084b2:	1d7b      	adds	r3, r7, #5
 80084b4:	33ff      	adds	r3, #255	@ 0xff
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d108      	bne.n	80084ce <USB_EPStartXfer+0x92a>
 80084bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4a80      	ldr	r2, [pc, #512]	@ (80086c4 <USB_EPStartXfer+0xb20>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084ca:	801a      	strh	r2, [r3, #0]
 80084cc:	e06c      	b.n	80085a8 <USB_EPStartXfer+0xa04>
 80084ce:	1d7b      	adds	r3, r7, #5
 80084d0:	33ff      	adds	r3, #255	@ 0xff
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80084d6:	d81f      	bhi.n	8008518 <USB_EPStartXfer+0x974>
 80084d8:	1d7b      	adds	r3, r7, #5
 80084da:	33ff      	adds	r3, #255	@ 0xff
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	21ec      	movs	r1, #236	@ 0xec
 80084e2:	187a      	adds	r2, r7, r1
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	1d7b      	adds	r3, r7, #5
 80084e8:	33ff      	adds	r3, #255	@ 0xff
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2201      	movs	r2, #1
 80084ee:	4013      	ands	r3, r2
 80084f0:	d004      	beq.n	80084fc <USB_EPStartXfer+0x958>
 80084f2:	187b      	adds	r3, r7, r1
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3301      	adds	r3, #1
 80084f8:	187a      	adds	r2, r7, r1
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29a      	uxth	r2, r3
 8008502:	23ec      	movs	r3, #236	@ 0xec
 8008504:	18fb      	adds	r3, r7, r3
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	b29b      	uxth	r3, r3
 800850a:	029b      	lsls	r3, r3, #10
 800850c:	b29b      	uxth	r3, r3
 800850e:	4313      	orrs	r3, r2
 8008510:	b29a      	uxth	r2, r3
 8008512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	e047      	b.n	80085a8 <USB_EPStartXfer+0xa04>
 8008518:	1d7b      	adds	r3, r7, #5
 800851a:	33ff      	adds	r3, #255	@ 0xff
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	095b      	lsrs	r3, r3, #5
 8008520:	21ec      	movs	r1, #236	@ 0xec
 8008522:	187a      	adds	r2, r7, r1
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	1d7b      	adds	r3, r7, #5
 8008528:	33ff      	adds	r3, #255	@ 0xff
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	221f      	movs	r2, #31
 800852e:	4013      	ands	r3, r2
 8008530:	d104      	bne.n	800853c <USB_EPStartXfer+0x998>
 8008532:	187b      	adds	r3, r7, r1
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3b01      	subs	r3, #1
 8008538:	187a      	adds	r2, r7, r1
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29a      	uxth	r2, r3
 8008542:	23ec      	movs	r3, #236	@ 0xec
 8008544:	18fb      	adds	r3, r7, r3
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	b29b      	uxth	r3, r3
 800854a:	029b      	lsls	r3, r3, #10
 800854c:	b29b      	uxth	r3, r3
 800854e:	4313      	orrs	r3, r2
 8008550:	b29b      	uxth	r3, r3
 8008552:	4a5c      	ldr	r2, [pc, #368]	@ (80086c4 <USB_EPStartXfer+0xb20>)
 8008554:	4313      	orrs	r3, r2
 8008556:	b29a      	uxth	r2, r3
 8008558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e024      	b.n	80085a8 <USB_EPStartXfer+0xa04>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d120      	bne.n	80085a8 <USB_EPStartXfer+0xa04>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2184      	movs	r1, #132	@ 0x84
 800856a:	187a      	adds	r2, r7, r1
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2250      	movs	r2, #80	@ 0x50
 8008572:	5a9b      	ldrh	r3, [r3, r2]
 8008574:	b29b      	uxth	r3, r3
 8008576:	001a      	movs	r2, r3
 8008578:	187b      	adds	r3, r7, r1
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	189b      	adds	r3, r3, r2
 800857e:	187a      	adds	r2, r7, r1
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	00da      	lsls	r2, r3, #3
 8008588:	187b      	adds	r3, r7, r1
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	18d3      	adds	r3, r2, r3
 800858e:	4a4e      	ldr	r2, [pc, #312]	@ (80086c8 <USB_EPStartXfer+0xb24>)
 8008590:	4694      	mov	ip, r2
 8008592:	4463      	add	r3, ip
 8008594:	2180      	movs	r1, #128	@ 0x80
 8008596:	187a      	adds	r2, r7, r1
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	1d7b      	adds	r3, r7, #5
 800859c:	33ff      	adds	r3, #255	@ 0xff
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	187b      	adds	r3, r7, r1
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80085a8:	2076      	movs	r0, #118	@ 0x76
 80085aa:	183b      	adds	r3, r7, r0
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	8912      	ldrh	r2, [r2, #8]
 80085b0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6959      	ldr	r1, [r3, #20]
 80085b6:	1d7b      	adds	r3, r7, #5
 80085b8:	33ff      	adds	r3, #255	@ 0xff
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	b29c      	uxth	r4, r3
 80085be:	183b      	adds	r3, r7, r0
 80085c0:	881a      	ldrh	r2, [r3, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	0023      	movs	r3, r4
 80085c6:	f000 fd57 	bl	8009078 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	18d3      	adds	r3, r2, r3
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	200a      	movs	r0, #10
 80085da:	183b      	adds	r3, r7, r0
 80085dc:	493b      	ldr	r1, [pc, #236]	@ (80086cc <USB_EPStartXfer+0xb28>)
 80085de:	400a      	ands	r2, r1
 80085e0:	801a      	strh	r2, [r3, #0]
 80085e2:	183b      	adds	r3, r7, r0
 80085e4:	183a      	adds	r2, r7, r0
 80085e6:	8812      	ldrh	r2, [r2, #0]
 80085e8:	2110      	movs	r1, #16
 80085ea:	404a      	eors	r2, r1
 80085ec:	801a      	strh	r2, [r3, #0]
 80085ee:	183b      	adds	r3, r7, r0
 80085f0:	183a      	adds	r2, r7, r0
 80085f2:	8812      	ldrh	r2, [r2, #0]
 80085f4:	2120      	movs	r1, #32
 80085f6:	404a      	eors	r2, r1
 80085f8:	801a      	strh	r2, [r3, #0]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	18d3      	adds	r3, r2, r3
 8008604:	183a      	adds	r2, r7, r0
 8008606:	8812      	ldrh	r2, [r2, #0]
 8008608:	4931      	ldr	r1, [pc, #196]	@ (80086d0 <USB_EPStartXfer+0xb2c>)
 800860a:	430a      	orrs	r2, r1
 800860c:	b292      	uxth	r2, r2
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	f000 fbe9 	bl	8008de6 <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	7b1b      	ldrb	r3, [r3, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d000      	beq.n	800861e <USB_EPStartXfer+0xa7a>
 800861c:	e0a8      	b.n	8008770 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	699a      	ldr	r2, [r3, #24]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	429a      	cmp	r2, r3
 8008628:	d90d      	bls.n	8008646 <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	1d7a      	adds	r2, r7, #5
 8008630:	32ff      	adds	r2, #255	@ 0xff
 8008632:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	1d7b      	adds	r3, r7, #5
 800863a:	33ff      	adds	r3, #255	@ 0xff
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	619a      	str	r2, [r3, #24]
 8008644:	e007      	b.n	8008656 <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	1d7a      	adds	r2, r7, #5
 800864c:	32ff      	adds	r2, #255	@ 0xff
 800864e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2190      	movs	r1, #144	@ 0x90
 800865a:	187a      	adds	r2, r7, r1
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2250      	movs	r2, #80	@ 0x50
 8008662:	5a9b      	ldrh	r3, [r3, r2]
 8008664:	b29b      	uxth	r3, r3
 8008666:	001a      	movs	r2, r3
 8008668:	187b      	adds	r3, r7, r1
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	189b      	adds	r3, r3, r2
 800866e:	187a      	adds	r2, r7, r1
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	00da      	lsls	r2, r3, #3
 8008678:	187b      	adds	r3, r7, r1
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	18d3      	adds	r3, r2, r3
 800867e:	4a10      	ldr	r2, [pc, #64]	@ (80086c0 <USB_EPStartXfer+0xb1c>)
 8008680:	4694      	mov	ip, r2
 8008682:	4463      	add	r3, ip
 8008684:	218c      	movs	r1, #140	@ 0x8c
 8008686:	187a      	adds	r2, r7, r1
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	187b      	adds	r3, r7, r1
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	059b      	lsls	r3, r3, #22
 8008694:	0d9b      	lsrs	r3, r3, #22
 8008696:	b29a      	uxth	r2, r3
 8008698:	187b      	adds	r3, r7, r1
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	801a      	strh	r2, [r3, #0]
 800869e:	1d7b      	adds	r3, r7, #5
 80086a0:	33ff      	adds	r3, #255	@ 0xff
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d115      	bne.n	80086d4 <USB_EPStartXfer+0xb30>
 80086a8:	187b      	adds	r3, r7, r1
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	4a04      	ldr	r2, [pc, #16]	@ (80086c4 <USB_EPStartXfer+0xb20>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	187b      	adds	r3, r7, r1
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	e36e      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
 80086be:	46c0      	nop			@ (mov r8, r8)
 80086c0:	00000406 	.word	0x00000406
 80086c4:	ffff8000 	.word	0xffff8000
 80086c8:	00000402 	.word	0x00000402
 80086cc:	ffff8fbf 	.word	0xffff8fbf
 80086d0:	ffff8080 	.word	0xffff8080
 80086d4:	1d7b      	adds	r3, r7, #5
 80086d6:	33ff      	adds	r3, #255	@ 0xff
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b3e      	cmp	r3, #62	@ 0x3e
 80086dc:	d822      	bhi.n	8008724 <USB_EPStartXfer+0xb80>
 80086de:	1d7b      	adds	r3, r7, #5
 80086e0:	33ff      	adds	r3, #255	@ 0xff
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	085b      	lsrs	r3, r3, #1
 80086e6:	21e8      	movs	r1, #232	@ 0xe8
 80086e8:	187a      	adds	r2, r7, r1
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	1d7b      	adds	r3, r7, #5
 80086ee:	33ff      	adds	r3, #255	@ 0xff
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2201      	movs	r2, #1
 80086f4:	4013      	ands	r3, r2
 80086f6:	d004      	beq.n	8008702 <USB_EPStartXfer+0xb5e>
 80086f8:	187b      	adds	r3, r7, r1
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3301      	adds	r3, #1
 80086fe:	187a      	adds	r2, r7, r1
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	218c      	movs	r1, #140	@ 0x8c
 8008704:	187b      	adds	r3, r7, r1
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	b29a      	uxth	r2, r3
 800870c:	23e8      	movs	r3, #232	@ 0xe8
 800870e:	18fb      	adds	r3, r7, r3
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	029b      	lsls	r3, r3, #10
 8008716:	b29b      	uxth	r3, r3
 8008718:	4313      	orrs	r3, r2
 800871a:	b29a      	uxth	r2, r3
 800871c:	187b      	adds	r3, r7, r1
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	801a      	strh	r2, [r3, #0]
 8008722:	e33b      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
 8008724:	1d7b      	adds	r3, r7, #5
 8008726:	33ff      	adds	r3, #255	@ 0xff
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	095b      	lsrs	r3, r3, #5
 800872c:	21e8      	movs	r1, #232	@ 0xe8
 800872e:	187a      	adds	r2, r7, r1
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	1d7b      	adds	r3, r7, #5
 8008734:	33ff      	adds	r3, #255	@ 0xff
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	221f      	movs	r2, #31
 800873a:	4013      	ands	r3, r2
 800873c:	d104      	bne.n	8008748 <USB_EPStartXfer+0xba4>
 800873e:	187b      	adds	r3, r7, r1
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3b01      	subs	r3, #1
 8008744:	187a      	adds	r2, r7, r1
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	218c      	movs	r1, #140	@ 0x8c
 800874a:	187b      	adds	r3, r7, r1
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	b29a      	uxth	r2, r3
 8008752:	23e8      	movs	r3, #232	@ 0xe8
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	029b      	lsls	r3, r3, #10
 800875c:	b29b      	uxth	r3, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	b29b      	uxth	r3, r3
 8008762:	4ad7      	ldr	r2, [pc, #860]	@ (8008ac0 <USB_EPStartXfer+0xf1c>)
 8008764:	4313      	orrs	r3, r2
 8008766:	b29a      	uxth	r2, r3
 8008768:	187b      	adds	r3, r7, r1
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	801a      	strh	r2, [r3, #0]
 800876e:	e315      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	78db      	ldrb	r3, [r3, #3]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d000      	beq.n	800877a <USB_EPStartXfer+0xbd6>
 8008778:	e189      	b.n	8008a8e <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d000      	beq.n	8008784 <USB_EPStartXfer+0xbe0>
 8008782:	e07b      	b.n	800887c <USB_EPStartXfer+0xcd8>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	21ac      	movs	r1, #172	@ 0xac
 8008788:	187a      	adds	r2, r7, r1
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2250      	movs	r2, #80	@ 0x50
 8008790:	5a9b      	ldrh	r3, [r3, r2]
 8008792:	b29b      	uxth	r3, r3
 8008794:	001a      	movs	r2, r3
 8008796:	187b      	adds	r3, r7, r1
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	189b      	adds	r3, r3, r2
 800879c:	187a      	adds	r2, r7, r1
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	00da      	lsls	r2, r3, #3
 80087a6:	187b      	adds	r3, r7, r1
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	18d3      	adds	r3, r2, r3
 80087ac:	4ac5      	ldr	r2, [pc, #788]	@ (8008ac4 <USB_EPStartXfer+0xf20>)
 80087ae:	4694      	mov	ip, r2
 80087b0:	4463      	add	r3, ip
 80087b2:	21a8      	movs	r1, #168	@ 0xa8
 80087b4:	187a      	adds	r2, r7, r1
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	187b      	adds	r3, r7, r1
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	059b      	lsls	r3, r3, #22
 80087c2:	0d9b      	lsrs	r3, r3, #22
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	187b      	adds	r3, r7, r1
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	801a      	strh	r2, [r3, #0]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <USB_EPStartXfer+0xc46>
 80087d4:	187b      	adds	r3, r7, r1
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	4ab8      	ldr	r2, [pc, #736]	@ (8008ac0 <USB_EPStartXfer+0xf1c>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	187b      	adds	r3, r7, r1
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	e06c      	b.n	80088c4 <USB_EPStartXfer+0xd20>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80087f0:	d820      	bhi.n	8008834 <USB_EPStartXfer+0xc90>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	085b      	lsrs	r3, r3, #1
 80087f8:	21e4      	movs	r1, #228	@ 0xe4
 80087fa:	187a      	adds	r2, r7, r1
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	2201      	movs	r2, #1
 8008804:	4013      	ands	r3, r2
 8008806:	d004      	beq.n	8008812 <USB_EPStartXfer+0xc6e>
 8008808:	187b      	adds	r3, r7, r1
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3301      	adds	r3, #1
 800880e:	187a      	adds	r2, r7, r1
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	21a8      	movs	r1, #168	@ 0xa8
 8008814:	187b      	adds	r3, r7, r1
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29a      	uxth	r2, r3
 800881c:	23e4      	movs	r3, #228	@ 0xe4
 800881e:	18fb      	adds	r3, r7, r3
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	029b      	lsls	r3, r3, #10
 8008826:	b29b      	uxth	r3, r3
 8008828:	4313      	orrs	r3, r2
 800882a:	b29a      	uxth	r2, r3
 800882c:	187b      	adds	r3, r7, r1
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	801a      	strh	r2, [r3, #0]
 8008832:	e047      	b.n	80088c4 <USB_EPStartXfer+0xd20>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	095b      	lsrs	r3, r3, #5
 800883a:	21e4      	movs	r1, #228	@ 0xe4
 800883c:	187a      	adds	r2, r7, r1
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	221f      	movs	r2, #31
 8008846:	4013      	ands	r3, r2
 8008848:	d104      	bne.n	8008854 <USB_EPStartXfer+0xcb0>
 800884a:	187b      	adds	r3, r7, r1
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3b01      	subs	r3, #1
 8008850:	187a      	adds	r2, r7, r1
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	21a8      	movs	r1, #168	@ 0xa8
 8008856:	187b      	adds	r3, r7, r1
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29a      	uxth	r2, r3
 800885e:	23e4      	movs	r3, #228	@ 0xe4
 8008860:	18fb      	adds	r3, r7, r3
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	b29b      	uxth	r3, r3
 8008866:	029b      	lsls	r3, r3, #10
 8008868:	b29b      	uxth	r3, r3
 800886a:	4313      	orrs	r3, r2
 800886c:	b29b      	uxth	r3, r3
 800886e:	4a94      	ldr	r2, [pc, #592]	@ (8008ac0 <USB_EPStartXfer+0xf1c>)
 8008870:	4313      	orrs	r3, r2
 8008872:	b29a      	uxth	r2, r3
 8008874:	187b      	adds	r3, r7, r1
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	801a      	strh	r2, [r3, #0]
 800887a:	e023      	b.n	80088c4 <USB_EPStartXfer+0xd20>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d11f      	bne.n	80088c4 <USB_EPStartXfer+0xd20>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	21b4      	movs	r1, #180	@ 0xb4
 8008888:	187a      	adds	r2, r7, r1
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2250      	movs	r2, #80	@ 0x50
 8008890:	5a9b      	ldrh	r3, [r3, r2]
 8008892:	b29b      	uxth	r3, r3
 8008894:	001a      	movs	r2, r3
 8008896:	187b      	adds	r3, r7, r1
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	189b      	adds	r3, r3, r2
 800889c:	187a      	adds	r2, r7, r1
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	00da      	lsls	r2, r3, #3
 80088a6:	187b      	adds	r3, r7, r1
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	18d3      	adds	r3, r2, r3
 80088ac:	4a85      	ldr	r2, [pc, #532]	@ (8008ac4 <USB_EPStartXfer+0xf20>)
 80088ae:	4694      	mov	ip, r2
 80088b0:	4463      	add	r3, ip
 80088b2:	21b0      	movs	r1, #176	@ 0xb0
 80088b4:	187a      	adds	r2, r7, r1
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	187b      	adds	r3, r7, r1
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	801a      	strh	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	22a4      	movs	r2, #164	@ 0xa4
 80088c8:	18ba      	adds	r2, r7, r2
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d000      	beq.n	80088d6 <USB_EPStartXfer+0xd32>
 80088d4:	e07b      	b.n	80089ce <USB_EPStartXfer+0xe2a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	219c      	movs	r1, #156	@ 0x9c
 80088da:	187a      	adds	r2, r7, r1
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2250      	movs	r2, #80	@ 0x50
 80088e2:	5a9b      	ldrh	r3, [r3, r2]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	001a      	movs	r2, r3
 80088e8:	187b      	adds	r3, r7, r1
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	189b      	adds	r3, r3, r2
 80088ee:	187a      	adds	r2, r7, r1
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	00da      	lsls	r2, r3, #3
 80088f8:	187b      	adds	r3, r7, r1
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	18d3      	adds	r3, r2, r3
 80088fe:	4a72      	ldr	r2, [pc, #456]	@ (8008ac8 <USB_EPStartXfer+0xf24>)
 8008900:	4694      	mov	ip, r2
 8008902:	4463      	add	r3, ip
 8008904:	2198      	movs	r1, #152	@ 0x98
 8008906:	187a      	adds	r2, r7, r1
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	187b      	adds	r3, r7, r1
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	b29b      	uxth	r3, r3
 8008912:	059b      	lsls	r3, r3, #22
 8008914:	0d9b      	lsrs	r3, r3, #22
 8008916:	b29a      	uxth	r2, r3
 8008918:	187b      	adds	r3, r7, r1
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	801a      	strh	r2, [r3, #0]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <USB_EPStartXfer+0xd98>
 8008926:	187b      	adds	r3, r7, r1
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	4a64      	ldr	r2, [pc, #400]	@ (8008ac0 <USB_EPStartXfer+0xf1c>)
 8008930:	4313      	orrs	r3, r2
 8008932:	b29a      	uxth	r2, r3
 8008934:	187b      	adds	r3, r7, r1
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	e069      	b.n	8008a10 <USB_EPStartXfer+0xe6c>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	2b3e      	cmp	r3, #62	@ 0x3e
 8008942:	d820      	bhi.n	8008986 <USB_EPStartXfer+0xde2>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	21e0      	movs	r1, #224	@ 0xe0
 800894c:	187a      	adds	r2, r7, r1
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	2201      	movs	r2, #1
 8008956:	4013      	ands	r3, r2
 8008958:	d004      	beq.n	8008964 <USB_EPStartXfer+0xdc0>
 800895a:	187b      	adds	r3, r7, r1
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	187a      	adds	r2, r7, r1
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	2198      	movs	r1, #152	@ 0x98
 8008966:	187b      	adds	r3, r7, r1
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b29a      	uxth	r2, r3
 800896e:	23e0      	movs	r3, #224	@ 0xe0
 8008970:	18fb      	adds	r3, r7, r3
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	029b      	lsls	r3, r3, #10
 8008978:	b29b      	uxth	r3, r3
 800897a:	4313      	orrs	r3, r2
 800897c:	b29a      	uxth	r2, r3
 800897e:	187b      	adds	r3, r7, r1
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	801a      	strh	r2, [r3, #0]
 8008984:	e044      	b.n	8008a10 <USB_EPStartXfer+0xe6c>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	095b      	lsrs	r3, r3, #5
 800898c:	21e0      	movs	r1, #224	@ 0xe0
 800898e:	187a      	adds	r2, r7, r1
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	221f      	movs	r2, #31
 8008998:	4013      	ands	r3, r2
 800899a:	d104      	bne.n	80089a6 <USB_EPStartXfer+0xe02>
 800899c:	187b      	adds	r3, r7, r1
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	187a      	adds	r2, r7, r1
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	2198      	movs	r1, #152	@ 0x98
 80089a8:	187b      	adds	r3, r7, r1
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	23e0      	movs	r3, #224	@ 0xe0
 80089b2:	18fb      	adds	r3, r7, r3
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	029b      	lsls	r3, r3, #10
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4313      	orrs	r3, r2
 80089be:	b29b      	uxth	r3, r3
 80089c0:	4a3f      	ldr	r2, [pc, #252]	@ (8008ac0 <USB_EPStartXfer+0xf1c>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	187b      	adds	r3, r7, r1
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	801a      	strh	r2, [r3, #0]
 80089cc:	e020      	b.n	8008a10 <USB_EPStartXfer+0xe6c>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d11c      	bne.n	8008a10 <USB_EPStartXfer+0xe6c>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2250      	movs	r2, #80	@ 0x50
 80089da:	5a9b      	ldrh	r3, [r3, r2]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	001a      	movs	r2, r3
 80089e0:	21a4      	movs	r1, #164	@ 0xa4
 80089e2:	187b      	adds	r3, r7, r1
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	189b      	adds	r3, r3, r2
 80089e8:	187a      	adds	r2, r7, r1
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	00da      	lsls	r2, r3, #3
 80089f2:	187b      	adds	r3, r7, r1
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	18d3      	adds	r3, r2, r3
 80089f8:	4a33      	ldr	r2, [pc, #204]	@ (8008ac8 <USB_EPStartXfer+0xf24>)
 80089fa:	4694      	mov	ip, r2
 80089fc:	4463      	add	r3, ip
 80089fe:	21a0      	movs	r1, #160	@ 0xa0
 8008a00:	187a      	adds	r2, r7, r1
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	187b      	adds	r3, r7, r1
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d100      	bne.n	8008a1a <USB_EPStartXfer+0xe76>
 8008a18:	e1c0      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	18d2      	adds	r2, r2, r3
 8008a24:	2196      	movs	r1, #150	@ 0x96
 8008a26:	187b      	adds	r3, r7, r1
 8008a28:	8812      	ldrh	r2, [r2, #0]
 8008a2a:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a2c:	187b      	adds	r3, r7, r1
 8008a2e:	881a      	ldrh	r2, [r3, #0]
 8008a30:	2380      	movs	r3, #128	@ 0x80
 8008a32:	01db      	lsls	r3, r3, #7
 8008a34:	4013      	ands	r3, r2
 8008a36:	d004      	beq.n	8008a42 <USB_EPStartXfer+0xe9e>
 8008a38:	187b      	adds	r3, r7, r1
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	2240      	movs	r2, #64	@ 0x40
 8008a3e:	4013      	ands	r3, r2
 8008a40:	d10d      	bne.n	8008a5e <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a42:	2196      	movs	r1, #150	@ 0x96
 8008a44:	187b      	adds	r3, r7, r1
 8008a46:	881a      	ldrh	r2, [r3, #0]
 8008a48:	2380      	movs	r3, #128	@ 0x80
 8008a4a:	01db      	lsls	r3, r3, #7
 8008a4c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a4e:	d000      	beq.n	8008a52 <USB_EPStartXfer+0xeae>
 8008a50:	e1a4      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a52:	187b      	adds	r3, r7, r1
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	2240      	movs	r2, #64	@ 0x40
 8008a58:	4013      	ands	r3, r2
 8008a5a:	d000      	beq.n	8008a5e <USB_EPStartXfer+0xeba>
 8008a5c:	e19e      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	18d3      	adds	r3, r2, r3
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	2094      	movs	r0, #148	@ 0x94
 8008a6e:	183b      	adds	r3, r7, r0
 8008a70:	4916      	ldr	r1, [pc, #88]	@ (8008acc <USB_EPStartXfer+0xf28>)
 8008a72:	400a      	ands	r2, r1
 8008a74:	801a      	strh	r2, [r3, #0]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	18d3      	adds	r3, r2, r3
 8008a80:	183a      	adds	r2, r7, r0
 8008a82:	8812      	ldrh	r2, [r2, #0]
 8008a84:	4912      	ldr	r1, [pc, #72]	@ (8008ad0 <USB_EPStartXfer+0xf2c>)
 8008a86:	430a      	orrs	r2, r1
 8008a88:	b292      	uxth	r2, r2
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	e186      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	78db      	ldrb	r3, [r3, #3]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d000      	beq.n	8008a98 <USB_EPStartXfer+0xef4>
 8008a96:	e17f      	b.n	8008d98 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	699a      	ldr	r2, [r3, #24]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d917      	bls.n	8008ad4 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	1d7a      	adds	r2, r7, #5
 8008aaa:	32ff      	adds	r2, #255	@ 0xff
 8008aac:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	1d7b      	adds	r3, r7, #5
 8008ab4:	33ff      	adds	r3, #255	@ 0xff
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	1ad2      	subs	r2, r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	619a      	str	r2, [r3, #24]
 8008abe:	e011      	b.n	8008ae4 <USB_EPStartXfer+0xf40>
 8008ac0:	ffff8000 	.word	0xffff8000
 8008ac4:	00000402 	.word	0x00000402
 8008ac8:	00000406 	.word	0x00000406
 8008acc:	ffff8f8f 	.word	0xffff8f8f
 8008ad0:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	1d7a      	adds	r2, r7, #5
 8008ada:	32ff      	adds	r2, #255	@ 0xff
 8008adc:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	785b      	ldrb	r3, [r3, #1]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d000      	beq.n	8008aee <USB_EPStartXfer+0xf4a>
 8008aec:	e081      	b.n	8008bf2 <USB_EPStartXfer+0x104e>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	21cc      	movs	r1, #204	@ 0xcc
 8008af2:	187a      	adds	r2, r7, r1
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2250      	movs	r2, #80	@ 0x50
 8008afa:	5a9b      	ldrh	r3, [r3, r2]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	001a      	movs	r2, r3
 8008b00:	187b      	adds	r3, r7, r1
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	189b      	adds	r3, r3, r2
 8008b06:	187a      	adds	r2, r7, r1
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	00da      	lsls	r2, r3, #3
 8008b10:	187b      	adds	r3, r7, r1
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	18d3      	adds	r3, r2, r3
 8008b16:	4ab6      	ldr	r2, [pc, #728]	@ (8008df0 <USB_EPStartXfer+0x124c>)
 8008b18:	4694      	mov	ip, r2
 8008b1a:	4463      	add	r3, ip
 8008b1c:	21c8      	movs	r1, #200	@ 0xc8
 8008b1e:	187a      	adds	r2, r7, r1
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	187b      	adds	r3, r7, r1
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	059b      	lsls	r3, r3, #22
 8008b2c:	0d9b      	lsrs	r3, r3, #22
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	187b      	adds	r3, r7, r1
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	801a      	strh	r2, [r3, #0]
 8008b36:	1d7b      	adds	r3, r7, #5
 8008b38:	33ff      	adds	r3, #255	@ 0xff
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10a      	bne.n	8008b56 <USB_EPStartXfer+0xfb2>
 8008b40:	187b      	adds	r3, r7, r1
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	4aaa      	ldr	r2, [pc, #680]	@ (8008df4 <USB_EPStartXfer+0x1250>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	187b      	adds	r3, r7, r1
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	801a      	strh	r2, [r3, #0]
 8008b54:	e072      	b.n	8008c3c <USB_EPStartXfer+0x1098>
 8008b56:	1d7b      	adds	r3, r7, #5
 8008b58:	33ff      	adds	r3, #255	@ 0xff
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b5e:	d822      	bhi.n	8008ba6 <USB_EPStartXfer+0x1002>
 8008b60:	1d7b      	adds	r3, r7, #5
 8008b62:	33ff      	adds	r3, #255	@ 0xff
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	085b      	lsrs	r3, r3, #1
 8008b68:	21dc      	movs	r1, #220	@ 0xdc
 8008b6a:	187a      	adds	r2, r7, r1
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	1d7b      	adds	r3, r7, #5
 8008b70:	33ff      	adds	r3, #255	@ 0xff
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2201      	movs	r2, #1
 8008b76:	4013      	ands	r3, r2
 8008b78:	d004      	beq.n	8008b84 <USB_EPStartXfer+0xfe0>
 8008b7a:	187b      	adds	r3, r7, r1
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	187a      	adds	r2, r7, r1
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	21c8      	movs	r1, #200	@ 0xc8
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	23dc      	movs	r3, #220	@ 0xdc
 8008b90:	18fb      	adds	r3, r7, r3
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	029b      	lsls	r3, r3, #10
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	187b      	adds	r3, r7, r1
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	e04a      	b.n	8008c3c <USB_EPStartXfer+0x1098>
 8008ba6:	1d7b      	adds	r3, r7, #5
 8008ba8:	33ff      	adds	r3, #255	@ 0xff
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	095b      	lsrs	r3, r3, #5
 8008bae:	21dc      	movs	r1, #220	@ 0xdc
 8008bb0:	187a      	adds	r2, r7, r1
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	1d7b      	adds	r3, r7, #5
 8008bb6:	33ff      	adds	r3, #255	@ 0xff
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	221f      	movs	r2, #31
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	d104      	bne.n	8008bca <USB_EPStartXfer+0x1026>
 8008bc0:	187b      	adds	r3, r7, r1
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	187a      	adds	r2, r7, r1
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	21c8      	movs	r1, #200	@ 0xc8
 8008bcc:	187b      	adds	r3, r7, r1
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	23dc      	movs	r3, #220	@ 0xdc
 8008bd6:	18fb      	adds	r3, r7, r3
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	029b      	lsls	r3, r3, #10
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	4313      	orrs	r3, r2
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4a83      	ldr	r2, [pc, #524]	@ (8008df4 <USB_EPStartXfer+0x1250>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	187b      	adds	r3, r7, r1
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	801a      	strh	r2, [r3, #0]
 8008bf0:	e024      	b.n	8008c3c <USB_EPStartXfer+0x1098>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d120      	bne.n	8008c3c <USB_EPStartXfer+0x1098>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	21d4      	movs	r1, #212	@ 0xd4
 8008bfe:	187a      	adds	r2, r7, r1
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2250      	movs	r2, #80	@ 0x50
 8008c06:	5a9b      	ldrh	r3, [r3, r2]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	001a      	movs	r2, r3
 8008c0c:	187b      	adds	r3, r7, r1
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	189b      	adds	r3, r3, r2
 8008c12:	187a      	adds	r2, r7, r1
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	00da      	lsls	r2, r3, #3
 8008c1c:	187b      	adds	r3, r7, r1
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	18d3      	adds	r3, r2, r3
 8008c22:	4a73      	ldr	r2, [pc, #460]	@ (8008df0 <USB_EPStartXfer+0x124c>)
 8008c24:	4694      	mov	ip, r2
 8008c26:	4463      	add	r3, ip
 8008c28:	21d0      	movs	r1, #208	@ 0xd0
 8008c2a:	187a      	adds	r2, r7, r1
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	1d7b      	adds	r3, r7, #5
 8008c30:	33ff      	adds	r3, #255	@ 0xff
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	187b      	adds	r3, r7, r1
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	22c4      	movs	r2, #196	@ 0xc4
 8008c40:	18ba      	adds	r2, r7, r2
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	785b      	ldrb	r3, [r3, #1]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d000      	beq.n	8008c4e <USB_EPStartXfer+0x10aa>
 8008c4c:	e081      	b.n	8008d52 <USB_EPStartXfer+0x11ae>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	21bc      	movs	r1, #188	@ 0xbc
 8008c52:	187a      	adds	r2, r7, r1
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2250      	movs	r2, #80	@ 0x50
 8008c5a:	5a9b      	ldrh	r3, [r3, r2]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	001a      	movs	r2, r3
 8008c60:	187b      	adds	r3, r7, r1
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	189b      	adds	r3, r3, r2
 8008c66:	187a      	adds	r2, r7, r1
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	00da      	lsls	r2, r3, #3
 8008c70:	187b      	adds	r3, r7, r1
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	18d3      	adds	r3, r2, r3
 8008c76:	4a60      	ldr	r2, [pc, #384]	@ (8008df8 <USB_EPStartXfer+0x1254>)
 8008c78:	4694      	mov	ip, r2
 8008c7a:	4463      	add	r3, ip
 8008c7c:	21b8      	movs	r1, #184	@ 0xb8
 8008c7e:	187a      	adds	r2, r7, r1
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	187b      	adds	r3, r7, r1
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	059b      	lsls	r3, r3, #22
 8008c8c:	0d9b      	lsrs	r3, r3, #22
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	187b      	adds	r3, r7, r1
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	1d7b      	adds	r3, r7, #5
 8008c98:	33ff      	adds	r3, #255	@ 0xff
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <USB_EPStartXfer+0x1112>
 8008ca0:	187b      	adds	r3, r7, r1
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	4a52      	ldr	r2, [pc, #328]	@ (8008df4 <USB_EPStartXfer+0x1250>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	187b      	adds	r3, r7, r1
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	e072      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
 8008cb6:	1d7b      	adds	r3, r7, #5
 8008cb8:	33ff      	adds	r3, #255	@ 0xff
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cbe:	d822      	bhi.n	8008d06 <USB_EPStartXfer+0x1162>
 8008cc0:	1d7b      	adds	r3, r7, #5
 8008cc2:	33ff      	adds	r3, #255	@ 0xff
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	085b      	lsrs	r3, r3, #1
 8008cc8:	21d8      	movs	r1, #216	@ 0xd8
 8008cca:	187a      	adds	r2, r7, r1
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	1d7b      	adds	r3, r7, #5
 8008cd0:	33ff      	adds	r3, #255	@ 0xff
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	d004      	beq.n	8008ce4 <USB_EPStartXfer+0x1140>
 8008cda:	187b      	adds	r3, r7, r1
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	187a      	adds	r2, r7, r1
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	21b8      	movs	r1, #184	@ 0xb8
 8008ce6:	187b      	adds	r3, r7, r1
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	23d8      	movs	r3, #216	@ 0xd8
 8008cf0:	18fb      	adds	r3, r7, r3
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	029b      	lsls	r3, r3, #10
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	187b      	adds	r3, r7, r1
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	801a      	strh	r2, [r3, #0]
 8008d04:	e04a      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
 8008d06:	1d7b      	adds	r3, r7, #5
 8008d08:	33ff      	adds	r3, #255	@ 0xff
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	095b      	lsrs	r3, r3, #5
 8008d0e:	21d8      	movs	r1, #216	@ 0xd8
 8008d10:	187a      	adds	r2, r7, r1
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	1d7b      	adds	r3, r7, #5
 8008d16:	33ff      	adds	r3, #255	@ 0xff
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	221f      	movs	r2, #31
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d104      	bne.n	8008d2a <USB_EPStartXfer+0x1186>
 8008d20:	187b      	adds	r3, r7, r1
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	187a      	adds	r2, r7, r1
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	21b8      	movs	r1, #184	@ 0xb8
 8008d2c:	187b      	adds	r3, r7, r1
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	23d8      	movs	r3, #216	@ 0xd8
 8008d36:	18fb      	adds	r3, r7, r3
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	029b      	lsls	r3, r3, #10
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4313      	orrs	r3, r2
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	4a2b      	ldr	r2, [pc, #172]	@ (8008df4 <USB_EPStartXfer+0x1250>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	187b      	adds	r3, r7, r1
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	801a      	strh	r2, [r3, #0]
 8008d50:	e024      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	785b      	ldrb	r3, [r3, #1]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d120      	bne.n	8008d9c <USB_EPStartXfer+0x11f8>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2250      	movs	r2, #80	@ 0x50
 8008d5e:	5a9b      	ldrh	r3, [r3, r2]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	001a      	movs	r2, r3
 8008d64:	21c4      	movs	r1, #196	@ 0xc4
 8008d66:	187b      	adds	r3, r7, r1
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	189b      	adds	r3, r3, r2
 8008d6c:	187a      	adds	r2, r7, r1
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	00da      	lsls	r2, r3, #3
 8008d76:	187b      	adds	r3, r7, r1
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	18d3      	adds	r3, r2, r3
 8008d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8008df8 <USB_EPStartXfer+0x1254>)
 8008d7e:	4694      	mov	ip, r2
 8008d80:	4463      	add	r3, ip
 8008d82:	21c0      	movs	r1, #192	@ 0xc0
 8008d84:	187a      	adds	r2, r7, r1
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	1d7b      	adds	r3, r7, #5
 8008d8a:	33ff      	adds	r3, #255	@ 0xff
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	187b      	adds	r3, r7, r1
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	801a      	strh	r2, [r3, #0]
 8008d96:	e001      	b.n	8008d9c <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e025      	b.n	8008de8 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	18d3      	adds	r3, r2, r3
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	208a      	movs	r0, #138	@ 0x8a
 8008dac:	183b      	adds	r3, r7, r0
 8008dae:	4913      	ldr	r1, [pc, #76]	@ (8008dfc <USB_EPStartXfer+0x1258>)
 8008db0:	400a      	ands	r2, r1
 8008db2:	801a      	strh	r2, [r3, #0]
 8008db4:	183b      	adds	r3, r7, r0
 8008db6:	183a      	adds	r2, r7, r0
 8008db8:	8812      	ldrh	r2, [r2, #0]
 8008dba:	2180      	movs	r1, #128	@ 0x80
 8008dbc:	0149      	lsls	r1, r1, #5
 8008dbe:	404a      	eors	r2, r1
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	183b      	adds	r3, r7, r0
 8008dc4:	183a      	adds	r2, r7, r0
 8008dc6:	8812      	ldrh	r2, [r2, #0]
 8008dc8:	2180      	movs	r1, #128	@ 0x80
 8008dca:	0189      	lsls	r1, r1, #6
 8008dcc:	404a      	eors	r2, r1
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	18d3      	adds	r3, r2, r3
 8008dda:	183a      	adds	r2, r7, r0
 8008ddc:	8812      	ldrh	r2, [r2, #0]
 8008dde:	4908      	ldr	r1, [pc, #32]	@ (8008e00 <USB_EPStartXfer+0x125c>)
 8008de0:	430a      	orrs	r2, r1
 8008de2:	b292      	uxth	r2, r2
 8008de4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	0018      	movs	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	b043      	add	sp, #268	@ 0x10c
 8008dee:	bd90      	pop	{r4, r7, pc}
 8008df0:	00000402 	.word	0x00000402
 8008df4:	ffff8000 	.word	0xffff8000
 8008df8:	00000406 	.word	0x00000406
 8008dfc:	ffffbf8f 	.word	0xffffbf8f
 8008e00:	ffff8080 	.word	0xffff8080

08008e04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	785b      	ldrb	r3, [r3, #1]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d01d      	beq.n	8008e52 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	18d3      	adds	r3, r2, r3
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	200c      	movs	r0, #12
 8008e26:	183b      	adds	r3, r7, r0
 8008e28:	491b      	ldr	r1, [pc, #108]	@ (8008e98 <USB_EPSetStall+0x94>)
 8008e2a:	400a      	ands	r2, r1
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	183b      	adds	r3, r7, r0
 8008e30:	183a      	adds	r2, r7, r0
 8008e32:	8812      	ldrh	r2, [r2, #0]
 8008e34:	2110      	movs	r1, #16
 8008e36:	404a      	eors	r2, r1
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	18d3      	adds	r3, r2, r3
 8008e44:	183a      	adds	r2, r7, r0
 8008e46:	8812      	ldrh	r2, [r2, #0]
 8008e48:	4914      	ldr	r1, [pc, #80]	@ (8008e9c <USB_EPSetStall+0x98>)
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	b292      	uxth	r2, r2
 8008e4e:	801a      	strh	r2, [r3, #0]
 8008e50:	e01d      	b.n	8008e8e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	18d3      	adds	r3, r2, r3
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	200e      	movs	r0, #14
 8008e62:	183b      	adds	r3, r7, r0
 8008e64:	490e      	ldr	r1, [pc, #56]	@ (8008ea0 <USB_EPSetStall+0x9c>)
 8008e66:	400a      	ands	r2, r1
 8008e68:	801a      	strh	r2, [r3, #0]
 8008e6a:	183b      	adds	r3, r7, r0
 8008e6c:	183a      	adds	r2, r7, r0
 8008e6e:	8812      	ldrh	r2, [r2, #0]
 8008e70:	2180      	movs	r1, #128	@ 0x80
 8008e72:	0149      	lsls	r1, r1, #5
 8008e74:	404a      	eors	r2, r1
 8008e76:	801a      	strh	r2, [r3, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	18d3      	adds	r3, r2, r3
 8008e82:	183a      	adds	r2, r7, r0
 8008e84:	8812      	ldrh	r2, [r2, #0]
 8008e86:	4905      	ldr	r1, [pc, #20]	@ (8008e9c <USB_EPSetStall+0x98>)
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	b292      	uxth	r2, r2
 8008e8c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	0018      	movs	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b004      	add	sp, #16
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	ffff8fbf 	.word	0xffff8fbf
 8008e9c:	ffff8080 	.word	0xffff8080
 8008ea0:	ffffbf8f 	.word	0xffffbf8f

08008ea4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	7b1b      	ldrb	r3, [r3, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d000      	beq.n	8008eb8 <USB_EPClearStall+0x14>
 8008eb6:	e095      	b.n	8008fe4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	785b      	ldrb	r3, [r3, #1]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d046      	beq.n	8008f4e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	18d2      	adds	r2, r2, r3
 8008eca:	2110      	movs	r1, #16
 8008ecc:	187b      	adds	r3, r7, r1
 8008ece:	8812      	ldrh	r2, [r2, #0]
 8008ed0:	801a      	strh	r2, [r3, #0]
 8008ed2:	187b      	adds	r3, r7, r1
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	2240      	movs	r2, #64	@ 0x40
 8008ed8:	4013      	ands	r3, r2
 8008eda:	d016      	beq.n	8008f0a <USB_EPClearStall+0x66>
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	18d3      	adds	r3, r2, r3
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	200e      	movs	r0, #14
 8008eec:	183b      	adds	r3, r7, r0
 8008eee:	4940      	ldr	r1, [pc, #256]	@ (8008ff0 <USB_EPClearStall+0x14c>)
 8008ef0:	400a      	ands	r2, r1
 8008ef2:	801a      	strh	r2, [r3, #0]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	18d3      	adds	r3, r2, r3
 8008efe:	183a      	adds	r2, r7, r0
 8008f00:	8812      	ldrh	r2, [r2, #0]
 8008f02:	493c      	ldr	r1, [pc, #240]	@ (8008ff4 <USB_EPClearStall+0x150>)
 8008f04:	430a      	orrs	r2, r1
 8008f06:	b292      	uxth	r2, r2
 8008f08:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	78db      	ldrb	r3, [r3, #3]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d068      	beq.n	8008fe4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	18d3      	adds	r3, r2, r3
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	200c      	movs	r0, #12
 8008f22:	183b      	adds	r3, r7, r0
 8008f24:	4934      	ldr	r1, [pc, #208]	@ (8008ff8 <USB_EPClearStall+0x154>)
 8008f26:	400a      	ands	r2, r1
 8008f28:	801a      	strh	r2, [r3, #0]
 8008f2a:	183b      	adds	r3, r7, r0
 8008f2c:	183a      	adds	r2, r7, r0
 8008f2e:	8812      	ldrh	r2, [r2, #0]
 8008f30:	2120      	movs	r1, #32
 8008f32:	404a      	eors	r2, r1
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	18d3      	adds	r3, r2, r3
 8008f40:	183a      	adds	r2, r7, r0
 8008f42:	8812      	ldrh	r2, [r2, #0]
 8008f44:	492d      	ldr	r1, [pc, #180]	@ (8008ffc <USB_EPClearStall+0x158>)
 8008f46:	430a      	orrs	r2, r1
 8008f48:	b292      	uxth	r2, r2
 8008f4a:	801a      	strh	r2, [r3, #0]
 8008f4c:	e04a      	b.n	8008fe4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	18d2      	adds	r2, r2, r3
 8008f58:	2116      	movs	r1, #22
 8008f5a:	187b      	adds	r3, r7, r1
 8008f5c:	8812      	ldrh	r2, [r2, #0]
 8008f5e:	801a      	strh	r2, [r3, #0]
 8008f60:	187b      	adds	r3, r7, r1
 8008f62:	881a      	ldrh	r2, [r3, #0]
 8008f64:	2380      	movs	r3, #128	@ 0x80
 8008f66:	01db      	lsls	r3, r3, #7
 8008f68:	4013      	ands	r3, r2
 8008f6a:	d016      	beq.n	8008f9a <USB_EPClearStall+0xf6>
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	18d3      	adds	r3, r2, r3
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	2014      	movs	r0, #20
 8008f7c:	183b      	adds	r3, r7, r0
 8008f7e:	491c      	ldr	r1, [pc, #112]	@ (8008ff0 <USB_EPClearStall+0x14c>)
 8008f80:	400a      	ands	r2, r1
 8008f82:	801a      	strh	r2, [r3, #0]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	18d3      	adds	r3, r2, r3
 8008f8e:	183a      	adds	r2, r7, r0
 8008f90:	8812      	ldrh	r2, [r2, #0]
 8008f92:	491b      	ldr	r1, [pc, #108]	@ (8009000 <USB_EPClearStall+0x15c>)
 8008f94:	430a      	orrs	r2, r1
 8008f96:	b292      	uxth	r2, r2
 8008f98:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	18d3      	adds	r3, r2, r3
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	2012      	movs	r0, #18
 8008faa:	183b      	adds	r3, r7, r0
 8008fac:	4915      	ldr	r1, [pc, #84]	@ (8009004 <USB_EPClearStall+0x160>)
 8008fae:	400a      	ands	r2, r1
 8008fb0:	801a      	strh	r2, [r3, #0]
 8008fb2:	183b      	adds	r3, r7, r0
 8008fb4:	183a      	adds	r2, r7, r0
 8008fb6:	8812      	ldrh	r2, [r2, #0]
 8008fb8:	2180      	movs	r1, #128	@ 0x80
 8008fba:	0149      	lsls	r1, r1, #5
 8008fbc:	404a      	eors	r2, r1
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	183b      	adds	r3, r7, r0
 8008fc2:	183a      	adds	r2, r7, r0
 8008fc4:	8812      	ldrh	r2, [r2, #0]
 8008fc6:	2180      	movs	r1, #128	@ 0x80
 8008fc8:	0189      	lsls	r1, r1, #6
 8008fca:	404a      	eors	r2, r1
 8008fcc:	801a      	strh	r2, [r3, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	18d3      	adds	r3, r2, r3
 8008fd8:	183a      	adds	r2, r7, r0
 8008fda:	8812      	ldrh	r2, [r2, #0]
 8008fdc:	4907      	ldr	r1, [pc, #28]	@ (8008ffc <USB_EPClearStall+0x158>)
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	b292      	uxth	r2, r2
 8008fe2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	b006      	add	sp, #24
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	46c0      	nop			@ (mov r8, r8)
 8008ff0:	ffff8f8f 	.word	0xffff8f8f
 8008ff4:	ffff80c0 	.word	0xffff80c0
 8008ff8:	ffff8fbf 	.word	0xffff8fbf
 8008ffc:	ffff8080 	.word	0xffff8080
 8009000:	ffffc080 	.word	0xffffc080
 8009004:	ffffbf8f 	.word	0xffffbf8f

08009008 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	000a      	movs	r2, r1
 8009012:	1cfb      	adds	r3, r7, #3
 8009014:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8009016:	1cfb      	adds	r3, r7, #3
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	224c      	movs	r2, #76	@ 0x4c
 8009022:	2180      	movs	r1, #128	@ 0x80
 8009024:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	b002      	add	sp, #8
 800902e:	bd80      	pop	{r7, pc}

08009030 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2258      	movs	r2, #88	@ 0x58
 800903c:	5a9b      	ldrh	r3, [r3, r2]
 800903e:	b29b      	uxth	r3, r3
 8009040:	4a05      	ldr	r2, [pc, #20]	@ (8009058 <USB_DevConnect+0x28>)
 8009042:	4313      	orrs	r3, r2
 8009044:	b299      	uxth	r1, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2258      	movs	r2, #88	@ 0x58
 800904a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	0018      	movs	r0, r3
 8009050:	46bd      	mov	sp, r7
 8009052:	b002      	add	sp, #8
 8009054:	bd80      	pop	{r7, pc}
 8009056:	46c0      	nop			@ (mov r8, r8)
 8009058:	ffff8000 	.word	0xffff8000

0800905c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2244      	movs	r2, #68	@ 0x44
 8009068:	5a9b      	ldrh	r3, [r3, r2]
 800906a:	b29b      	uxth	r3, r3
 800906c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800906e:	68fb      	ldr	r3, [r7, #12]
}
 8009070:	0018      	movs	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	b004      	add	sp, #16
 8009076:	bd80      	pop	{r7, pc}

08009078 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	@ 0x28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	0019      	movs	r1, r3
 8009084:	1dbb      	adds	r3, r7, #6
 8009086:	801a      	strh	r2, [r3, #0]
 8009088:	1d3b      	adds	r3, r7, #4
 800908a:	1c0a      	adds	r2, r1, #0
 800908c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800908e:	1d3b      	adds	r3, r7, #4
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	3301      	adds	r3, #1
 8009094:	085b      	lsrs	r3, r3, #1
 8009096:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090a0:	1dbb      	adds	r3, r7, #6
 80090a2:	881a      	ldrh	r2, [r3, #0]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	18d3      	adds	r3, r2, r3
 80090a8:	2280      	movs	r2, #128	@ 0x80
 80090aa:	00d2      	lsls	r2, r2, #3
 80090ac:	4694      	mov	ip, r2
 80090ae:	4463      	add	r3, ip
 80090b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80090b6:	e020      	b.n	80090fa <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	781a      	ldrb	r2, [r3, #0]
 80090bc:	2112      	movs	r1, #18
 80090be:	187b      	adds	r3, r7, r1
 80090c0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	3301      	adds	r3, #1
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	b21a      	sxth	r2, r3
 80090cc:	187b      	adds	r3, r7, r1
 80090ce:	2000      	movs	r0, #0
 80090d0:	5e1b      	ldrsh	r3, [r3, r0]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	b21a      	sxth	r2, r3
 80090d6:	187b      	adds	r3, r7, r1
 80090d8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	187a      	adds	r2, r7, r1
 80090de:	8812      	ldrh	r2, [r2, #0]
 80090e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	3302      	adds	r3, #2
 80090e6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	3301      	adds	r3, #1
 80090ec:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	3301      	adds	r3, #1
 80090f2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	3b01      	subs	r3, #1
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1db      	bne.n	80090b8 <USB_WritePMA+0x40>
  }
}
 8009100:	46c0      	nop			@ (mov r8, r8)
 8009102:	46c0      	nop			@ (mov r8, r8)
 8009104:	46bd      	mov	sp, r7
 8009106:	b00a      	add	sp, #40	@ 0x28
 8009108:	bd80      	pop	{r7, pc}

0800910a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b08a      	sub	sp, #40	@ 0x28
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	0019      	movs	r1, r3
 8009116:	1dbb      	adds	r3, r7, #6
 8009118:	801a      	strh	r2, [r3, #0]
 800911a:	1d3b      	adds	r3, r7, #4
 800911c:	1c0a      	adds	r2, r1, #0
 800911e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009120:	1d3b      	adds	r3, r7, #4
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	085b      	lsrs	r3, r3, #1
 8009126:	b29b      	uxth	r3, r3
 8009128:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009132:	1dbb      	adds	r3, r7, #6
 8009134:	881a      	ldrh	r2, [r3, #0]
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	18d3      	adds	r3, r2, r3
 800913a:	2280      	movs	r2, #128	@ 0x80
 800913c:	00d2      	lsls	r2, r2, #3
 800913e:	4694      	mov	ip, r2
 8009140:	4463      	add	r3, ip
 8009142:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24
 8009148:	e018      	b.n	800917c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	b29b      	uxth	r3, r3
 8009150:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	3302      	adds	r3, #2
 8009156:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	b2da      	uxtb	r2, r3
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	3301      	adds	r3, #1
 8009164:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	b2da      	uxtb	r2, r3
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	3301      	adds	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	3b01      	subs	r3, #1
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e3      	bne.n	800914a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009182:	1d3b      	adds	r3, r7, #4
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	2201      	movs	r2, #1
 8009188:	4013      	ands	r3, r2
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d007      	beq.n	80091a0 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	b2da      	uxtb	r2, r3
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	701a      	strb	r2, [r3, #0]
  }
}
 80091a0:	46c0      	nop			@ (mov r8, r8)
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b00a      	add	sp, #40	@ 0x28
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	000a      	movs	r2, r1
 80091b2:	1cfb      	adds	r3, r7, #3
 80091b4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80091b6:	230f      	movs	r3, #15
 80091b8:	18fb      	adds	r3, r7, r3
 80091ba:	2200      	movs	r2, #0
 80091bc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	7c1b      	ldrb	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d116      	bne.n	80091f4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80091c6:	2380      	movs	r3, #128	@ 0x80
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	2202      	movs	r2, #2
 80091ce:	2181      	movs	r1, #129	@ 0x81
 80091d0:	f002 f88b 	bl	800b2ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80091da:	2380      	movs	r3, #128	@ 0x80
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	2202      	movs	r2, #2
 80091e2:	2101      	movs	r1, #1
 80091e4:	f002 f881 	bl	800b2ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	23b6      	movs	r3, #182	@ 0xb6
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	2101      	movs	r1, #1
 80091f0:	50d1      	str	r1, [r2, r3]
 80091f2:	e013      	b.n	800921c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	2340      	movs	r3, #64	@ 0x40
 80091f8:	2202      	movs	r2, #2
 80091fa:	2181      	movs	r1, #129	@ 0x81
 80091fc:	f002 f875 	bl	800b2ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	2340      	movs	r3, #64	@ 0x40
 800920a:	2202      	movs	r2, #2
 800920c:	2101      	movs	r1, #1
 800920e:	f002 f86c 	bl	800b2ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	23b6      	movs	r3, #182	@ 0xb6
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	2101      	movs	r1, #1
 800921a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	2308      	movs	r3, #8
 8009220:	2203      	movs	r2, #3
 8009222:	2182      	movs	r1, #130	@ 0x82
 8009224:	f002 f861 	bl	800b2ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800922e:	2387      	movs	r3, #135	@ 0x87
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	0018      	movs	r0, r3
 8009234:	f002 f9f0 	bl	800b618 <USBD_static_malloc>
 8009238:	0001      	movs	r1, r0
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	23ae      	movs	r3, #174	@ 0xae
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	23ae      	movs	r3, #174	@ 0xae
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	58d3      	ldr	r3, [r2, r3]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800924e:	230f      	movs	r3, #15
 8009250:	18fb      	adds	r3, r7, r3
 8009252:	2201      	movs	r2, #1
 8009254:	701a      	strb	r2, [r3, #0]
 8009256:	e02c      	b.n	80092b2 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	23ae      	movs	r3, #174	@ 0xae
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	58d3      	ldr	r3, [r2, r3]
 8009260:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	23af      	movs	r3, #175	@ 0xaf
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	58d3      	ldr	r3, [r2, r3]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	2385      	movs	r3, #133	@ 0x85
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	2100      	movs	r1, #0
 8009276:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	2386      	movs	r3, #134	@ 0x86
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	2100      	movs	r1, #0
 8009280:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	7c1b      	ldrb	r3, [r3, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10a      	bne.n	80092a0 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	2381      	movs	r3, #129	@ 0x81
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	58d2      	ldr	r2, [r2, r3]
 8009292:	2380      	movs	r3, #128	@ 0x80
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	2101      	movs	r1, #1
 800929a:	f002 f970 	bl	800b57e <USBD_LL_PrepareReceive>
 800929e:	e008      	b.n	80092b2 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	2381      	movs	r3, #129	@ 0x81
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	58d2      	ldr	r2, [r2, r3]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	2340      	movs	r3, #64	@ 0x40
 80092ac:	2101      	movs	r1, #1
 80092ae:	f002 f966 	bl	800b57e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80092b2:	230f      	movs	r3, #15
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	781b      	ldrb	r3, [r3, #0]
}
 80092b8:	0018      	movs	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	b004      	add	sp, #16
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	000a      	movs	r2, r1
 80092ca:	1cfb      	adds	r3, r7, #3
 80092cc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80092ce:	230f      	movs	r3, #15
 80092d0:	18fb      	adds	r3, r7, r3
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2181      	movs	r1, #129	@ 0x81
 80092da:	0018      	movs	r0, r3
 80092dc:	f002 f83c 	bl	800b358 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2101      	movs	r1, #1
 80092ea:	0018      	movs	r0, r3
 80092ec:	f002 f834 	bl	800b358 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	23b6      	movs	r3, #182	@ 0xb6
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	2100      	movs	r1, #0
 80092f8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2182      	movs	r1, #130	@ 0x82
 80092fe:	0018      	movs	r0, r3
 8009300:	f002 f82a 	bl	800b358 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	23ae      	movs	r3, #174	@ 0xae
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	58d3      	ldr	r3, [r2, r3]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d011      	beq.n	800933a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	23af      	movs	r3, #175	@ 0xaf
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	58d3      	ldr	r3, [r2, r3]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	23ae      	movs	r3, #174	@ 0xae
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	58d3      	ldr	r3, [r2, r3]
 800932a:	0018      	movs	r0, r3
 800932c:	f002 f980 	bl	800b630 <USBD_static_free>
    pdev->pClassData = NULL;
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	23ae      	movs	r3, #174	@ 0xae
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	2100      	movs	r1, #0
 8009338:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800933a:	230f      	movs	r3, #15
 800933c:	18fb      	adds	r3, r7, r3
 800933e:	781b      	ldrb	r3, [r3, #0]
}
 8009340:	0018      	movs	r0, r3
 8009342:	46bd      	mov	sp, r7
 8009344:	b004      	add	sp, #16
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	23ae      	movs	r3, #174	@ 0xae
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	58d3      	ldr	r3, [r2, r3]
 800935a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800935c:	230f      	movs	r3, #15
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	2200      	movs	r2, #0
 8009362:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8009364:	230c      	movs	r3, #12
 8009366:	18fb      	adds	r3, r7, r3
 8009368:	2200      	movs	r2, #0
 800936a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800936c:	2317      	movs	r3, #23
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	001a      	movs	r2, r3
 800937a:	2360      	movs	r3, #96	@ 0x60
 800937c:	4013      	ands	r3, r2
 800937e:	d03d      	beq.n	80093fc <USBD_CDC_Setup+0xb4>
 8009380:	2b20      	cmp	r3, #32
 8009382:	d000      	beq.n	8009386 <USBD_CDC_Setup+0x3e>
 8009384:	e094      	b.n	80094b0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	88db      	ldrh	r3, [r3, #6]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d02b      	beq.n	80093e6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	b25b      	sxtb	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	da12      	bge.n	80093be <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	23af      	movs	r3, #175	@ 0xaf
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	58d3      	ldr	r3, [r2, r3]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80093a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	88d2      	ldrh	r2, [r2, #6]
 80093ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80093ae:	6939      	ldr	r1, [r7, #16]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	88da      	ldrh	r2, [r3, #6]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	0018      	movs	r0, r3
 80093b8:	f001 fbaf 	bl	800ab1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80093bc:	e083      	b.n	80094c6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	7859      	ldrb	r1, [r3, #1]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	2380      	movs	r3, #128	@ 0x80
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	88db      	ldrh	r3, [r3, #6]
 80093ce:	b2d9      	uxtb	r1, r3
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	4a40      	ldr	r2, [pc, #256]	@ (80094d4 <USBD_CDC_Setup+0x18c>)
 80093d4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80093d6:	6939      	ldr	r1, [r7, #16]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	88da      	ldrh	r2, [r3, #6]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	0018      	movs	r0, r3
 80093e0:	f001 fbce 	bl	800ab80 <USBD_CtlPrepareRx>
      break;
 80093e4:	e06f      	b.n	80094c6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	23af      	movs	r3, #175	@ 0xaf
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	58d3      	ldr	r3, [r2, r3]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	7850      	ldrb	r0, [r2, #1]
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	2200      	movs	r2, #0
 80093f8:	4798      	blx	r3
      break;
 80093fa:	e064      	b.n	80094c6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	2b0b      	cmp	r3, #11
 8009402:	d037      	beq.n	8009474 <USBD_CDC_Setup+0x12c>
 8009404:	dc47      	bgt.n	8009496 <USBD_CDC_Setup+0x14e>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <USBD_CDC_Setup+0xc8>
 800940a:	2b0a      	cmp	r3, #10
 800940c:	d019      	beq.n	8009442 <USBD_CDC_Setup+0xfa>
 800940e:	e042      	b.n	8009496 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	23a7      	movs	r3, #167	@ 0xa7
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	5cd3      	ldrb	r3, [r2, r3]
 8009418:	2b03      	cmp	r3, #3
 800941a:	d107      	bne.n	800942c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800941c:	230c      	movs	r3, #12
 800941e:	18f9      	adds	r1, r7, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	0018      	movs	r0, r3
 8009426:	f001 fb78 	bl	800ab1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800942a:	e040      	b.n	80094ae <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	0011      	movs	r1, r2
 8009432:	0018      	movs	r0, r3
 8009434:	f001 faf3 	bl	800aa1e <USBD_CtlError>
            ret = USBD_FAIL;
 8009438:	2317      	movs	r3, #23
 800943a:	18fb      	adds	r3, r7, r3
 800943c:	2202      	movs	r2, #2
 800943e:	701a      	strb	r2, [r3, #0]
          break;
 8009440:	e035      	b.n	80094ae <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	23a7      	movs	r3, #167	@ 0xa7
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	5cd3      	ldrb	r3, [r2, r3]
 800944a:	2b03      	cmp	r3, #3
 800944c:	d107      	bne.n	800945e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800944e:	230f      	movs	r3, #15
 8009450:	18f9      	adds	r1, r7, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	0018      	movs	r0, r3
 8009458:	f001 fb5f 	bl	800ab1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800945c:	e027      	b.n	80094ae <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	0011      	movs	r1, r2
 8009464:	0018      	movs	r0, r3
 8009466:	f001 fada 	bl	800aa1e <USBD_CtlError>
            ret = USBD_FAIL;
 800946a:	2317      	movs	r3, #23
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	2202      	movs	r2, #2
 8009470:	701a      	strb	r2, [r3, #0]
          break;
 8009472:	e01c      	b.n	80094ae <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	23a7      	movs	r3, #167	@ 0xa7
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	5cd3      	ldrb	r3, [r2, r3]
 800947c:	2b03      	cmp	r3, #3
 800947e:	d015      	beq.n	80094ac <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	0011      	movs	r1, r2
 8009486:	0018      	movs	r0, r3
 8009488:	f001 fac9 	bl	800aa1e <USBD_CtlError>
            ret = USBD_FAIL;
 800948c:	2317      	movs	r3, #23
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	2202      	movs	r2, #2
 8009492:	701a      	strb	r2, [r3, #0]
          }
          break;
 8009494:	e00a      	b.n	80094ac <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	0011      	movs	r1, r2
 800949c:	0018      	movs	r0, r3
 800949e:	f001 fabe 	bl	800aa1e <USBD_CtlError>
          ret = USBD_FAIL;
 80094a2:	2317      	movs	r3, #23
 80094a4:	18fb      	adds	r3, r7, r3
 80094a6:	2202      	movs	r2, #2
 80094a8:	701a      	strb	r2, [r3, #0]
          break;
 80094aa:	e000      	b.n	80094ae <USBD_CDC_Setup+0x166>
          break;
 80094ac:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80094ae:	e00a      	b.n	80094c6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	0011      	movs	r1, r2
 80094b6:	0018      	movs	r0, r3
 80094b8:	f001 fab1 	bl	800aa1e <USBD_CtlError>
      ret = USBD_FAIL;
 80094bc:	2317      	movs	r3, #23
 80094be:	18fb      	adds	r3, r7, r3
 80094c0:	2202      	movs	r2, #2
 80094c2:	701a      	strb	r2, [r3, #0]
      break;
 80094c4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80094c6:	2317      	movs	r3, #23
 80094c8:	18fb      	adds	r3, r7, r3
 80094ca:	781b      	ldrb	r3, [r3, #0]
}
 80094cc:	0018      	movs	r0, r3
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b006      	add	sp, #24
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	00000201 	.word	0x00000201

080094d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	000a      	movs	r2, r1
 80094e2:	1cfb      	adds	r3, r7, #3
 80094e4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	23ae      	movs	r3, #174	@ 0xae
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	58d3      	ldr	r3, [r2, r3]
 80094ee:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	23b0      	movs	r3, #176	@ 0xb0
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	58d3      	ldr	r3, [r2, r3]
 80094f8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	23ae      	movs	r3, #174	@ 0xae
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	58d3      	ldr	r3, [r2, r3]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d03e      	beq.n	8009584 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009506:	1cfb      	adds	r3, r7, #3
 8009508:	781a      	ldrb	r2, [r3, #0]
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	0013      	movs	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	189b      	adds	r3, r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	18cb      	adds	r3, r1, r3
 8009516:	331c      	adds	r3, #28
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d02b      	beq.n	8009576 <USBD_CDC_DataIn+0x9e>
 800951e:	1cfb      	adds	r3, r7, #3
 8009520:	781a      	ldrb	r2, [r3, #0]
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	0013      	movs	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	189b      	adds	r3, r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	18cb      	adds	r3, r1, r3
 800952e:	331c      	adds	r3, #28
 8009530:	6818      	ldr	r0, [r3, #0]
 8009532:	1cfb      	adds	r3, r7, #3
 8009534:	781a      	ldrb	r2, [r3, #0]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	0013      	movs	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	189b      	adds	r3, r3, r2
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	18cb      	adds	r3, r1, r3
 8009542:	3320      	adds	r3, #32
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	0019      	movs	r1, r3
 8009548:	f7f6 fe76 	bl	8000238 <__aeabi_uidivmod>
 800954c:	1e0b      	subs	r3, r1, #0
 800954e:	d112      	bne.n	8009576 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009550:	1cfb      	adds	r3, r7, #3
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	0013      	movs	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	189b      	adds	r3, r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	18cb      	adds	r3, r1, r3
 8009560:	331c      	adds	r3, #28
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009566:	1cfb      	adds	r3, r7, #3
 8009568:	7819      	ldrb	r1, [r3, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	2300      	movs	r3, #0
 800956e:	2200      	movs	r2, #0
 8009570:	f001 ffce 	bl	800b510 <USBD_LL_Transmit>
 8009574:	e004      	b.n	8009580 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	2385      	movs	r3, #133	@ 0x85
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	2100      	movs	r1, #0
 800957e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	e000      	b.n	8009586 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8009584:	2302      	movs	r3, #2
  }
}
 8009586:	0018      	movs	r0, r3
 8009588:	46bd      	mov	sp, r7
 800958a:	b004      	add	sp, #16
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	000a      	movs	r2, r1
 8009598:	1cfb      	adds	r3, r7, #3
 800959a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	23ae      	movs	r3, #174	@ 0xae
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	58d3      	ldr	r3, [r2, r3]
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80095a6:	1cfb      	adds	r3, r7, #3
 80095a8:	781a      	ldrb	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	0011      	movs	r1, r2
 80095ae:	0018      	movs	r0, r3
 80095b0:	f002 f81c 	bl	800b5ec <USBD_LL_GetRxDataSize>
 80095b4:	0001      	movs	r1, r0
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	2383      	movs	r3, #131	@ 0x83
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	23ae      	movs	r3, #174	@ 0xae
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	58d3      	ldr	r3, [r2, r3]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d011      	beq.n	80095ee <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	23af      	movs	r3, #175	@ 0xaf
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	58d3      	ldr	r3, [r2, r3]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	68f9      	ldr	r1, [r7, #12]
 80095d6:	2381      	movs	r3, #129	@ 0x81
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	58c8      	ldr	r0, [r1, r3]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2183      	movs	r1, #131	@ 0x83
 80095e0:	0089      	lsls	r1, r1, #2
 80095e2:	468c      	mov	ip, r1
 80095e4:	4463      	add	r3, ip
 80095e6:	0019      	movs	r1, r3
 80095e8:	4790      	blx	r2

    return USBD_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	e000      	b.n	80095f0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80095ee:	2302      	movs	r3, #2
  }
}
 80095f0:	0018      	movs	r0, r3
 80095f2:	46bd      	mov	sp, r7
 80095f4:	b004      	add	sp, #16
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80095f8:	b590      	push	{r4, r7, lr}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	23ae      	movs	r3, #174	@ 0xae
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	58d3      	ldr	r3, [r2, r3]
 8009608:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	23af      	movs	r3, #175	@ 0xaf
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	58d3      	ldr	r3, [r2, r3]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d018      	beq.n	8009648 <USBD_CDC_EP0_RxReady+0x50>
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	2380      	movs	r3, #128	@ 0x80
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	5cd3      	ldrb	r3, [r2, r3]
 800961e:	2bff      	cmp	r3, #255	@ 0xff
 8009620:	d012      	beq.n	8009648 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	23af      	movs	r3, #175	@ 0xaf
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	58d3      	ldr	r3, [r2, r3]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	68f9      	ldr	r1, [r7, #12]
 800962e:	2280      	movs	r2, #128	@ 0x80
 8009630:	0092      	lsls	r2, r2, #2
 8009632:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8009634:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4c06      	ldr	r4, [pc, #24]	@ (8009654 <USBD_CDC_EP0_RxReady+0x5c>)
 800963a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800963c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	2380      	movs	r3, #128	@ 0x80
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	21ff      	movs	r1, #255	@ 0xff
 8009646:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	0018      	movs	r0, r3
 800964c:	46bd      	mov	sp, r7
 800964e:	b005      	add	sp, #20
 8009650:	bd90      	pop	{r4, r7, pc}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	00000201 	.word	0x00000201

08009658 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2243      	movs	r2, #67	@ 0x43
 8009664:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009666:	4b02      	ldr	r3, [pc, #8]	@ (8009670 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009668:	0018      	movs	r0, r3
 800966a:	46bd      	mov	sp, r7
 800966c:	b002      	add	sp, #8
 800966e:	bd80      	pop	{r7, pc}
 8009670:	200000ac 	.word	0x200000ac

08009674 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2243      	movs	r2, #67	@ 0x43
 8009680:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009682:	4b02      	ldr	r3, [pc, #8]	@ (800968c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009684:	0018      	movs	r0, r3
 8009686:	46bd      	mov	sp, r7
 8009688:	b002      	add	sp, #8
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000068 	.word	0x20000068

08009690 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2243      	movs	r2, #67	@ 0x43
 800969c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800969e:	4b02      	ldr	r3, [pc, #8]	@ (80096a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80096a0:	0018      	movs	r0, r3
 80096a2:	46bd      	mov	sp, r7
 80096a4:	b002      	add	sp, #8
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	200000f0 	.word	0x200000f0

080096ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	220a      	movs	r2, #10
 80096b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80096ba:	4b02      	ldr	r3, [pc, #8]	@ (80096c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80096bc:	0018      	movs	r0, r3
 80096be:	46bd      	mov	sp, r7
 80096c0:	b002      	add	sp, #8
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20000024 	.word	0x20000024

080096c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80096d2:	200f      	movs	r0, #15
 80096d4:	183b      	adds	r3, r7, r0
 80096d6:	2202      	movs	r2, #2
 80096d8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d007      	beq.n	80096f0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	23af      	movs	r3, #175	@ 0xaf
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80096ea:	183b      	adds	r3, r7, r0
 80096ec:	2200      	movs	r2, #0
 80096ee:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80096f0:	230f      	movs	r3, #15
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	781b      	ldrb	r3, [r3, #0]
}
 80096f6:	0018      	movs	r0, r3
 80096f8:	46bd      	mov	sp, r7
 80096fa:	b004      	add	sp, #16
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	1dbb      	adds	r3, r7, #6
 800970a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	23ae      	movs	r3, #174	@ 0xae
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	58d3      	ldr	r3, [r2, r3]
 8009714:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	2382      	movs	r3, #130	@ 0x82
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8009720:	1dbb      	adds	r3, r7, #6
 8009722:	8819      	ldrh	r1, [r3, #0]
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	2384      	movs	r3, #132	@ 0x84
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	0018      	movs	r0, r3
 8009730:	46bd      	mov	sp, r7
 8009732:	b006      	add	sp, #24
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	23ae      	movs	r3, #174	@ 0xae
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	58d3      	ldr	r3, [r2, r3]
 8009748:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	2381      	movs	r3, #129	@ 0x81
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	0018      	movs	r0, r3
 8009758:	46bd      	mov	sp, r7
 800975a:	b004      	add	sp, #16
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	23ae      	movs	r3, #174	@ 0xae
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	58d3      	ldr	r3, [r2, r3]
 800976e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	23ae      	movs	r3, #174	@ 0xae
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	58d3      	ldr	r3, [r2, r3]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d022      	beq.n	80097c2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	2385      	movs	r3, #133	@ 0x85
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	58d3      	ldr	r3, [r2, r3]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d11a      	bne.n	80097be <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	2385      	movs	r3, #133	@ 0x85
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	2101      	movs	r1, #1
 8009790:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	2384      	movs	r3, #132	@ 0x84
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	58d2      	ldr	r2, [r2, r3]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	2382      	movs	r3, #130	@ 0x82
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	2384      	movs	r3, #132	@ 0x84
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	000a      	movs	r2, r1
 80097b4:	2181      	movs	r1, #129	@ 0x81
 80097b6:	f001 feab 	bl	800b510 <USBD_LL_Transmit>

      return USBD_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	e002      	b.n	80097c4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80097c2:	2302      	movs	r3, #2
  }
}
 80097c4:	0018      	movs	r0, r3
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b004      	add	sp, #16
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	23ae      	movs	r3, #174	@ 0xae
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	58d3      	ldr	r3, [r2, r3]
 80097dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	23ae      	movs	r3, #174	@ 0xae
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	58d3      	ldr	r3, [r2, r3]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d019      	beq.n	800981e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7c1b      	ldrb	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	2381      	movs	r3, #129	@ 0x81
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	58d2      	ldr	r2, [r2, r3]
 80097fa:	2380      	movs	r3, #128	@ 0x80
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	2101      	movs	r1, #1
 8009802:	f001 febc 	bl	800b57e <USBD_LL_PrepareReceive>
 8009806:	e008      	b.n	800981a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	2381      	movs	r3, #129	@ 0x81
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	58d2      	ldr	r2, [r2, r3]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	2340      	movs	r3, #64	@ 0x40
 8009814:	2101      	movs	r1, #1
 8009816:	f001 feb2 	bl	800b57e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	e000      	b.n	8009820 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800981e:	2302      	movs	r3, #2
  }
}
 8009820:	0018      	movs	r0, r3
 8009822:	46bd      	mov	sp, r7
 8009824:	b004      	add	sp, #16
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	1dfb      	adds	r3, r7, #7
 8009834:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800983c:	2302      	movs	r3, #2
 800983e:	e020      	b.n	8009882 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	23ad      	movs	r3, #173	@ 0xad
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	58d3      	ldr	r3, [r2, r3]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	23ad      	movs	r3, #173	@ 0xad
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	2100      	movs	r1, #0
 8009854:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	23ac      	movs	r3, #172	@ 0xac
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	68b9      	ldr	r1, [r7, #8]
 8009864:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	23a7      	movs	r3, #167	@ 0xa7
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	2101      	movs	r1, #1
 800986e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	1dfa      	adds	r2, r7, #7
 8009874:	7812      	ldrb	r2, [r2, #0]
 8009876:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	0018      	movs	r0, r3
 800987c:	f001 fcac 	bl	800b1d8 <USBD_LL_Init>

  return USBD_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	0018      	movs	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	b004      	add	sp, #16
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009894:	200f      	movs	r0, #15
 8009896:	183b      	adds	r3, r7, r0
 8009898:	2200      	movs	r2, #0
 800989a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d008      	beq.n	80098b4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	23ad      	movs	r3, #173	@ 0xad
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80098ac:	183b      	adds	r3, r7, r0
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
 80098b2:	e003      	b.n	80098bc <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80098b4:	230f      	movs	r3, #15
 80098b6:	18fb      	adds	r3, r7, r3
 80098b8:	2202      	movs	r2, #2
 80098ba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80098bc:	230f      	movs	r3, #15
 80098be:	18fb      	adds	r3, r7, r3
 80098c0:	781b      	ldrb	r3, [r3, #0]
}
 80098c2:	0018      	movs	r0, r3
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b004      	add	sp, #16
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	0018      	movs	r0, r3
 80098d6:	f001 fce3 	bl	800b2a0 <USBD_LL_Start>

  return USBD_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	0018      	movs	r0, r3
 80098de:	46bd      	mov	sp, r7
 80098e0:	b002      	add	sp, #8
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	0018      	movs	r0, r3
 80098f0:	46bd      	mov	sp, r7
 80098f2:	b002      	add	sp, #8
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80098f6:	b590      	push	{r4, r7, lr}
 80098f8:	b085      	sub	sp, #20
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	000a      	movs	r2, r1
 8009900:	1cfb      	adds	r3, r7, #3
 8009902:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009904:	240f      	movs	r4, #15
 8009906:	193b      	adds	r3, r7, r4
 8009908:	2202      	movs	r2, #2
 800990a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	23ad      	movs	r3, #173	@ 0xad
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	58d3      	ldr	r3, [r2, r3]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00e      	beq.n	8009936 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	23ad      	movs	r3, #173	@ 0xad
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	58d3      	ldr	r3, [r2, r3]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	1cfa      	adds	r2, r7, #3
 8009924:	7811      	ldrb	r1, [r2, #0]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	0010      	movs	r0, r2
 800992a:	4798      	blx	r3
 800992c:	1e03      	subs	r3, r0, #0
 800992e:	d102      	bne.n	8009936 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8009930:	193b      	adds	r3, r7, r4
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009936:	230f      	movs	r3, #15
 8009938:	18fb      	adds	r3, r7, r3
 800993a:	781b      	ldrb	r3, [r3, #0]
}
 800993c:	0018      	movs	r0, r3
 800993e:	46bd      	mov	sp, r7
 8009940:	b005      	add	sp, #20
 8009942:	bd90      	pop	{r4, r7, pc}

08009944 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	000a      	movs	r2, r1
 800994e:	1cfb      	adds	r3, r7, #3
 8009950:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	23ad      	movs	r3, #173	@ 0xad
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	58d3      	ldr	r3, [r2, r3]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	1cfa      	adds	r2, r7, #3
 800995e:	7811      	ldrb	r1, [r2, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	0010      	movs	r0, r2
 8009964:	4798      	blx	r3

  return USBD_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	0018      	movs	r0, r3
 800996a:	46bd      	mov	sp, r7
 800996c:	b002      	add	sp, #8
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	22aa      	movs	r2, #170	@ 0xaa
 800997e:	0092      	lsls	r2, r2, #2
 8009980:	4694      	mov	ip, r2
 8009982:	4463      	add	r3, ip
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	0011      	movs	r1, r2
 8009988:	0018      	movs	r0, r3
 800998a:	f001 f810 	bl	800a9ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	23a5      	movs	r3, #165	@ 0xa5
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	2101      	movs	r1, #1
 8009996:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a23      	ldr	r2, [pc, #140]	@ (8009a28 <USBD_LL_SetupStage+0xb8>)
 800999c:	5a9b      	ldrh	r3, [r3, r2]
 800999e:	0019      	movs	r1, r3
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	23a6      	movs	r3, #166	@ 0xa6
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	23aa      	movs	r3, #170	@ 0xaa
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	5cd3      	ldrb	r3, [r2, r3]
 80099b0:	001a      	movs	r2, r3
 80099b2:	231f      	movs	r3, #31
 80099b4:	4013      	ands	r3, r2
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d019      	beq.n	80099ee <USBD_LL_SetupStage+0x7e>
 80099ba:	d822      	bhi.n	8009a02 <USBD_LL_SetupStage+0x92>
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <USBD_LL_SetupStage+0x56>
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d00a      	beq.n	80099da <USBD_LL_SetupStage+0x6a>
 80099c4:	e01d      	b.n	8009a02 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	22aa      	movs	r2, #170	@ 0xaa
 80099ca:	0092      	lsls	r2, r2, #2
 80099cc:	189a      	adds	r2, r3, r2
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	0011      	movs	r1, r2
 80099d2:	0018      	movs	r0, r3
 80099d4:	f000 fa10 	bl	8009df8 <USBD_StdDevReq>
      break;
 80099d8:	e020      	b.n	8009a1c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	22aa      	movs	r2, #170	@ 0xaa
 80099de:	0092      	lsls	r2, r2, #2
 80099e0:	189a      	adds	r2, r3, r2
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	0011      	movs	r1, r2
 80099e6:	0018      	movs	r0, r3
 80099e8:	f000 fa78 	bl	8009edc <USBD_StdItfReq>
      break;
 80099ec:	e016      	b.n	8009a1c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	22aa      	movs	r2, #170	@ 0xaa
 80099f2:	0092      	lsls	r2, r2, #2
 80099f4:	189a      	adds	r2, r3, r2
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	0011      	movs	r1, r2
 80099fa:	0018      	movs	r0, r3
 80099fc:	f000 fac5 	bl	8009f8a <USBD_StdEPReq>
      break;
 8009a00:	e00c      	b.n	8009a1c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	23aa      	movs	r3, #170	@ 0xaa
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	5cd3      	ldrb	r3, [r2, r3]
 8009a0a:	227f      	movs	r2, #127	@ 0x7f
 8009a0c:	4393      	bics	r3, r2
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	0011      	movs	r1, r2
 8009a14:	0018      	movs	r0, r3
 8009a16:	f001 fcca 	bl	800b3ae <USBD_LL_StallEP>
      break;
 8009a1a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b002      	add	sp, #8
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	46c0      	nop			@ (mov r8, r8)
 8009a28:	000002ae 	.word	0x000002ae

08009a2c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	200b      	movs	r0, #11
 8009a38:	183b      	adds	r3, r7, r0
 8009a3a:	1c0a      	adds	r2, r1, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a3e:	183b      	adds	r3, r7, r0
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d154      	bne.n	8009af0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3355      	adds	r3, #85	@ 0x55
 8009a4a:	33ff      	adds	r3, #255	@ 0xff
 8009a4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	23a5      	movs	r3, #165	@ 0xa5
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	58d3      	ldr	r3, [r2, r3]
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d139      	bne.n	8009ace <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d919      	bls.n	8009a9a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d203      	bcs.n	8009a88 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	e002      	b.n	8009a8e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	001a      	movs	r2, r3
 8009a94:	f001 f898 	bl	800abc8 <USBD_CtlContinueRx>
 8009a98:	e045      	b.n	8009b26 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	23ad      	movs	r3, #173	@ 0xad
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	58d3      	ldr	r3, [r2, r3]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00d      	beq.n	8009ac4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	23a7      	movs	r3, #167	@ 0xa7
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d107      	bne.n	8009ac4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	23ad      	movs	r3, #173	@ 0xad
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	58d3      	ldr	r3, [r2, r3]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	0010      	movs	r0, r2
 8009ac2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f001 f891 	bl	800abee <USBD_CtlSendStatus>
 8009acc:	e02b      	b.n	8009b26 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	23a5      	movs	r3, #165	@ 0xa5
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	58d3      	ldr	r3, [r2, r3]
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d125      	bne.n	8009b26 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	23a5      	movs	r3, #165	@ 0xa5
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f001 fc60 	bl	800b3ae <USBD_LL_StallEP>
 8009aee:	e01a      	b.n	8009b26 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	23ad      	movs	r3, #173	@ 0xad
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	58d3      	ldr	r3, [r2, r3]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d011      	beq.n	8009b22 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	23a7      	movs	r3, #167	@ 0xa7
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d10b      	bne.n	8009b22 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	23ad      	movs	r3, #173	@ 0xad
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	58d3      	ldr	r3, [r2, r3]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	220b      	movs	r2, #11
 8009b16:	18ba      	adds	r2, r7, r2
 8009b18:	7811      	ldrb	r1, [r2, #0]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	0010      	movs	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	e001      	b.n	8009b26 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b22:	2302      	movs	r3, #2
 8009b24:	e000      	b.n	8009b28 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	0018      	movs	r0, r3
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	b006      	add	sp, #24
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	200b      	movs	r0, #11
 8009b3c:	183b      	adds	r3, r7, r0
 8009b3e:	1c0a      	adds	r2, r1, #0
 8009b40:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b42:	183b      	adds	r3, r7, r0
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d000      	beq.n	8009b4c <USBD_LL_DataInStage+0x1c>
 8009b4a:	e08e      	b.n	8009c6a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3314      	adds	r3, #20
 8009b50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	23a5      	movs	r3, #165	@ 0xa5
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	58d3      	ldr	r3, [r2, r3]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d164      	bne.n	8009c28 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d915      	bls.n	8009b96 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	1ad2      	subs	r2, r2, r3
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	0018      	movs	r0, r3
 8009b84:	f000 ffe9 	bl	800ab5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2100      	movs	r1, #0
 8009b90:	f001 fcf5 	bl	800b57e <USBD_LL_PrepareReceive>
 8009b94:	e059      	b.n	8009c4a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	689a      	ldr	r2, [r3, #8]
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	0019      	movs	r1, r3
 8009ba0:	0010      	movs	r0, r2
 8009ba2:	f7f6 fb49 	bl	8000238 <__aeabi_uidivmod>
 8009ba6:	1e0b      	subs	r3, r1, #0
 8009ba8:	d11f      	bne.n	8009bea <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	689a      	ldr	r2, [r3, #8]
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d319      	bcc.n	8009bea <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	689a      	ldr	r2, [r3, #8]
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	23a6      	movs	r3, #166	@ 0xa6
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d211      	bcs.n	8009bea <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2100      	movs	r1, #0
 8009bcc:	0018      	movs	r0, r3
 8009bce:	f000 ffc4 	bl	800ab5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	23a6      	movs	r3, #166	@ 0xa6
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	2100      	movs	r1, #0
 8009bda:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	2300      	movs	r3, #0
 8009be0:	2200      	movs	r2, #0
 8009be2:	2100      	movs	r1, #0
 8009be4:	f001 fccb 	bl	800b57e <USBD_LL_PrepareReceive>
 8009be8:	e02f      	b.n	8009c4a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	23ad      	movs	r3, #173	@ 0xad
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	58d3      	ldr	r3, [r2, r3]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00d      	beq.n	8009c14 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	23a7      	movs	r3, #167	@ 0xa7
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d107      	bne.n	8009c14 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	23ad      	movs	r3, #173	@ 0xad
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	58d3      	ldr	r3, [r2, r3]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	0010      	movs	r0, r2
 8009c12:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2180      	movs	r1, #128	@ 0x80
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f001 fbc8 	bl	800b3ae <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	0018      	movs	r0, r3
 8009c22:	f000 fff8 	bl	800ac16 <USBD_CtlReceiveStatus>
 8009c26:	e010      	b.n	8009c4a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	23a5      	movs	r3, #165	@ 0xa5
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	58d3      	ldr	r3, [r2, r3]
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d005      	beq.n	8009c40 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	23a5      	movs	r3, #165	@ 0xa5
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d104      	bne.n	8009c4a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2180      	movs	r1, #128	@ 0x80
 8009c44:	0018      	movs	r0, r3
 8009c46:	f001 fbb2 	bl	800b3ae <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	23a8      	movs	r3, #168	@ 0xa8
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	5cd3      	ldrb	r3, [r2, r3]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d124      	bne.n	8009ca0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	0018      	movs	r0, r3
 8009c5a:	f7ff fe43 	bl	80098e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	23a8      	movs	r3, #168	@ 0xa8
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	2100      	movs	r1, #0
 8009c66:	54d1      	strb	r1, [r2, r3]
 8009c68:	e01a      	b.n	8009ca0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	23ad      	movs	r3, #173	@ 0xad
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	58d3      	ldr	r3, [r2, r3]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d011      	beq.n	8009c9c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	23a7      	movs	r3, #167	@ 0xa7
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d10b      	bne.n	8009c9c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	23ad      	movs	r3, #173	@ 0xad
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	58d3      	ldr	r3, [r2, r3]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	220b      	movs	r2, #11
 8009c90:	18ba      	adds	r2, r7, r2
 8009c92:	7811      	ldrb	r1, [r2, #0]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	0010      	movs	r0, r2
 8009c98:	4798      	blx	r3
 8009c9a:	e001      	b.n	8009ca0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e000      	b.n	8009ca2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	b006      	add	sp, #24
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	2340      	movs	r3, #64	@ 0x40
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2100      	movs	r1, #0
 8009cba:	f001 fb16 	bl	800b2ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	23ac      	movs	r3, #172	@ 0xac
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	23b2      	movs	r3, #178	@ 0xb2
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	2140      	movs	r1, #64	@ 0x40
 8009cd0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	2340      	movs	r3, #64	@ 0x40
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2180      	movs	r1, #128	@ 0x80
 8009cda:	f001 fb06 	bl	800b2ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2240      	movs	r2, #64	@ 0x40
 8009ce8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	23a7      	movs	r3, #167	@ 0xa7
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	23a5      	movs	r3, #165	@ 0xa5
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	23a9      	movs	r3, #169	@ 0xa9
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	23ae      	movs	r3, #174	@ 0xae
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	58d3      	ldr	r3, [r2, r3]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00a      	beq.n	8009d30 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	23ad      	movs	r3, #173	@ 0xad
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	58d3      	ldr	r3, [r2, r3]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	b2d9      	uxtb	r1, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	4790      	blx	r2
  }

  return USBD_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	0018      	movs	r0, r3
 8009d34:	46bd      	mov	sp, r7
 8009d36:	b002      	add	sp, #8
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	000a      	movs	r2, r1
 8009d44:	1cfb      	adds	r3, r7, #3
 8009d46:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	1cfa      	adds	r2, r7, #3
 8009d4c:	7812      	ldrb	r2, [r2, #0]
 8009d4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	0018      	movs	r0, r3
 8009d54:	46bd      	mov	sp, r7
 8009d56:	b002      	add	sp, #8
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	23a7      	movs	r3, #167	@ 0xa7
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	5cd1      	ldrb	r1, [r2, r3]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a06      	ldr	r2, [pc, #24]	@ (8009d88 <USBD_LL_Suspend+0x2c>)
 8009d70:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	23a7      	movs	r3, #167	@ 0xa7
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	2104      	movs	r1, #4
 8009d7a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	0018      	movs	r0, r3
 8009d80:	46bd      	mov	sp, r7
 8009d82:	b002      	add	sp, #8
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	46c0      	nop			@ (mov r8, r8)
 8009d88:	0000029d 	.word	0x0000029d

08009d8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	23a7      	movs	r3, #167	@ 0xa7
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	5cd3      	ldrb	r3, [r2, r3]
 8009d9c:	2b04      	cmp	r3, #4
 8009d9e:	d106      	bne.n	8009dae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a05      	ldr	r2, [pc, #20]	@ (8009db8 <USBD_LL_Resume+0x2c>)
 8009da4:	5c99      	ldrb	r1, [r3, r2]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	23a7      	movs	r3, #167	@ 0xa7
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	0018      	movs	r0, r3
 8009db2:	46bd      	mov	sp, r7
 8009db4:	b002      	add	sp, #8
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	0000029d 	.word	0x0000029d

08009dbc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	23a7      	movs	r3, #167	@ 0xa7
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	5cd3      	ldrb	r3, [r2, r3]
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d10e      	bne.n	8009dee <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	23ad      	movs	r3, #173	@ 0xad
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	58d3      	ldr	r3, [r2, r3]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	23ad      	movs	r3, #173	@ 0xad
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	58d3      	ldr	r3, [r2, r3]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	0010      	movs	r0, r2
 8009dec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	0018      	movs	r0, r3
 8009df2:	46bd      	mov	sp, r7
 8009df4:	b002      	add	sp, #8
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e02:	230f      	movs	r3, #15
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	2200      	movs	r2, #0
 8009e08:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	001a      	movs	r2, r3
 8009e10:	2360      	movs	r3, #96	@ 0x60
 8009e12:	4013      	ands	r3, r2
 8009e14:	2b40      	cmp	r3, #64	@ 0x40
 8009e16:	d004      	beq.n	8009e22 <USBD_StdDevReq+0x2a>
 8009e18:	d84f      	bhi.n	8009eba <USBD_StdDevReq+0xc2>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <USBD_StdDevReq+0x3e>
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	d14b      	bne.n	8009eba <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	23ad      	movs	r3, #173	@ 0xad
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	58d3      	ldr	r3, [r2, r3]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	0010      	movs	r0, r2
 8009e32:	4798      	blx	r3
      break;
 8009e34:	e048      	b.n	8009ec8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	785b      	ldrb	r3, [r3, #1]
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	d835      	bhi.n	8009eaa <USBD_StdDevReq+0xb2>
 8009e3e:	009a      	lsls	r2, r3, #2
 8009e40:	4b25      	ldr	r3, [pc, #148]	@ (8009ed8 <USBD_StdDevReq+0xe0>)
 8009e42:	18d3      	adds	r3, r2, r3
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	0011      	movs	r1, r2
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f000 fa52 	bl	800a2f8 <USBD_GetDescriptor>
          break;
 8009e54:	e030      	b.n	8009eb8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	0011      	movs	r1, r2
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	f000 fbfd 	bl	800a65c <USBD_SetAddress>
          break;
 8009e62:	e029      	b.n	8009eb8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	0011      	movs	r1, r2
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	f000 fc4a 	bl	800a704 <USBD_SetConfig>
          break;
 8009e70:	e022      	b.n	8009eb8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	0011      	movs	r1, r2
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f000 fce7 	bl	800a84c <USBD_GetConfig>
          break;
 8009e7e:	e01b      	b.n	8009eb8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	0011      	movs	r1, r2
 8009e86:	0018      	movs	r0, r3
 8009e88:	f000 fd1b 	bl	800a8c2 <USBD_GetStatus>
          break;
 8009e8c:	e014      	b.n	8009eb8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	0011      	movs	r1, r2
 8009e94:	0018      	movs	r0, r3
 8009e96:	f000 fd4e 	bl	800a936 <USBD_SetFeature>
          break;
 8009e9a:	e00d      	b.n	8009eb8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	0011      	movs	r1, r2
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	f000 fd5d 	bl	800a962 <USBD_ClrFeature>
          break;
 8009ea8:	e006      	b.n	8009eb8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	0011      	movs	r1, r2
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f000 fdb4 	bl	800aa1e <USBD_CtlError>
          break;
 8009eb6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009eb8:	e006      	b.n	8009ec8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	0011      	movs	r1, r2
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f000 fdac 	bl	800aa1e <USBD_CtlError>
      break;
 8009ec6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009ec8:	230f      	movs	r3, #15
 8009eca:	18fb      	adds	r3, r7, r3
 8009ecc:	781b      	ldrb	r3, [r3, #0]
}
 8009ece:	0018      	movs	r0, r3
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	b004      	add	sp, #16
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	46c0      	nop			@ (mov r8, r8)
 8009ed8:	0800c2f0 	.word	0x0800c2f0

08009edc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009edc:	b5b0      	push	{r4, r5, r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ee6:	230f      	movs	r3, #15
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	001a      	movs	r2, r3
 8009ef4:	2360      	movs	r3, #96	@ 0x60
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	2b40      	cmp	r3, #64	@ 0x40
 8009efa:	d004      	beq.n	8009f06 <USBD_StdItfReq+0x2a>
 8009efc:	d839      	bhi.n	8009f72 <USBD_StdItfReq+0x96>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <USBD_StdItfReq+0x2a>
 8009f02:	2b20      	cmp	r3, #32
 8009f04:	d135      	bne.n	8009f72 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	23a7      	movs	r3, #167	@ 0xa7
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	5cd3      	ldrb	r3, [r2, r3]
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d825      	bhi.n	8009f60 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	889b      	ldrh	r3, [r3, #4]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d819      	bhi.n	8009f52 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	23ad      	movs	r3, #173	@ 0xad
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	58d3      	ldr	r3, [r2, r3]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	250f      	movs	r5, #15
 8009f2a:	197c      	adds	r4, r7, r5
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	0010      	movs	r0, r2
 8009f32:	4798      	blx	r3
 8009f34:	0003      	movs	r3, r0
 8009f36:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	88db      	ldrh	r3, [r3, #6]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d116      	bne.n	8009f6e <USBD_StdItfReq+0x92>
 8009f40:	197b      	adds	r3, r7, r5
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d112      	bne.n	8009f6e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f000 fe4f 	bl	800abee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f50:	e00d      	b.n	8009f6e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	0011      	movs	r1, r2
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f000 fd60 	bl	800aa1e <USBD_CtlError>
          break;
 8009f5e:	e006      	b.n	8009f6e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	0011      	movs	r1, r2
 8009f66:	0018      	movs	r0, r3
 8009f68:	f000 fd59 	bl	800aa1e <USBD_CtlError>
          break;
 8009f6c:	e000      	b.n	8009f70 <USBD_StdItfReq+0x94>
          break;
 8009f6e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009f70:	e006      	b.n	8009f80 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	0011      	movs	r1, r2
 8009f78:	0018      	movs	r0, r3
 8009f7a:	f000 fd50 	bl	800aa1e <USBD_CtlError>
      break;
 8009f7e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	0018      	movs	r0, r3
 8009f84:	46bd      	mov	sp, r7
 8009f86:	b004      	add	sp, #16
 8009f88:	bdb0      	pop	{r4, r5, r7, pc}

08009f8a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009f8a:	b5b0      	push	{r4, r5, r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f94:	230f      	movs	r3, #15
 8009f96:	18fb      	adds	r3, r7, r3
 8009f98:	2200      	movs	r2, #0
 8009f9a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	889a      	ldrh	r2, [r3, #4]
 8009fa0:	230e      	movs	r3, #14
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	001a      	movs	r2, r3
 8009fac:	2360      	movs	r3, #96	@ 0x60
 8009fae:	4013      	ands	r3, r2
 8009fb0:	2b40      	cmp	r3, #64	@ 0x40
 8009fb2:	d006      	beq.n	8009fc2 <USBD_StdEPReq+0x38>
 8009fb4:	d900      	bls.n	8009fb8 <USBD_StdEPReq+0x2e>
 8009fb6:	e190      	b.n	800a2da <USBD_StdEPReq+0x350>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00c      	beq.n	8009fd6 <USBD_StdEPReq+0x4c>
 8009fbc:	2b20      	cmp	r3, #32
 8009fbe:	d000      	beq.n	8009fc2 <USBD_StdEPReq+0x38>
 8009fc0:	e18b      	b.n	800a2da <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	23ad      	movs	r3, #173	@ 0xad
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	58d3      	ldr	r3, [r2, r3]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	0010      	movs	r0, r2
 8009fd2:	4798      	blx	r3
      break;
 8009fd4:	e188      	b.n	800a2e8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	001a      	movs	r2, r3
 8009fdc:	2360      	movs	r3, #96	@ 0x60
 8009fde:	4013      	ands	r3, r2
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	d10f      	bne.n	800a004 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	23ad      	movs	r3, #173	@ 0xad
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	58d3      	ldr	r3, [r2, r3]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	250f      	movs	r5, #15
 8009ff0:	197c      	adds	r4, r7, r5
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	0010      	movs	r0, r2
 8009ff8:	4798      	blx	r3
 8009ffa:	0003      	movs	r3, r0
 8009ffc:	7023      	strb	r3, [r4, #0]

        return ret;
 8009ffe:	197b      	adds	r3, r7, r5
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	e174      	b.n	800a2ee <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	2b03      	cmp	r3, #3
 800a00a:	d007      	beq.n	800a01c <USBD_StdEPReq+0x92>
 800a00c:	dd00      	ble.n	800a010 <USBD_StdEPReq+0x86>
 800a00e:	e15c      	b.n	800a2ca <USBD_StdEPReq+0x340>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d100      	bne.n	800a016 <USBD_StdEPReq+0x8c>
 800a014:	e092      	b.n	800a13c <USBD_StdEPReq+0x1b2>
 800a016:	2b01      	cmp	r3, #1
 800a018:	d04b      	beq.n	800a0b2 <USBD_StdEPReq+0x128>
 800a01a:	e156      	b.n	800a2ca <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	23a7      	movs	r3, #167	@ 0xa7
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	5cd3      	ldrb	r3, [r2, r3]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d002      	beq.n	800a02e <USBD_StdEPReq+0xa4>
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d01d      	beq.n	800a068 <USBD_StdEPReq+0xde>
 800a02c:	e039      	b.n	800a0a2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a02e:	220e      	movs	r2, #14
 800a030:	18bb      	adds	r3, r7, r2
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d010      	beq.n	800a05a <USBD_StdEPReq+0xd0>
 800a038:	18bb      	adds	r3, r7, r2
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2b80      	cmp	r3, #128	@ 0x80
 800a03e:	d00c      	beq.n	800a05a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a040:	18bb      	adds	r3, r7, r2
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	0011      	movs	r1, r2
 800a048:	0018      	movs	r0, r3
 800a04a:	f001 f9b0 	bl	800b3ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2180      	movs	r1, #128	@ 0x80
 800a052:	0018      	movs	r0, r3
 800a054:	f001 f9ab 	bl	800b3ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a058:	e02a      	b.n	800a0b0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	0011      	movs	r1, r2
 800a060:	0018      	movs	r0, r3
 800a062:	f000 fcdc 	bl	800aa1e <USBD_CtlError>
              break;
 800a066:	e023      	b.n	800a0b0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	885b      	ldrh	r3, [r3, #2]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d113      	bne.n	800a098 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a070:	220e      	movs	r2, #14
 800a072:	18bb      	adds	r3, r7, r2
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00e      	beq.n	800a098 <USBD_StdEPReq+0x10e>
 800a07a:	18bb      	adds	r3, r7, r2
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b80      	cmp	r3, #128	@ 0x80
 800a080:	d00a      	beq.n	800a098 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	88db      	ldrh	r3, [r3, #6]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a08a:	18bb      	adds	r3, r7, r2
 800a08c:	781a      	ldrb	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	0011      	movs	r1, r2
 800a092:	0018      	movs	r0, r3
 800a094:	f001 f98b 	bl	800b3ae <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	0018      	movs	r0, r3
 800a09c:	f000 fda7 	bl	800abee <USBD_CtlSendStatus>

              break;
 800a0a0:	e006      	b.n	800a0b0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	0011      	movs	r1, r2
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f000 fcb8 	bl	800aa1e <USBD_CtlError>
              break;
 800a0ae:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a0b0:	e112      	b.n	800a2d8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	23a7      	movs	r3, #167	@ 0xa7
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	5cd3      	ldrb	r3, [r2, r3]
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d002      	beq.n	800a0c4 <USBD_StdEPReq+0x13a>
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d01d      	beq.n	800a0fe <USBD_StdEPReq+0x174>
 800a0c2:	e032      	b.n	800a12a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0c4:	220e      	movs	r2, #14
 800a0c6:	18bb      	adds	r3, r7, r2
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d010      	beq.n	800a0f0 <USBD_StdEPReq+0x166>
 800a0ce:	18bb      	adds	r3, r7, r2
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b80      	cmp	r3, #128	@ 0x80
 800a0d4:	d00c      	beq.n	800a0f0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a0d6:	18bb      	adds	r3, r7, r2
 800a0d8:	781a      	ldrb	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	0011      	movs	r1, r2
 800a0de:	0018      	movs	r0, r3
 800a0e0:	f001 f965 	bl	800b3ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2180      	movs	r1, #128	@ 0x80
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f001 f960 	bl	800b3ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0ee:	e024      	b.n	800a13a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	0011      	movs	r1, r2
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f000 fc91 	bl	800aa1e <USBD_CtlError>
              break;
 800a0fc:	e01d      	b.n	800a13a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	885b      	ldrh	r3, [r3, #2]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d118      	bne.n	800a138 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a106:	210e      	movs	r1, #14
 800a108:	187b      	adds	r3, r7, r1
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	227f      	movs	r2, #127	@ 0x7f
 800a10e:	4013      	ands	r3, r2
 800a110:	d006      	beq.n	800a120 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a112:	187b      	adds	r3, r7, r1
 800a114:	781a      	ldrb	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	0011      	movs	r1, r2
 800a11a:	0018      	movs	r0, r3
 800a11c:	f001 f972 	bl	800b404 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	0018      	movs	r0, r3
 800a124:	f000 fd63 	bl	800abee <USBD_CtlSendStatus>
              }
              break;
 800a128:	e006      	b.n	800a138 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	0011      	movs	r1, r2
 800a130:	0018      	movs	r0, r3
 800a132:	f000 fc74 	bl	800aa1e <USBD_CtlError>
              break;
 800a136:	e000      	b.n	800a13a <USBD_StdEPReq+0x1b0>
              break;
 800a138:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a13a:	e0cd      	b.n	800a2d8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	23a7      	movs	r3, #167	@ 0xa7
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	5cd3      	ldrb	r3, [r2, r3]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d002      	beq.n	800a14e <USBD_StdEPReq+0x1c4>
 800a148:	2b03      	cmp	r3, #3
 800a14a:	d03c      	beq.n	800a1c6 <USBD_StdEPReq+0x23c>
 800a14c:	e0b5      	b.n	800a2ba <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a14e:	220e      	movs	r2, #14
 800a150:	18bb      	adds	r3, r7, r2
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00a      	beq.n	800a16e <USBD_StdEPReq+0x1e4>
 800a158:	18bb      	adds	r3, r7, r2
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b80      	cmp	r3, #128	@ 0x80
 800a15e:	d006      	beq.n	800a16e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	0011      	movs	r1, r2
 800a166:	0018      	movs	r0, r3
 800a168:	f000 fc59 	bl	800aa1e <USBD_CtlError>
                break;
 800a16c:	e0ac      	b.n	800a2c8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a16e:	220e      	movs	r2, #14
 800a170:	18bb      	adds	r3, r7, r2
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	b25b      	sxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	da0c      	bge.n	800a194 <USBD_StdEPReq+0x20a>
 800a17a:	18bb      	adds	r3, r7, r2
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	227f      	movs	r2, #127	@ 0x7f
 800a180:	401a      	ands	r2, r3
 800a182:	0013      	movs	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	189b      	adds	r3, r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	3310      	adds	r3, #16
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	18d3      	adds	r3, r2, r3
 800a190:	3304      	adds	r3, #4
 800a192:	e00d      	b.n	800a1b0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a194:	230e      	movs	r3, #14
 800a196:	18fb      	adds	r3, r7, r3
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	227f      	movs	r2, #127	@ 0x7f
 800a19c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a19e:	0013      	movs	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	189b      	adds	r3, r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	3351      	adds	r3, #81	@ 0x51
 800a1a8:	33ff      	adds	r3, #255	@ 0xff
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	18d3      	adds	r3, r2, r3
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	0018      	movs	r0, r3
 800a1c0:	f000 fcab 	bl	800ab1a <USBD_CtlSendData>
              break;
 800a1c4:	e080      	b.n	800a2c8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1c6:	220e      	movs	r2, #14
 800a1c8:	18bb      	adds	r3, r7, r2
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	b25b      	sxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	da14      	bge.n	800a1fc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1d2:	18bb      	adds	r3, r7, r2
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	220f      	movs	r2, #15
 800a1d8:	401a      	ands	r2, r3
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	0013      	movs	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	189b      	adds	r3, r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	18cb      	adds	r3, r1, r3
 800a1e6:	3318      	adds	r3, #24
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d11e      	bne.n	800a22c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	0011      	movs	r1, r2
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f000 fc12 	bl	800aa1e <USBD_CtlError>
                  break;
 800a1fa:	e065      	b.n	800a2c8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1fc:	230e      	movs	r3, #14
 800a1fe:	18fb      	adds	r3, r7, r3
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	220f      	movs	r2, #15
 800a204:	401a      	ands	r2, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	23ac      	movs	r3, #172	@ 0xac
 800a20a:	0059      	lsls	r1, r3, #1
 800a20c:	0013      	movs	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	189b      	adds	r3, r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	18c3      	adds	r3, r0, r3
 800a216:	185b      	adds	r3, r3, r1
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d106      	bne.n	800a22c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	0011      	movs	r1, r2
 800a224:	0018      	movs	r0, r3
 800a226:	f000 fbfa 	bl	800aa1e <USBD_CtlError>
                  break;
 800a22a:	e04d      	b.n	800a2c8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a22c:	220e      	movs	r2, #14
 800a22e:	18bb      	adds	r3, r7, r2
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	b25b      	sxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	da0c      	bge.n	800a252 <USBD_StdEPReq+0x2c8>
 800a238:	18bb      	adds	r3, r7, r2
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	227f      	movs	r2, #127	@ 0x7f
 800a23e:	401a      	ands	r2, r3
 800a240:	0013      	movs	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	189b      	adds	r3, r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	3310      	adds	r3, #16
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	18d3      	adds	r3, r2, r3
 800a24e:	3304      	adds	r3, #4
 800a250:	e00d      	b.n	800a26e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a252:	230e      	movs	r3, #14
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	227f      	movs	r2, #127	@ 0x7f
 800a25a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a25c:	0013      	movs	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	189b      	adds	r3, r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	3351      	adds	r3, #81	@ 0x51
 800a266:	33ff      	adds	r3, #255	@ 0xff
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	18d3      	adds	r3, r2, r3
 800a26c:	3304      	adds	r3, #4
 800a26e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a270:	220e      	movs	r2, #14
 800a272:	18bb      	adds	r3, r7, r2
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <USBD_StdEPReq+0x2f8>
 800a27a:	18bb      	adds	r3, r7, r2
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b80      	cmp	r3, #128	@ 0x80
 800a280:	d103      	bne.n	800a28a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2200      	movs	r2, #0
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	e010      	b.n	800a2ac <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a28a:	230e      	movs	r3, #14
 800a28c:	18fb      	adds	r3, r7, r3
 800a28e:	781a      	ldrb	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	0011      	movs	r1, r2
 800a294:	0018      	movs	r0, r3
 800a296:	f001 f8e0 	bl	800b45a <USBD_LL_IsStallEP>
 800a29a:	1e03      	subs	r3, r0, #0
 800a29c:	d003      	beq.n	800a2a6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	e002      	b.n	800a2ac <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	f000 fc31 	bl	800ab1a <USBD_CtlSendData>
              break;
 800a2b8:	e006      	b.n	800a2c8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	0011      	movs	r1, r2
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	f000 fbac 	bl	800aa1e <USBD_CtlError>
              break;
 800a2c6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800a2c8:	e006      	b.n	800a2d8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	0011      	movs	r1, r2
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f000 fba4 	bl	800aa1e <USBD_CtlError>
          break;
 800a2d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800a2d8:	e006      	b.n	800a2e8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	0011      	movs	r1, r2
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	f000 fb9c 	bl	800aa1e <USBD_CtlError>
      break;
 800a2e6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a2e8:	230f      	movs	r3, #15
 800a2ea:	18fb      	adds	r3, r7, r3
 800a2ec:	781b      	ldrb	r3, [r3, #0]
}
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	b004      	add	sp, #16
 800a2f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a2f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a302:	2308      	movs	r3, #8
 800a304:	18fb      	adds	r3, r7, r3
 800a306:	2200      	movs	r2, #0
 800a308:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a30e:	230b      	movs	r3, #11
 800a310:	18fb      	adds	r3, r7, r3
 800a312:	2200      	movs	r2, #0
 800a314:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	0a1b      	lsrs	r3, r3, #8
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	2b07      	cmp	r3, #7
 800a320:	d900      	bls.n	800a324 <USBD_GetDescriptor+0x2c>
 800a322:	e159      	b.n	800a5d8 <USBD_GetDescriptor+0x2e0>
 800a324:	009a      	lsls	r2, r3, #2
 800a326:	4bcb      	ldr	r3, [pc, #812]	@ (800a654 <USBD_GetDescriptor+0x35c>)
 800a328:	18d3      	adds	r3, r2, r3
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	23ac      	movs	r3, #172	@ 0xac
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	58d3      	ldr	r3, [r2, r3]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	7c12      	ldrb	r2, [r2, #16]
 800a33c:	2108      	movs	r1, #8
 800a33e:	1879      	adds	r1, r7, r1
 800a340:	0010      	movs	r0, r2
 800a342:	4798      	blx	r3
 800a344:	0003      	movs	r3, r0
 800a346:	60fb      	str	r3, [r7, #12]
      break;
 800a348:	e153      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	7c1b      	ldrb	r3, [r3, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10f      	bne.n	800a372 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	23ad      	movs	r3, #173	@ 0xad
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	58d3      	ldr	r3, [r2, r3]
 800a35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35c:	2208      	movs	r2, #8
 800a35e:	18ba      	adds	r2, r7, r2
 800a360:	0010      	movs	r0, r2
 800a362:	4798      	blx	r3
 800a364:	0003      	movs	r3, r0
 800a366:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	2202      	movs	r2, #2
 800a36e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a370:	e13f      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	23ad      	movs	r3, #173	@ 0xad
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	58d3      	ldr	r3, [r2, r3]
 800a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37c:	2208      	movs	r2, #8
 800a37e:	18ba      	adds	r2, r7, r2
 800a380:	0010      	movs	r0, r2
 800a382:	4798      	blx	r3
 800a384:	0003      	movs	r3, r0
 800a386:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	2202      	movs	r2, #2
 800a38e:	701a      	strb	r2, [r3, #0]
      break;
 800a390:	e12f      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	885b      	ldrh	r3, [r3, #2]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b05      	cmp	r3, #5
 800a39a:	d900      	bls.n	800a39e <USBD_GetDescriptor+0xa6>
 800a39c:	e0d0      	b.n	800a540 <USBD_GetDescriptor+0x248>
 800a39e:	009a      	lsls	r2, r3, #2
 800a3a0:	4bad      	ldr	r3, [pc, #692]	@ (800a658 <USBD_GetDescriptor+0x360>)
 800a3a2:	18d3      	adds	r3, r2, r3
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	23ac      	movs	r3, #172	@ 0xac
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	58d3      	ldr	r3, [r2, r3]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00d      	beq.n	800a3d2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	23ac      	movs	r3, #172	@ 0xac
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	58d3      	ldr	r3, [r2, r3]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	7c12      	ldrb	r2, [r2, #16]
 800a3c4:	2108      	movs	r1, #8
 800a3c6:	1879      	adds	r1, r7, r1
 800a3c8:	0010      	movs	r0, r2
 800a3ca:	4798      	blx	r3
 800a3cc:	0003      	movs	r3, r0
 800a3ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3d0:	e0c3      	b.n	800a55a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	0011      	movs	r1, r2
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f000 fb20 	bl	800aa1e <USBD_CtlError>
            err++;
 800a3de:	210b      	movs	r1, #11
 800a3e0:	187b      	adds	r3, r7, r1
 800a3e2:	781a      	ldrb	r2, [r3, #0]
 800a3e4:	187b      	adds	r3, r7, r1
 800a3e6:	3201      	adds	r2, #1
 800a3e8:	701a      	strb	r2, [r3, #0]
          break;
 800a3ea:	e0b6      	b.n	800a55a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	23ac      	movs	r3, #172	@ 0xac
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	58d3      	ldr	r3, [r2, r3]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00d      	beq.n	800a416 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	23ac      	movs	r3, #172	@ 0xac
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	58d3      	ldr	r3, [r2, r3]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	7c12      	ldrb	r2, [r2, #16]
 800a408:	2108      	movs	r1, #8
 800a40a:	1879      	adds	r1, r7, r1
 800a40c:	0010      	movs	r0, r2
 800a40e:	4798      	blx	r3
 800a410:	0003      	movs	r3, r0
 800a412:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a414:	e0a1      	b.n	800a55a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	0011      	movs	r1, r2
 800a41c:	0018      	movs	r0, r3
 800a41e:	f000 fafe 	bl	800aa1e <USBD_CtlError>
            err++;
 800a422:	210b      	movs	r1, #11
 800a424:	187b      	adds	r3, r7, r1
 800a426:	781a      	ldrb	r2, [r3, #0]
 800a428:	187b      	adds	r3, r7, r1
 800a42a:	3201      	adds	r2, #1
 800a42c:	701a      	strb	r2, [r3, #0]
          break;
 800a42e:	e094      	b.n	800a55a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	23ac      	movs	r3, #172	@ 0xac
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	58d3      	ldr	r3, [r2, r3]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00d      	beq.n	800a45a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	23ac      	movs	r3, #172	@ 0xac
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	58d3      	ldr	r3, [r2, r3]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	7c12      	ldrb	r2, [r2, #16]
 800a44c:	2108      	movs	r1, #8
 800a44e:	1879      	adds	r1, r7, r1
 800a450:	0010      	movs	r0, r2
 800a452:	4798      	blx	r3
 800a454:	0003      	movs	r3, r0
 800a456:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a458:	e07f      	b.n	800a55a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	0011      	movs	r1, r2
 800a460:	0018      	movs	r0, r3
 800a462:	f000 fadc 	bl	800aa1e <USBD_CtlError>
            err++;
 800a466:	210b      	movs	r1, #11
 800a468:	187b      	adds	r3, r7, r1
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	187b      	adds	r3, r7, r1
 800a46e:	3201      	adds	r2, #1
 800a470:	701a      	strb	r2, [r3, #0]
          break;
 800a472:	e072      	b.n	800a55a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	23ac      	movs	r3, #172	@ 0xac
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	58d3      	ldr	r3, [r2, r3]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00d      	beq.n	800a49e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	23ac      	movs	r3, #172	@ 0xac
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	58d3      	ldr	r3, [r2, r3]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	7c12      	ldrb	r2, [r2, #16]
 800a490:	2108      	movs	r1, #8
 800a492:	1879      	adds	r1, r7, r1
 800a494:	0010      	movs	r0, r2
 800a496:	4798      	blx	r3
 800a498:	0003      	movs	r3, r0
 800a49a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a49c:	e05d      	b.n	800a55a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	0011      	movs	r1, r2
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f000 faba 	bl	800aa1e <USBD_CtlError>
            err++;
 800a4aa:	210b      	movs	r1, #11
 800a4ac:	187b      	adds	r3, r7, r1
 800a4ae:	781a      	ldrb	r2, [r3, #0]
 800a4b0:	187b      	adds	r3, r7, r1
 800a4b2:	3201      	adds	r2, #1
 800a4b4:	701a      	strb	r2, [r3, #0]
          break;
 800a4b6:	e050      	b.n	800a55a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	23ac      	movs	r3, #172	@ 0xac
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	58d3      	ldr	r3, [r2, r3]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00d      	beq.n	800a4e2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	23ac      	movs	r3, #172	@ 0xac
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	58d3      	ldr	r3, [r2, r3]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	7c12      	ldrb	r2, [r2, #16]
 800a4d4:	2108      	movs	r1, #8
 800a4d6:	1879      	adds	r1, r7, r1
 800a4d8:	0010      	movs	r0, r2
 800a4da:	4798      	blx	r3
 800a4dc:	0003      	movs	r3, r0
 800a4de:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4e0:	e03b      	b.n	800a55a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	0011      	movs	r1, r2
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f000 fa98 	bl	800aa1e <USBD_CtlError>
            err++;
 800a4ee:	210b      	movs	r1, #11
 800a4f0:	187b      	adds	r3, r7, r1
 800a4f2:	781a      	ldrb	r2, [r3, #0]
 800a4f4:	187b      	adds	r3, r7, r1
 800a4f6:	3201      	adds	r2, #1
 800a4f8:	701a      	strb	r2, [r3, #0]
          break;
 800a4fa:	e02e      	b.n	800a55a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	23ac      	movs	r3, #172	@ 0xac
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	58d3      	ldr	r3, [r2, r3]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00d      	beq.n	800a526 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	23ac      	movs	r3, #172	@ 0xac
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	58d3      	ldr	r3, [r2, r3]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	2108      	movs	r1, #8
 800a51a:	1879      	adds	r1, r7, r1
 800a51c:	0010      	movs	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	0003      	movs	r3, r0
 800a522:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a524:	e019      	b.n	800a55a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	0011      	movs	r1, r2
 800a52c:	0018      	movs	r0, r3
 800a52e:	f000 fa76 	bl	800aa1e <USBD_CtlError>
            err++;
 800a532:	210b      	movs	r1, #11
 800a534:	187b      	adds	r3, r7, r1
 800a536:	781a      	ldrb	r2, [r3, #0]
 800a538:	187b      	adds	r3, r7, r1
 800a53a:	3201      	adds	r2, #1
 800a53c:	701a      	strb	r2, [r3, #0]
          break;
 800a53e:	e00c      	b.n	800a55a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	0011      	movs	r1, r2
 800a546:	0018      	movs	r0, r3
 800a548:	f000 fa69 	bl	800aa1e <USBD_CtlError>
          err++;
 800a54c:	210b      	movs	r1, #11
 800a54e:	187b      	adds	r3, r7, r1
 800a550:	781a      	ldrb	r2, [r3, #0]
 800a552:	187b      	adds	r3, r7, r1
 800a554:	3201      	adds	r2, #1
 800a556:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a558:	e04b      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>
 800a55a:	e04a      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	7c1b      	ldrb	r3, [r3, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10b      	bne.n	800a57c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	23ad      	movs	r3, #173	@ 0xad
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	58d3      	ldr	r3, [r2, r3]
 800a56c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a56e:	2208      	movs	r2, #8
 800a570:	18ba      	adds	r2, r7, r2
 800a572:	0010      	movs	r0, r2
 800a574:	4798      	blx	r3
 800a576:	0003      	movs	r3, r0
 800a578:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a57a:	e03a      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	0011      	movs	r1, r2
 800a582:	0018      	movs	r0, r3
 800a584:	f000 fa4b 	bl	800aa1e <USBD_CtlError>
        err++;
 800a588:	210b      	movs	r1, #11
 800a58a:	187b      	adds	r3, r7, r1
 800a58c:	781a      	ldrb	r2, [r3, #0]
 800a58e:	187b      	adds	r3, r7, r1
 800a590:	3201      	adds	r2, #1
 800a592:	701a      	strb	r2, [r3, #0]
      break;
 800a594:	e02d      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	7c1b      	ldrb	r3, [r3, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10f      	bne.n	800a5be <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	23ad      	movs	r3, #173	@ 0xad
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	58d3      	ldr	r3, [r2, r3]
 800a5a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	18ba      	adds	r2, r7, r2
 800a5ac:	0010      	movs	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	0003      	movs	r3, r0
 800a5b2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	2207      	movs	r2, #7
 800a5ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5bc:	e019      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	0011      	movs	r1, r2
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	f000 fa2a 	bl	800aa1e <USBD_CtlError>
        err++;
 800a5ca:	210b      	movs	r1, #11
 800a5cc:	187b      	adds	r3, r7, r1
 800a5ce:	781a      	ldrb	r2, [r3, #0]
 800a5d0:	187b      	adds	r3, r7, r1
 800a5d2:	3201      	adds	r2, #1
 800a5d4:	701a      	strb	r2, [r3, #0]
      break;
 800a5d6:	e00c      	b.n	800a5f2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	0011      	movs	r1, r2
 800a5de:	0018      	movs	r0, r3
 800a5e0:	f000 fa1d 	bl	800aa1e <USBD_CtlError>
      err++;
 800a5e4:	210b      	movs	r1, #11
 800a5e6:	187b      	adds	r3, r7, r1
 800a5e8:	781a      	ldrb	r2, [r3, #0]
 800a5ea:	187b      	adds	r3, r7, r1
 800a5ec:	3201      	adds	r2, #1
 800a5ee:	701a      	strb	r2, [r3, #0]
      break;
 800a5f0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800a5f2:	230b      	movs	r3, #11
 800a5f4:	18fb      	adds	r3, r7, r3
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d127      	bne.n	800a64c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a5fc:	2108      	movs	r1, #8
 800a5fe:	187b      	adds	r3, r7, r1
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d019      	beq.n	800a63a <USBD_GetDescriptor+0x342>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	88db      	ldrh	r3, [r3, #6]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d015      	beq.n	800a63a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	88da      	ldrh	r2, [r3, #6]
 800a612:	187b      	adds	r3, r7, r1
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	1c18      	adds	r0, r3, #0
 800a618:	1c11      	adds	r1, r2, #0
 800a61a:	b28a      	uxth	r2, r1
 800a61c:	b283      	uxth	r3, r0
 800a61e:	429a      	cmp	r2, r3
 800a620:	d900      	bls.n	800a624 <USBD_GetDescriptor+0x32c>
 800a622:	1c01      	adds	r1, r0, #0
 800a624:	b28a      	uxth	r2, r1
 800a626:	2108      	movs	r1, #8
 800a628:	187b      	adds	r3, r7, r1
 800a62a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a62c:	187b      	adds	r3, r7, r1
 800a62e:	881a      	ldrh	r2, [r3, #0]
 800a630:	68f9      	ldr	r1, [r7, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	0018      	movs	r0, r3
 800a636:	f000 fa70 	bl	800ab1a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	88db      	ldrh	r3, [r3, #6]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d105      	bne.n	800a64e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	0018      	movs	r0, r3
 800a646:	f000 fad2 	bl	800abee <USBD_CtlSendStatus>
 800a64a:	e000      	b.n	800a64e <USBD_GetDescriptor+0x356>
    return;
 800a64c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a64e:	46bd      	mov	sp, r7
 800a650:	b004      	add	sp, #16
 800a652:	bd80      	pop	{r7, pc}
 800a654:	0800c318 	.word	0x0800c318
 800a658:	0800c338 	.word	0x0800c338

0800a65c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a65c:	b590      	push	{r4, r7, lr}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	889b      	ldrh	r3, [r3, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d13d      	bne.n	800a6ea <USBD_SetAddress+0x8e>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	88db      	ldrh	r3, [r3, #6]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d139      	bne.n	800a6ea <USBD_SetAddress+0x8e>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	885b      	ldrh	r3, [r3, #2]
 800a67a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a67c:	d835      	bhi.n	800a6ea <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	885b      	ldrh	r3, [r3, #2]
 800a682:	b2da      	uxtb	r2, r3
 800a684:	230f      	movs	r3, #15
 800a686:	18fb      	adds	r3, r7, r3
 800a688:	217f      	movs	r1, #127	@ 0x7f
 800a68a:	400a      	ands	r2, r1
 800a68c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	23a7      	movs	r3, #167	@ 0xa7
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	5cd3      	ldrb	r3, [r2, r3]
 800a696:	2b03      	cmp	r3, #3
 800a698:	d106      	bne.n	800a6a8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	0011      	movs	r1, r2
 800a6a0:	0018      	movs	r0, r3
 800a6a2:	f000 f9bc 	bl	800aa1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a6:	e027      	b.n	800a6f8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	240f      	movs	r4, #15
 800a6ac:	193a      	adds	r2, r7, r4
 800a6ae:	4914      	ldr	r1, [pc, #80]	@ (800a700 <USBD_SetAddress+0xa4>)
 800a6b0:	7812      	ldrb	r2, [r2, #0]
 800a6b2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a6b4:	193b      	adds	r3, r7, r4
 800a6b6:	781a      	ldrb	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	0011      	movs	r1, r2
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f000 fefc 	bl	800b4ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	f000 fa92 	bl	800abee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a6ca:	193b      	adds	r3, r7, r4
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d005      	beq.n	800a6de <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	23a7      	movs	r3, #167	@ 0xa7
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	2102      	movs	r1, #2
 800a6da:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6dc:	e00c      	b.n	800a6f8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	23a7      	movs	r3, #167	@ 0xa7
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e8:	e006      	b.n	800a6f8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	0011      	movs	r1, r2
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f000 f994 	bl	800aa1e <USBD_CtlError>
  }
}
 800a6f6:	46c0      	nop			@ (mov r8, r8)
 800a6f8:	46c0      	nop			@ (mov r8, r8)
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	b005      	add	sp, #20
 800a6fe:	bd90      	pop	{r4, r7, pc}
 800a700:	0000029e 	.word	0x0000029e

0800a704 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	885b      	ldrh	r3, [r3, #2]
 800a712:	b2da      	uxtb	r2, r3
 800a714:	4b4c      	ldr	r3, [pc, #304]	@ (800a848 <USBD_SetConfig+0x144>)
 800a716:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a718:	4b4b      	ldr	r3, [pc, #300]	@ (800a848 <USBD_SetConfig+0x144>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d906      	bls.n	800a72e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	0011      	movs	r1, r2
 800a726:	0018      	movs	r0, r3
 800a728:	f000 f979 	bl	800aa1e <USBD_CtlError>
 800a72c:	e088      	b.n	800a840 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	23a7      	movs	r3, #167	@ 0xa7
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	5cd3      	ldrb	r3, [r2, r3]
 800a736:	2b02      	cmp	r3, #2
 800a738:	d002      	beq.n	800a740 <USBD_SetConfig+0x3c>
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d029      	beq.n	800a792 <USBD_SetConfig+0x8e>
 800a73e:	e071      	b.n	800a824 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a740:	4b41      	ldr	r3, [pc, #260]	@ (800a848 <USBD_SetConfig+0x144>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d01f      	beq.n	800a788 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800a748:	4b3f      	ldr	r3, [pc, #252]	@ (800a848 <USBD_SetConfig+0x144>)
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	001a      	movs	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	23a7      	movs	r3, #167	@ 0xa7
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	2103      	movs	r1, #3
 800a75a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a75c:	4b3a      	ldr	r3, [pc, #232]	@ (800a848 <USBD_SetConfig+0x144>)
 800a75e:	781a      	ldrb	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	0011      	movs	r1, r2
 800a764:	0018      	movs	r0, r3
 800a766:	f7ff f8c6 	bl	80098f6 <USBD_SetClassConfig>
 800a76a:	0003      	movs	r3, r0
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d106      	bne.n	800a77e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	0011      	movs	r1, r2
 800a776:	0018      	movs	r0, r3
 800a778:	f000 f951 	bl	800aa1e <USBD_CtlError>
            return;
 800a77c:	e060      	b.n	800a840 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	0018      	movs	r0, r3
 800a782:	f000 fa34 	bl	800abee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a786:	e05b      	b.n	800a840 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	0018      	movs	r0, r3
 800a78c:	f000 fa2f 	bl	800abee <USBD_CtlSendStatus>
        break;
 800a790:	e056      	b.n	800a840 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a792:	4b2d      	ldr	r3, [pc, #180]	@ (800a848 <USBD_SetConfig+0x144>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d115      	bne.n	800a7c6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	23a7      	movs	r3, #167	@ 0xa7
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	2102      	movs	r1, #2
 800a7a2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800a7a4:	4b28      	ldr	r3, [pc, #160]	@ (800a848 <USBD_SetConfig+0x144>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	001a      	movs	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a7ae:	4b26      	ldr	r3, [pc, #152]	@ (800a848 <USBD_SetConfig+0x144>)
 800a7b0:	781a      	ldrb	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	0011      	movs	r1, r2
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	f7ff f8c4 	bl	8009944 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	0018      	movs	r0, r3
 800a7c0:	f000 fa15 	bl	800abee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a7c4:	e03c      	b.n	800a840 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800a7c6:	4b20      	ldr	r3, [pc, #128]	@ (800a848 <USBD_SetConfig+0x144>)
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	001a      	movs	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d022      	beq.n	800a81a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	0011      	movs	r1, r2
 800a7de:	0018      	movs	r0, r3
 800a7e0:	f7ff f8b0 	bl	8009944 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a7e4:	4b18      	ldr	r3, [pc, #96]	@ (800a848 <USBD_SetConfig+0x144>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	001a      	movs	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a7ee:	4b16      	ldr	r3, [pc, #88]	@ (800a848 <USBD_SetConfig+0x144>)
 800a7f0:	781a      	ldrb	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	0011      	movs	r1, r2
 800a7f6:	0018      	movs	r0, r3
 800a7f8:	f7ff f87d 	bl	80098f6 <USBD_SetClassConfig>
 800a7fc:	0003      	movs	r3, r0
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d106      	bne.n	800a810 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	0011      	movs	r1, r2
 800a808:	0018      	movs	r0, r3
 800a80a:	f000 f908 	bl	800aa1e <USBD_CtlError>
            return;
 800a80e:	e017      	b.n	800a840 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	0018      	movs	r0, r3
 800a814:	f000 f9eb 	bl	800abee <USBD_CtlSendStatus>
        break;
 800a818:	e012      	b.n	800a840 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	0018      	movs	r0, r3
 800a81e:	f000 f9e6 	bl	800abee <USBD_CtlSendStatus>
        break;
 800a822:	e00d      	b.n	800a840 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	0011      	movs	r1, r2
 800a82a:	0018      	movs	r0, r3
 800a82c:	f000 f8f7 	bl	800aa1e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a830:	4b05      	ldr	r3, [pc, #20]	@ (800a848 <USBD_SetConfig+0x144>)
 800a832:	781a      	ldrb	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	0011      	movs	r1, r2
 800a838:	0018      	movs	r0, r3
 800a83a:	f7ff f883 	bl	8009944 <USBD_ClrClassConfig>
        break;
 800a83e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800a840:	46bd      	mov	sp, r7
 800a842:	b002      	add	sp, #8
 800a844:	bd80      	pop	{r7, pc}
 800a846:	46c0      	nop			@ (mov r8, r8)
 800a848:	200003f0 	.word	0x200003f0

0800a84c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	88db      	ldrh	r3, [r3, #6]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d006      	beq.n	800a86c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	0011      	movs	r1, r2
 800a864:	0018      	movs	r0, r3
 800a866:	f000 f8da 	bl	800aa1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a86a:	e026      	b.n	800a8ba <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	23a7      	movs	r3, #167	@ 0xa7
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	5cd3      	ldrb	r3, [r2, r3]
 800a874:	2b02      	cmp	r3, #2
 800a876:	dc02      	bgt.n	800a87e <USBD_GetConfig+0x32>
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dc03      	bgt.n	800a884 <USBD_GetConfig+0x38>
 800a87c:	e016      	b.n	800a8ac <USBD_GetConfig+0x60>
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d00c      	beq.n	800a89c <USBD_GetConfig+0x50>
 800a882:	e013      	b.n	800a8ac <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3308      	adds	r3, #8
 800a88e:	0019      	movs	r1, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	0018      	movs	r0, r3
 800a896:	f000 f940 	bl	800ab1a <USBD_CtlSendData>
        break;
 800a89a:	e00e      	b.n	800a8ba <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	1d19      	adds	r1, r3, #4
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	f000 f938 	bl	800ab1a <USBD_CtlSendData>
        break;
 800a8aa:	e006      	b.n	800a8ba <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	0011      	movs	r1, r2
 800a8b2:	0018      	movs	r0, r3
 800a8b4:	f000 f8b3 	bl	800aa1e <USBD_CtlError>
        break;
 800a8b8:	46c0      	nop			@ (mov r8, r8)
}
 800a8ba:	46c0      	nop			@ (mov r8, r8)
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	b002      	add	sp, #8
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	23a7      	movs	r3, #167	@ 0xa7
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	5cd3      	ldrb	r3, [r2, r3]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d822      	bhi.n	800a920 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	88db      	ldrh	r3, [r3, #6]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d006      	beq.n	800a8f0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	0011      	movs	r1, r2
 800a8e8:	0018      	movs	r0, r3
 800a8ea:	f000 f898 	bl	800aa1e <USBD_CtlError>
        break;
 800a8ee:	e01e      	b.n	800a92e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	23a9      	movs	r3, #169	@ 0xa9
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	58d3      	ldr	r3, [r2, r3]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d005      	beq.n	800a90e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	2202      	movs	r2, #2
 800a908:	431a      	orrs	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	330c      	adds	r3, #12
 800a912:	0019      	movs	r1, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2202      	movs	r2, #2
 800a918:	0018      	movs	r0, r3
 800a91a:	f000 f8fe 	bl	800ab1a <USBD_CtlSendData>
      break;
 800a91e:	e006      	b.n	800a92e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	0011      	movs	r1, r2
 800a926:	0018      	movs	r0, r3
 800a928:	f000 f879 	bl	800aa1e <USBD_CtlError>
      break;
 800a92c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a92e:	46c0      	nop			@ (mov r8, r8)
 800a930:	46bd      	mov	sp, r7
 800a932:	b002      	add	sp, #8
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	885b      	ldrh	r3, [r3, #2]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d108      	bne.n	800a95a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	23a9      	movs	r3, #169	@ 0xa9
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	2101      	movs	r1, #1
 800a950:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	0018      	movs	r0, r3
 800a956:	f000 f94a 	bl	800abee <USBD_CtlSendStatus>
  }
}
 800a95a:	46c0      	nop			@ (mov r8, r8)
 800a95c:	46bd      	mov	sp, r7
 800a95e:	b002      	add	sp, #8
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b082      	sub	sp, #8
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	23a7      	movs	r3, #167	@ 0xa7
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	5cd3      	ldrb	r3, [r2, r3]
 800a974:	3b01      	subs	r3, #1
 800a976:	2b02      	cmp	r3, #2
 800a978:	d80d      	bhi.n	800a996 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	885b      	ldrh	r3, [r3, #2]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d110      	bne.n	800a9a4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	23a9      	movs	r3, #169	@ 0xa9
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	2100      	movs	r1, #0
 800a98a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	0018      	movs	r0, r3
 800a990:	f000 f92d 	bl	800abee <USBD_CtlSendStatus>
      }
      break;
 800a994:	e006      	b.n	800a9a4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	0011      	movs	r1, r2
 800a99c:	0018      	movs	r0, r3
 800a99e:	f000 f83e 	bl	800aa1e <USBD_CtlError>
      break;
 800a9a2:	e000      	b.n	800a9a6 <USBD_ClrFeature+0x44>
      break;
 800a9a4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a9a6:	46c0      	nop			@ (mov r8, r8)
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	b002      	add	sp, #8
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	785a      	ldrb	r2, [r3, #1]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	3303      	adds	r3, #3
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	021b      	lsls	r3, r3, #8
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	18d3      	adds	r3, r2, r3
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	001a      	movs	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	3305      	adds	r3, #5
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	18d3      	adds	r3, r2, r3
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	3306      	adds	r3, #6
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	001a      	movs	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	3307      	adds	r3, #7
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	021b      	lsls	r3, r3, #8
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	18d3      	adds	r3, r2, r3
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	80da      	strh	r2, [r3, #6]

}
 800aa16:	46c0      	nop			@ (mov r8, r8)
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	b002      	add	sp, #8
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2180      	movs	r1, #128	@ 0x80
 800aa2c:	0018      	movs	r0, r3
 800aa2e:	f000 fcbe 	bl	800b3ae <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2100      	movs	r1, #0
 800aa36:	0018      	movs	r0, r3
 800aa38:	f000 fcb9 	bl	800b3ae <USBD_LL_StallEP>
}
 800aa3c:	46c0      	nop			@ (mov r8, r8)
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	b002      	add	sp, #8
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa44:	b590      	push	{r4, r7, lr}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa50:	2417      	movs	r4, #23
 800aa52:	193b      	adds	r3, r7, r4
 800aa54:	2200      	movs	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d03c      	beq.n	800aad8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	0018      	movs	r0, r3
 800aa62:	f000 f83d 	bl	800aae0 <USBD_GetLen>
 800aa66:	0003      	movs	r3, r0
 800aa68:	3301      	adds	r3, #1
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	18db      	adds	r3, r3, r3
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aa74:	193b      	adds	r3, r7, r4
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	193a      	adds	r2, r7, r4
 800aa7a:	1c59      	adds	r1, r3, #1
 800aa7c:	7011      	strb	r1, [r2, #0]
 800aa7e:	001a      	movs	r2, r3
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	189b      	adds	r3, r3, r2
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7812      	ldrb	r2, [r2, #0]
 800aa88:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aa8a:	193b      	adds	r3, r7, r4
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	193a      	adds	r2, r7, r4
 800aa90:	1c59      	adds	r1, r3, #1
 800aa92:	7011      	strb	r1, [r2, #0]
 800aa94:	001a      	movs	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	189b      	adds	r3, r3, r2
 800aa9a:	2203      	movs	r2, #3
 800aa9c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aa9e:	e017      	b.n	800aad0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	60fa      	str	r2, [r7, #12]
 800aaa6:	2417      	movs	r4, #23
 800aaa8:	193a      	adds	r2, r7, r4
 800aaaa:	7812      	ldrb	r2, [r2, #0]
 800aaac:	1939      	adds	r1, r7, r4
 800aaae:	1c50      	adds	r0, r2, #1
 800aab0:	7008      	strb	r0, [r1, #0]
 800aab2:	0011      	movs	r1, r2
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	1852      	adds	r2, r2, r1
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aabc:	193b      	adds	r3, r7, r4
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	193a      	adds	r2, r7, r4
 800aac2:	1c59      	adds	r1, r3, #1
 800aac4:	7011      	strb	r1, [r2, #0]
 800aac6:	001a      	movs	r2, r3
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	189b      	adds	r3, r3, r2
 800aacc:	2200      	movs	r2, #0
 800aace:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1e3      	bne.n	800aaa0 <USBD_GetString+0x5c>
    }
  }
}
 800aad8:	46c0      	nop			@ (mov r8, r8)
 800aada:	46bd      	mov	sp, r7
 800aadc:	b007      	add	sp, #28
 800aade:	bd90      	pop	{r4, r7, pc}

0800aae0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aae8:	230f      	movs	r3, #15
 800aaea:	18fb      	adds	r3, r7, r3
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800aaf0:	e008      	b.n	800ab04 <USBD_GetLen+0x24>
  {
    len++;
 800aaf2:	210f      	movs	r1, #15
 800aaf4:	187b      	adds	r3, r7, r1
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	187b      	adds	r3, r7, r1
 800aafa:	3201      	adds	r2, #1
 800aafc:	701a      	strb	r2, [r3, #0]
    buf++;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3301      	adds	r3, #1
 800ab02:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1f2      	bne.n	800aaf2 <USBD_GetLen+0x12>
  }

  return len;
 800ab0c:	230f      	movs	r3, #15
 800ab0e:	18fb      	adds	r3, r7, r3
 800ab10:	781b      	ldrb	r3, [r3, #0]
}
 800ab12:	0018      	movs	r0, r3
 800ab14:	46bd      	mov	sp, r7
 800ab16:	b004      	add	sp, #16
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	1dbb      	adds	r3, r7, #6
 800ab26:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	23a5      	movs	r3, #165	@ 0xa5
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	2102      	movs	r1, #2
 800ab30:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800ab32:	1dbb      	adds	r3, r7, #6
 800ab34:	881a      	ldrh	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ab3a:	1dbb      	adds	r3, r7, #6
 800ab3c:	881a      	ldrh	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab42:	1dbb      	adds	r3, r7, #6
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	f000 fce0 	bl	800b510 <USBD_LL_Transmit>

  return USBD_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	0018      	movs	r0, r3
 800ab54:	46bd      	mov	sp, r7
 800ab56:	b004      	add	sp, #16
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	1dbb      	adds	r3, r7, #6
 800ab66:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab68:	1dbb      	adds	r3, r7, #6
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	2100      	movs	r1, #0
 800ab72:	f000 fccd 	bl	800b510 <USBD_LL_Transmit>

  return USBD_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	0018      	movs	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b004      	add	sp, #16
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	1dbb      	adds	r3, r7, #6
 800ab8c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	23a5      	movs	r3, #165	@ 0xa5
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	2103      	movs	r1, #3
 800ab96:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800ab98:	1dbb      	adds	r3, r7, #6
 800ab9a:	8819      	ldrh	r1, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	23ae      	movs	r3, #174	@ 0xae
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800aba4:	1dbb      	adds	r3, r7, #6
 800aba6:	8819      	ldrh	r1, [r3, #0]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	23b0      	movs	r3, #176	@ 0xb0
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abb0:	1dbb      	adds	r3, r7, #6
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	2100      	movs	r1, #0
 800abba:	f000 fce0 	bl	800b57e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	0018      	movs	r0, r3
 800abc2:	46bd      	mov	sp, r7
 800abc4:	b004      	add	sp, #16
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	1dbb      	adds	r3, r7, #6
 800abd4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abd6:	1dbb      	adds	r3, r7, #6
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	2100      	movs	r1, #0
 800abe0:	f000 fccd 	bl	800b57e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	0018      	movs	r0, r3
 800abe8:	46bd      	mov	sp, r7
 800abea:	b004      	add	sp, #16
 800abec:	bd80      	pop	{r7, pc}

0800abee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	23a5      	movs	r3, #165	@ 0xa5
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	2104      	movs	r1, #4
 800abfe:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	2300      	movs	r3, #0
 800ac04:	2200      	movs	r2, #0
 800ac06:	2100      	movs	r1, #0
 800ac08:	f000 fc82 	bl	800b510 <USBD_LL_Transmit>

  return USBD_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	0018      	movs	r0, r3
 800ac10:	46bd      	mov	sp, r7
 800ac12:	b002      	add	sp, #8
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	23a5      	movs	r3, #165	@ 0xa5
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	2105      	movs	r1, #5
 800ac26:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2100      	movs	r1, #0
 800ac30:	f000 fca5 	bl	800b57e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	0018      	movs	r0, r3
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	b002      	add	sp, #8
 800ac3c:	bd80      	pop	{r7, pc}
	...

0800ac40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac44:	4914      	ldr	r1, [pc, #80]	@ (800ac98 <MX_USB_DEVICE_Init+0x58>)
 800ac46:	4b15      	ldr	r3, [pc, #84]	@ (800ac9c <MX_USB_DEVICE_Init+0x5c>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f7fe fdec 	bl	8009828 <USBD_Init>
 800ac50:	1e03      	subs	r3, r0, #0
 800ac52:	d001      	beq.n	800ac58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac54:	f7f5 ff72 	bl	8000b3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac58:	4a11      	ldr	r2, [pc, #68]	@ (800aca0 <MX_USB_DEVICE_Init+0x60>)
 800ac5a:	4b10      	ldr	r3, [pc, #64]	@ (800ac9c <MX_USB_DEVICE_Init+0x5c>)
 800ac5c:	0011      	movs	r1, r2
 800ac5e:	0018      	movs	r0, r3
 800ac60:	f7fe fe13 	bl	800988a <USBD_RegisterClass>
 800ac64:	1e03      	subs	r3, r0, #0
 800ac66:	d001      	beq.n	800ac6c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800ac68:	f7f5 ff68 	bl	8000b3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac6c:	4a0d      	ldr	r2, [pc, #52]	@ (800aca4 <MX_USB_DEVICE_Init+0x64>)
 800ac6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ac9c <MX_USB_DEVICE_Init+0x5c>)
 800ac70:	0011      	movs	r1, r2
 800ac72:	0018      	movs	r0, r3
 800ac74:	f7fe fd28 	bl	80096c8 <USBD_CDC_RegisterInterface>
 800ac78:	1e03      	subs	r3, r0, #0
 800ac7a:	d001      	beq.n	800ac80 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800ac7c:	f7f5 ff5e 	bl	8000b3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac80:	4b06      	ldr	r3, [pc, #24]	@ (800ac9c <MX_USB_DEVICE_Init+0x5c>)
 800ac82:	0018      	movs	r0, r3
 800ac84:	f7fe fe21 	bl	80098ca <USBD_Start>
 800ac88:	1e03      	subs	r3, r0, #0
 800ac8a:	d001      	beq.n	800ac90 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800ac8c:	f7f5 ff56 	bl	8000b3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac90:	46c0      	nop			@ (mov r8, r8)
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	46c0      	nop			@ (mov r8, r8)
 800ac98:	20000144 	.word	0x20000144
 800ac9c:	200003f4 	.word	0x200003f4
 800aca0:	20000030 	.word	0x20000030
 800aca4:	20000134 	.word	0x20000134

0800aca8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800acac:	4907      	ldr	r1, [pc, #28]	@ (800accc <CDC_Init_FS+0x24>)
 800acae:	4b08      	ldr	r3, [pc, #32]	@ (800acd0 <CDC_Init_FS+0x28>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	0018      	movs	r0, r3
 800acb4:	f7fe fd23 	bl	80096fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800acb8:	4a06      	ldr	r2, [pc, #24]	@ (800acd4 <CDC_Init_FS+0x2c>)
 800acba:	4b05      	ldr	r3, [pc, #20]	@ (800acd0 <CDC_Init_FS+0x28>)
 800acbc:	0011      	movs	r1, r2
 800acbe:	0018      	movs	r0, r3
 800acc0:	f7fe fd39 	bl	8009736 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acc4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800acc6:	0018      	movs	r0, r3
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000ab8 	.word	0x20000ab8
 800acd0:	200003f4 	.word	0x200003f4
 800acd4:	200006b8 	.word	0x200006b8

0800acd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800acdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800acde:	0018      	movs	r0, r3
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6039      	str	r1, [r7, #0]
 800acec:	0011      	movs	r1, r2
 800acee:	1dfb      	adds	r3, r7, #7
 800acf0:	1c02      	adds	r2, r0, #0
 800acf2:	701a      	strb	r2, [r3, #0]
 800acf4:	1d3b      	adds	r3, r7, #4
 800acf6:	1c0a      	adds	r2, r1, #0
 800acf8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800acfa:	1dfb      	adds	r3, r7, #7
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b23      	cmp	r3, #35	@ 0x23
 800ad00:	d804      	bhi.n	800ad0c <CDC_Control_FS+0x28>
 800ad02:	009a      	lsls	r2, r3, #2
 800ad04:	4b04      	ldr	r3, [pc, #16]	@ (800ad18 <CDC_Control_FS+0x34>)
 800ad06:	18d3      	adds	r3, r2, r3
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad0c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800ad0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad10:	0018      	movs	r0, r3
 800ad12:	46bd      	mov	sp, r7
 800ad14:	b002      	add	sp, #8
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	0800c350 	.word	0x0800c350

0800ad1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4b06      	ldr	r3, [pc, #24]	@ (800ad44 <CDC_Receive_FS+0x28>)
 800ad2a:	0011      	movs	r1, r2
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	f7fe fd02 	bl	8009736 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ad32:	4b04      	ldr	r3, [pc, #16]	@ (800ad44 <CDC_Receive_FS+0x28>)
 800ad34:	0018      	movs	r0, r3
 800ad36:	f7fe fd49 	bl	80097cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ad3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ad3c:	0018      	movs	r0, r3
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	b002      	add	sp, #8
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	200003f4 	.word	0x200003f4

0800ad48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ad48:	b5b0      	push	{r4, r5, r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	000a      	movs	r2, r1
 800ad52:	1cbb      	adds	r3, r7, #2
 800ad54:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800ad56:	230f      	movs	r3, #15
 800ad58:	18fb      	adds	r3, r7, r3
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ad5e:	4a11      	ldr	r2, [pc, #68]	@ (800ada4 <CDC_Transmit_FS+0x5c>)
 800ad60:	23ae      	movs	r3, #174	@ 0xae
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	58d3      	ldr	r3, [r2, r3]
 800ad66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	2385      	movs	r3, #133	@ 0x85
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	58d3      	ldr	r3, [r2, r3]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e010      	b.n	800ad9a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ad78:	1cbb      	adds	r3, r7, #2
 800ad7a:	881a      	ldrh	r2, [r3, #0]
 800ad7c:	6879      	ldr	r1, [r7, #4]
 800ad7e:	4b09      	ldr	r3, [pc, #36]	@ (800ada4 <CDC_Transmit_FS+0x5c>)
 800ad80:	0018      	movs	r0, r3
 800ad82:	f7fe fcbc 	bl	80096fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ad86:	250f      	movs	r5, #15
 800ad88:	197c      	adds	r4, r7, r5
 800ad8a:	4b06      	ldr	r3, [pc, #24]	@ (800ada4 <CDC_Transmit_FS+0x5c>)
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f7fe fce6 	bl	800975e <USBD_CDC_TransmitPacket>
 800ad92:	0003      	movs	r3, r0
 800ad94:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800ad96:	197b      	adds	r3, r7, r5
 800ad98:	781b      	ldrb	r3, [r3, #0]
}
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b004      	add	sp, #16
 800ada0:	bdb0      	pop	{r4, r5, r7, pc}
 800ada2:	46c0      	nop			@ (mov r8, r8)
 800ada4:	200003f4 	.word	0x200003f4

0800ada8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	0002      	movs	r2, r0
 800adb0:	6039      	str	r1, [r7, #0]
 800adb2:	1dfb      	adds	r3, r7, #7
 800adb4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2212      	movs	r2, #18
 800adba:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800adbc:	4b02      	ldr	r3, [pc, #8]	@ (800adc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800adbe:	0018      	movs	r0, r3
 800adc0:	46bd      	mov	sp, r7
 800adc2:	b002      	add	sp, #8
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	46c0      	nop			@ (mov r8, r8)
 800adc8:	20000160 	.word	0x20000160

0800adcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	0002      	movs	r2, r0
 800add4:	6039      	str	r1, [r7, #0]
 800add6:	1dfb      	adds	r3, r7, #7
 800add8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	2204      	movs	r2, #4
 800adde:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ade0:	4b02      	ldr	r3, [pc, #8]	@ (800adec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ade2:	0018      	movs	r0, r3
 800ade4:	46bd      	mov	sp, r7
 800ade6:	b002      	add	sp, #8
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	46c0      	nop			@ (mov r8, r8)
 800adec:	20000174 	.word	0x20000174

0800adf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	0002      	movs	r2, r0
 800adf8:	6039      	str	r1, [r7, #0]
 800adfa:	1dfb      	adds	r3, r7, #7
 800adfc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800adfe:	1dfb      	adds	r3, r7, #7
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d106      	bne.n	800ae14 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	4908      	ldr	r1, [pc, #32]	@ (800ae2c <USBD_FS_ProductStrDescriptor+0x3c>)
 800ae0a:	4b09      	ldr	r3, [pc, #36]	@ (800ae30 <USBD_FS_ProductStrDescriptor+0x40>)
 800ae0c:	0018      	movs	r0, r3
 800ae0e:	f7ff fe19 	bl	800aa44 <USBD_GetString>
 800ae12:	e005      	b.n	800ae20 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	4905      	ldr	r1, [pc, #20]	@ (800ae2c <USBD_FS_ProductStrDescriptor+0x3c>)
 800ae18:	4b05      	ldr	r3, [pc, #20]	@ (800ae30 <USBD_FS_ProductStrDescriptor+0x40>)
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	f7ff fe12 	bl	800aa44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae20:	4b02      	ldr	r3, [pc, #8]	@ (800ae2c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800ae22:	0018      	movs	r0, r3
 800ae24:	46bd      	mov	sp, r7
 800ae26:	b002      	add	sp, #8
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	46c0      	nop			@ (mov r8, r8)
 800ae2c:	20000eb8 	.word	0x20000eb8
 800ae30:	0800c28c 	.word	0x0800c28c

0800ae34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	0002      	movs	r2, r0
 800ae3c:	6039      	str	r1, [r7, #0]
 800ae3e:	1dfb      	adds	r3, r7, #7
 800ae40:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	4904      	ldr	r1, [pc, #16]	@ (800ae58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ae46:	4b05      	ldr	r3, [pc, #20]	@ (800ae5c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800ae48:	0018      	movs	r0, r3
 800ae4a:	f7ff fdfb 	bl	800aa44 <USBD_GetString>
  return USBD_StrDesc;
 800ae4e:	4b02      	ldr	r3, [pc, #8]	@ (800ae58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800ae50:	0018      	movs	r0, r3
 800ae52:	46bd      	mov	sp, r7
 800ae54:	b002      	add	sp, #8
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	20000eb8 	.word	0x20000eb8
 800ae5c:	0800c29c 	.word	0x0800c29c

0800ae60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	0002      	movs	r2, r0
 800ae68:	6039      	str	r1, [r7, #0]
 800ae6a:	1dfb      	adds	r3, r7, #7
 800ae6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	221a      	movs	r2, #26
 800ae72:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae74:	f000 f84c 	bl	800af10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ae78:	4b02      	ldr	r3, [pc, #8]	@ (800ae84 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	b002      	add	sp, #8
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	46c0      	nop			@ (mov r8, r8)
 800ae84:	20000178 	.word	0x20000178

0800ae88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	0002      	movs	r2, r0
 800ae90:	6039      	str	r1, [r7, #0]
 800ae92:	1dfb      	adds	r3, r7, #7
 800ae94:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800ae96:	1dfb      	adds	r3, r7, #7
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d106      	bne.n	800aeac <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	4908      	ldr	r1, [pc, #32]	@ (800aec4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800aea2:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800aea4:	0018      	movs	r0, r3
 800aea6:	f7ff fdcd 	bl	800aa44 <USBD_GetString>
 800aeaa:	e005      	b.n	800aeb8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	4905      	ldr	r1, [pc, #20]	@ (800aec4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800aeb0:	4b05      	ldr	r3, [pc, #20]	@ (800aec8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800aeb2:	0018      	movs	r0, r3
 800aeb4:	f7ff fdc6 	bl	800aa44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aeb8:	4b02      	ldr	r3, [pc, #8]	@ (800aec4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800aeba:	0018      	movs	r0, r3
 800aebc:	46bd      	mov	sp, r7
 800aebe:	b002      	add	sp, #8
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	46c0      	nop			@ (mov r8, r8)
 800aec4:	20000eb8 	.word	0x20000eb8
 800aec8:	0800c2a4 	.word	0x0800c2a4

0800aecc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	0002      	movs	r2, r0
 800aed4:	6039      	str	r1, [r7, #0]
 800aed6:	1dfb      	adds	r3, r7, #7
 800aed8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800aeda:	1dfb      	adds	r3, r7, #7
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d106      	bne.n	800aef0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	4908      	ldr	r1, [pc, #32]	@ (800af08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800aee6:	4b09      	ldr	r3, [pc, #36]	@ (800af0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800aee8:	0018      	movs	r0, r3
 800aeea:	f7ff fdab 	bl	800aa44 <USBD_GetString>
 800aeee:	e005      	b.n	800aefc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	4905      	ldr	r1, [pc, #20]	@ (800af08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800aef4:	4b05      	ldr	r3, [pc, #20]	@ (800af0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800aef6:	0018      	movs	r0, r3
 800aef8:	f7ff fda4 	bl	800aa44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aefc:	4b02      	ldr	r3, [pc, #8]	@ (800af08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800aefe:	0018      	movs	r0, r3
 800af00:	46bd      	mov	sp, r7
 800af02:	b002      	add	sp, #8
 800af04:	bd80      	pop	{r7, pc}
 800af06:	46c0      	nop			@ (mov r8, r8)
 800af08:	20000eb8 	.word	0x20000eb8
 800af0c:	0800c2b0 	.word	0x0800c2b0

0800af10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af16:	4b10      	ldr	r3, [pc, #64]	@ (800af58 <Get_SerialNum+0x48>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af1c:	4b0f      	ldr	r3, [pc, #60]	@ (800af5c <Get_SerialNum+0x4c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af22:	4b0f      	ldr	r3, [pc, #60]	@ (800af60 <Get_SerialNum+0x50>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	18d3      	adds	r3, r2, r3
 800af2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00b      	beq.n	800af4e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af36:	490b      	ldr	r1, [pc, #44]	@ (800af64 <Get_SerialNum+0x54>)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2208      	movs	r2, #8
 800af3c:	0018      	movs	r0, r3
 800af3e:	f000 f815 	bl	800af6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af42:	4909      	ldr	r1, [pc, #36]	@ (800af68 <Get_SerialNum+0x58>)
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2204      	movs	r2, #4
 800af48:	0018      	movs	r0, r3
 800af4a:	f000 f80f 	bl	800af6c <IntToUnicode>
  }
}
 800af4e:	46c0      	nop			@ (mov r8, r8)
 800af50:	46bd      	mov	sp, r7
 800af52:	b004      	add	sp, #16
 800af54:	bd80      	pop	{r7, pc}
 800af56:	46c0      	nop			@ (mov r8, r8)
 800af58:	1ffff7ac 	.word	0x1ffff7ac
 800af5c:	1ffff7b0 	.word	0x1ffff7b0
 800af60:	1ffff7b4 	.word	0x1ffff7b4
 800af64:	2000017a 	.word	0x2000017a
 800af68:	2000018a 	.word	0x2000018a

0800af6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	1dfb      	adds	r3, r7, #7
 800af78:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800af7a:	2117      	movs	r1, #23
 800af7c:	187b      	adds	r3, r7, r1
 800af7e:	2200      	movs	r2, #0
 800af80:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800af82:	187b      	adds	r3, r7, r1
 800af84:	2200      	movs	r2, #0
 800af86:	701a      	strb	r2, [r3, #0]
 800af88:	e02f      	b.n	800afea <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	0f1b      	lsrs	r3, r3, #28
 800af8e:	2b09      	cmp	r3, #9
 800af90:	d80d      	bhi.n	800afae <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	0f1b      	lsrs	r3, r3, #28
 800af96:	b2da      	uxtb	r2, r3
 800af98:	2317      	movs	r3, #23
 800af9a:	18fb      	adds	r3, r7, r3
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	0019      	movs	r1, r3
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	185b      	adds	r3, r3, r1
 800afa6:	3230      	adds	r2, #48	@ 0x30
 800afa8:	b2d2      	uxtb	r2, r2
 800afaa:	701a      	strb	r2, [r3, #0]
 800afac:	e00c      	b.n	800afc8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	0f1b      	lsrs	r3, r3, #28
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	2317      	movs	r3, #23
 800afb6:	18fb      	adds	r3, r7, r3
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	0019      	movs	r1, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	185b      	adds	r3, r3, r1
 800afc2:	3237      	adds	r2, #55	@ 0x37
 800afc4:	b2d2      	uxtb	r2, r2
 800afc6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800afce:	2117      	movs	r1, #23
 800afd0:	187b      	adds	r3, r7, r1
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	3301      	adds	r3, #1
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	18d3      	adds	r3, r2, r3
 800afdc:	2200      	movs	r2, #0
 800afde:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800afe0:	187b      	adds	r3, r7, r1
 800afe2:	781a      	ldrb	r2, [r3, #0]
 800afe4:	187b      	adds	r3, r7, r1
 800afe6:	3201      	adds	r2, #1
 800afe8:	701a      	strb	r2, [r3, #0]
 800afea:	2317      	movs	r3, #23
 800afec:	18fa      	adds	r2, r7, r3
 800afee:	1dfb      	adds	r3, r7, #7
 800aff0:	7812      	ldrb	r2, [r2, #0]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d3c8      	bcc.n	800af8a <IntToUnicode+0x1e>
  }
}
 800aff8:	46c0      	nop			@ (mov r8, r8)
 800affa:	46c0      	nop			@ (mov r8, r8)
 800affc:	46bd      	mov	sp, r7
 800affe:	b006      	add	sp, #24
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a0e      	ldr	r2, [pc, #56]	@ (800b04c <HAL_PCD_MspInit+0x48>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d115      	bne.n	800b042 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b016:	4b0e      	ldr	r3, [pc, #56]	@ (800b050 <HAL_PCD_MspInit+0x4c>)
 800b018:	69da      	ldr	r2, [r3, #28]
 800b01a:	4b0d      	ldr	r3, [pc, #52]	@ (800b050 <HAL_PCD_MspInit+0x4c>)
 800b01c:	2180      	movs	r1, #128	@ 0x80
 800b01e:	0409      	lsls	r1, r1, #16
 800b020:	430a      	orrs	r2, r1
 800b022:	61da      	str	r2, [r3, #28]
 800b024:	4b0a      	ldr	r3, [pc, #40]	@ (800b050 <HAL_PCD_MspInit+0x4c>)
 800b026:	69da      	ldr	r2, [r3, #28]
 800b028:	2380      	movs	r3, #128	@ 0x80
 800b02a:	041b      	lsls	r3, r3, #16
 800b02c:	4013      	ands	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b032:	2200      	movs	r2, #0
 800b034:	2100      	movs	r1, #0
 800b036:	201f      	movs	r0, #31
 800b038:	f7f7 fe96 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b03c:	201f      	movs	r0, #31
 800b03e:	f7f7 feb3 	bl	8002da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b042:	46c0      	nop			@ (mov r8, r8)
 800b044:	46bd      	mov	sp, r7
 800b046:	b004      	add	sp, #16
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	46c0      	nop			@ (mov r8, r8)
 800b04c:	40005c00 	.word	0x40005c00
 800b050:	40021000 	.word	0x40021000

0800b054 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	23b6      	movs	r3, #182	@ 0xb6
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	58d2      	ldr	r2, [r2, r3]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	21a6      	movs	r1, #166	@ 0xa6
 800b068:	0089      	lsls	r1, r1, #2
 800b06a:	468c      	mov	ip, r1
 800b06c:	4463      	add	r3, ip
 800b06e:	0019      	movs	r1, r3
 800b070:	0010      	movs	r0, r2
 800b072:	f7fe fc7d 	bl	8009970 <USBD_LL_SetupStage>
}
 800b076:	46c0      	nop			@ (mov r8, r8)
 800b078:	46bd      	mov	sp, r7
 800b07a:	b002      	add	sp, #8
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b07e:	b590      	push	{r4, r7, lr}
 800b080:	b083      	sub	sp, #12
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	000a      	movs	r2, r1
 800b088:	1cfb      	adds	r3, r7, #3
 800b08a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	23b6      	movs	r3, #182	@ 0xb6
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	58d4      	ldr	r4, [r2, r3]
 800b094:	1cfb      	adds	r3, r7, #3
 800b096:	781a      	ldrb	r2, [r3, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	23b2      	movs	r3, #178	@ 0xb2
 800b09c:	0059      	lsls	r1, r3, #1
 800b09e:	0013      	movs	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	189b      	adds	r3, r3, r2
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	18c3      	adds	r3, r0, r3
 800b0a8:	185b      	adds	r3, r3, r1
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	1cfb      	adds	r3, r7, #3
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	0019      	movs	r1, r3
 800b0b2:	0020      	movs	r0, r4
 800b0b4:	f7fe fcba 	bl	8009a2c <USBD_LL_DataOutStage>
}
 800b0b8:	46c0      	nop			@ (mov r8, r8)
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	b003      	add	sp, #12
 800b0be:	bd90      	pop	{r4, r7, pc}

0800b0c0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	000a      	movs	r2, r1
 800b0ca:	1cfb      	adds	r3, r7, #3
 800b0cc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	23b6      	movs	r3, #182	@ 0xb6
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	58d0      	ldr	r0, [r2, r3]
 800b0d6:	1cfb      	adds	r3, r7, #3
 800b0d8:	781a      	ldrb	r2, [r3, #0]
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	0013      	movs	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	189b      	adds	r3, r3, r2
 800b0e2:	00db      	lsls	r3, r3, #3
 800b0e4:	18cb      	adds	r3, r1, r3
 800b0e6:	3324      	adds	r3, #36	@ 0x24
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	1cfb      	adds	r3, r7, #3
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	0019      	movs	r1, r3
 800b0f0:	f7fe fd1e 	bl	8009b30 <USBD_LL_DataInStage>
}
 800b0f4:	46c0      	nop			@ (mov r8, r8)
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	b002      	add	sp, #8
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	23b6      	movs	r3, #182	@ 0xb6
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	58d3      	ldr	r3, [r2, r3]
 800b10c:	0018      	movs	r0, r3
 800b10e:	f7fe fe55 	bl	8009dbc <USBD_LL_SOF>
}
 800b112:	46c0      	nop			@ (mov r8, r8)
 800b114:	46bd      	mov	sp, r7
 800b116:	b002      	add	sp, #8
 800b118:	bd80      	pop	{r7, pc}

0800b11a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b122:	230f      	movs	r3, #15
 800b124:	18fb      	adds	r3, r7, r3
 800b126:	2201      	movs	r2, #1
 800b128:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	795b      	ldrb	r3, [r3, #5]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d001      	beq.n	800b136 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b132:	f7f5 fd03 	bl	8000b3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	23b6      	movs	r3, #182	@ 0xb6
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	58d2      	ldr	r2, [r2, r3]
 800b13e:	230f      	movs	r3, #15
 800b140:	18fb      	adds	r3, r7, r3
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	0019      	movs	r1, r3
 800b146:	0010      	movs	r0, r2
 800b148:	f7fe fdf7 	bl	8009d3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	23b6      	movs	r3, #182	@ 0xb6
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	58d3      	ldr	r3, [r2, r3]
 800b154:	0018      	movs	r0, r3
 800b156:	f7fe fda8 	bl	8009caa <USBD_LL_Reset>
}
 800b15a:	46c0      	nop			@ (mov r8, r8)
 800b15c:	46bd      	mov	sp, r7
 800b15e:	b004      	add	sp, #16
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	23b6      	movs	r3, #182	@ 0xb6
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	58d3      	ldr	r3, [r2, r3]
 800b174:	0018      	movs	r0, r3
 800b176:	f7fe fdf1 	bl	8009d5c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	7a5b      	ldrb	r3, [r3, #9]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d005      	beq.n	800b18e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b182:	4b05      	ldr	r3, [pc, #20]	@ (800b198 <HAL_PCD_SuspendCallback+0x34>)
 800b184:	691a      	ldr	r2, [r3, #16]
 800b186:	4b04      	ldr	r3, [pc, #16]	@ (800b198 <HAL_PCD_SuspendCallback+0x34>)
 800b188:	2106      	movs	r1, #6
 800b18a:	430a      	orrs	r2, r1
 800b18c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b18e:	46c0      	nop			@ (mov r8, r8)
 800b190:	46bd      	mov	sp, r7
 800b192:	b002      	add	sp, #8
 800b194:	bd80      	pop	{r7, pc}
 800b196:	46c0      	nop			@ (mov r8, r8)
 800b198:	e000ed00 	.word	0xe000ed00

0800b19c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7a5b      	ldrb	r3, [r3, #9]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1ac:	4b09      	ldr	r3, [pc, #36]	@ (800b1d4 <HAL_PCD_ResumeCallback+0x38>)
 800b1ae:	691a      	ldr	r2, [r3, #16]
 800b1b0:	4b08      	ldr	r3, [pc, #32]	@ (800b1d4 <HAL_PCD_ResumeCallback+0x38>)
 800b1b2:	2106      	movs	r1, #6
 800b1b4:	438a      	bics	r2, r1
 800b1b6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b1b8:	f000 fa42 	bl	800b640 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	23b6      	movs	r3, #182	@ 0xb6
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	58d3      	ldr	r3, [r2, r3]
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	f7fe fde1 	bl	8009d8c <USBD_LL_Resume>
}
 800b1ca:	46c0      	nop			@ (mov r8, r8)
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	b002      	add	sp, #8
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	46c0      	nop			@ (mov r8, r8)
 800b1d4:	e000ed00 	.word	0xe000ed00

0800b1d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b1e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b1e2:	23b6      	movs	r3, #182	@ 0xb6
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	23b0      	movs	r3, #176	@ 0xb0
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4929      	ldr	r1, [pc, #164]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b1f2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b1f4:	4b28      	ldr	r3, [pc, #160]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b1f6:	4a29      	ldr	r2, [pc, #164]	@ (800b29c <USBD_LL_Init+0xc4>)
 800b1f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b1fa:	4b27      	ldr	r3, [pc, #156]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b1fc:	2208      	movs	r2, #8
 800b1fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b200:	4b25      	ldr	r3, [pc, #148]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b202:	2202      	movs	r2, #2
 800b204:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b206:	4b24      	ldr	r3, [pc, #144]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b208:	2202      	movs	r2, #2
 800b20a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b20c:	4b22      	ldr	r3, [pc, #136]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b20e:	2200      	movs	r2, #0
 800b210:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b212:	4b21      	ldr	r3, [pc, #132]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b214:	2200      	movs	r2, #0
 800b216:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b218:	4b1f      	ldr	r3, [pc, #124]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b21e:	4b1e      	ldr	r3, [pc, #120]	@ (800b298 <USBD_LL_Init+0xc0>)
 800b220:	0018      	movs	r0, r3
 800b222:	f7f8 f891 	bl	8003348 <HAL_PCD_Init>
 800b226:	1e03      	subs	r3, r0, #0
 800b228:	d001      	beq.n	800b22e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b22a:	f7f5 fc87 	bl	8000b3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	23b0      	movs	r3, #176	@ 0xb0
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	58d0      	ldr	r0, [r2, r3]
 800b236:	2318      	movs	r3, #24
 800b238:	2200      	movs	r2, #0
 800b23a:	2100      	movs	r1, #0
 800b23c:	f7f9 fe50 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	23b0      	movs	r3, #176	@ 0xb0
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	58d0      	ldr	r0, [r2, r3]
 800b248:	2358      	movs	r3, #88	@ 0x58
 800b24a:	2200      	movs	r2, #0
 800b24c:	2180      	movs	r1, #128	@ 0x80
 800b24e:	f7f9 fe47 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	23b0      	movs	r3, #176	@ 0xb0
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	58d0      	ldr	r0, [r2, r3]
 800b25a:	23c0      	movs	r3, #192	@ 0xc0
 800b25c:	2200      	movs	r2, #0
 800b25e:	2181      	movs	r1, #129	@ 0x81
 800b260:	f7f9 fe3e 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	23b0      	movs	r3, #176	@ 0xb0
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	58d0      	ldr	r0, [r2, r3]
 800b26c:	2388      	movs	r3, #136	@ 0x88
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	2200      	movs	r2, #0
 800b272:	2101      	movs	r1, #1
 800b274:	f7f9 fe34 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	23b0      	movs	r3, #176	@ 0xb0
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	58d0      	ldr	r0, [r2, r3]
 800b280:	2380      	movs	r3, #128	@ 0x80
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	2200      	movs	r2, #0
 800b286:	2182      	movs	r1, #130	@ 0x82
 800b288:	f7f9 fe2a 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	0018      	movs	r0, r3
 800b290:	46bd      	mov	sp, r7
 800b292:	b002      	add	sp, #8
 800b294:	bd80      	pop	{r7, pc}
 800b296:	46c0      	nop			@ (mov r8, r8)
 800b298:	200010b8 	.word	0x200010b8
 800b29c:	40005c00 	.word	0x40005c00

0800b2a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a8:	210f      	movs	r1, #15
 800b2aa:	187b      	adds	r3, r7, r1
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2b0:	260e      	movs	r6, #14
 800b2b2:	19bb      	adds	r3, r7, r6
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	23b0      	movs	r3, #176	@ 0xb0
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	58d3      	ldr	r3, [r2, r3]
 800b2c0:	000d      	movs	r5, r1
 800b2c2:	187c      	adds	r4, r7, r1
 800b2c4:	0018      	movs	r0, r3
 800b2c6:	f7f8 f941 	bl	800354c <HAL_PCD_Start>
 800b2ca:	0003      	movs	r3, r0
 800b2cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ce:	19bc      	adds	r4, r7, r6
 800b2d0:	197b      	adds	r3, r7, r5
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	0018      	movs	r0, r3
 800b2d6:	f000 f9ba 	bl	800b64e <USBD_Get_USB_Status>
 800b2da:	0003      	movs	r3, r0
 800b2dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b2de:	19bb      	adds	r3, r7, r6
 800b2e0:	781b      	ldrb	r3, [r3, #0]
}
 800b2e2:	0018      	movs	r0, r3
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	b005      	add	sp, #20
 800b2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b2ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ec:	b085      	sub	sp, #20
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	000c      	movs	r4, r1
 800b2f4:	0010      	movs	r0, r2
 800b2f6:	0019      	movs	r1, r3
 800b2f8:	1cfb      	adds	r3, r7, #3
 800b2fa:	1c22      	adds	r2, r4, #0
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	1cbb      	adds	r3, r7, #2
 800b300:	1c02      	adds	r2, r0, #0
 800b302:	701a      	strb	r2, [r3, #0]
 800b304:	003b      	movs	r3, r7
 800b306:	1c0a      	adds	r2, r1, #0
 800b308:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b30a:	260f      	movs	r6, #15
 800b30c:	19bb      	adds	r3, r7, r6
 800b30e:	2200      	movs	r2, #0
 800b310:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b312:	250e      	movs	r5, #14
 800b314:	197b      	adds	r3, r7, r5
 800b316:	2200      	movs	r2, #0
 800b318:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	23b0      	movs	r3, #176	@ 0xb0
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	58d0      	ldr	r0, [r2, r3]
 800b322:	19bc      	adds	r4, r7, r6
 800b324:	1cbb      	adds	r3, r7, #2
 800b326:	781d      	ldrb	r5, [r3, #0]
 800b328:	003b      	movs	r3, r7
 800b32a:	881a      	ldrh	r2, [r3, #0]
 800b32c:	1cfb      	adds	r3, r7, #3
 800b32e:	7819      	ldrb	r1, [r3, #0]
 800b330:	002b      	movs	r3, r5
 800b332:	f7f8 fa9f 	bl	8003874 <HAL_PCD_EP_Open>
 800b336:	0003      	movs	r3, r0
 800b338:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b33a:	250e      	movs	r5, #14
 800b33c:	197c      	adds	r4, r7, r5
 800b33e:	19bb      	adds	r3, r7, r6
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	0018      	movs	r0, r3
 800b344:	f000 f983 	bl	800b64e <USBD_Get_USB_Status>
 800b348:	0003      	movs	r3, r0
 800b34a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b34c:	197b      	adds	r3, r7, r5
 800b34e:	781b      	ldrb	r3, [r3, #0]
}
 800b350:	0018      	movs	r0, r3
 800b352:	46bd      	mov	sp, r7
 800b354:	b005      	add	sp, #20
 800b356:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b358 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	000a      	movs	r2, r1
 800b362:	1cfb      	adds	r3, r7, #3
 800b364:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b366:	210f      	movs	r1, #15
 800b368:	187b      	adds	r3, r7, r1
 800b36a:	2200      	movs	r2, #0
 800b36c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b36e:	260e      	movs	r6, #14
 800b370:	19bb      	adds	r3, r7, r6
 800b372:	2200      	movs	r2, #0
 800b374:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	23b0      	movs	r3, #176	@ 0xb0
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	58d2      	ldr	r2, [r2, r3]
 800b37e:	000d      	movs	r5, r1
 800b380:	187c      	adds	r4, r7, r1
 800b382:	1cfb      	adds	r3, r7, #3
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	0019      	movs	r1, r3
 800b388:	0010      	movs	r0, r2
 800b38a:	f7f8 fae2 	bl	8003952 <HAL_PCD_EP_Close>
 800b38e:	0003      	movs	r3, r0
 800b390:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b392:	19bc      	adds	r4, r7, r6
 800b394:	197b      	adds	r3, r7, r5
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	0018      	movs	r0, r3
 800b39a:	f000 f958 	bl	800b64e <USBD_Get_USB_Status>
 800b39e:	0003      	movs	r3, r0
 800b3a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b3a2:	19bb      	adds	r3, r7, r6
 800b3a4:	781b      	ldrb	r3, [r3, #0]
}
 800b3a6:	0018      	movs	r0, r3
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	b005      	add	sp, #20
 800b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3ae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	000a      	movs	r2, r1
 800b3b8:	1cfb      	adds	r3, r7, #3
 800b3ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3bc:	210f      	movs	r1, #15
 800b3be:	187b      	adds	r3, r7, r1
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3c4:	260e      	movs	r6, #14
 800b3c6:	19bb      	adds	r3, r7, r6
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	23b0      	movs	r3, #176	@ 0xb0
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	58d2      	ldr	r2, [r2, r3]
 800b3d4:	000d      	movs	r5, r1
 800b3d6:	187c      	adds	r4, r7, r1
 800b3d8:	1cfb      	adds	r3, r7, #3
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	0019      	movs	r1, r3
 800b3de:	0010      	movs	r0, r2
 800b3e0:	f7f8 fb94 	bl	8003b0c <HAL_PCD_EP_SetStall>
 800b3e4:	0003      	movs	r3, r0
 800b3e6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3e8:	19bc      	adds	r4, r7, r6
 800b3ea:	197b      	adds	r3, r7, r5
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	0018      	movs	r0, r3
 800b3f0:	f000 f92d 	bl	800b64e <USBD_Get_USB_Status>
 800b3f4:	0003      	movs	r3, r0
 800b3f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b3f8:	19bb      	adds	r3, r7, r6
 800b3fa:	781b      	ldrb	r3, [r3, #0]
}
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	46bd      	mov	sp, r7
 800b400:	b005      	add	sp, #20
 800b402:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b404 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	000a      	movs	r2, r1
 800b40e:	1cfb      	adds	r3, r7, #3
 800b410:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b412:	210f      	movs	r1, #15
 800b414:	187b      	adds	r3, r7, r1
 800b416:	2200      	movs	r2, #0
 800b418:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b41a:	260e      	movs	r6, #14
 800b41c:	19bb      	adds	r3, r7, r6
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	23b0      	movs	r3, #176	@ 0xb0
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	58d2      	ldr	r2, [r2, r3]
 800b42a:	000d      	movs	r5, r1
 800b42c:	187c      	adds	r4, r7, r1
 800b42e:	1cfb      	adds	r3, r7, #3
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	0019      	movs	r1, r3
 800b434:	0010      	movs	r0, r2
 800b436:	f7f8 fbc5 	bl	8003bc4 <HAL_PCD_EP_ClrStall>
 800b43a:	0003      	movs	r3, r0
 800b43c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b43e:	19bc      	adds	r4, r7, r6
 800b440:	197b      	adds	r3, r7, r5
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	0018      	movs	r0, r3
 800b446:	f000 f902 	bl	800b64e <USBD_Get_USB_Status>
 800b44a:	0003      	movs	r3, r0
 800b44c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b44e:	19bb      	adds	r3, r7, r6
 800b450:	781b      	ldrb	r3, [r3, #0]
}
 800b452:	0018      	movs	r0, r3
 800b454:	46bd      	mov	sp, r7
 800b456:	b005      	add	sp, #20
 800b458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b45a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b084      	sub	sp, #16
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	000a      	movs	r2, r1
 800b464:	1cfb      	adds	r3, r7, #3
 800b466:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	23b0      	movs	r3, #176	@ 0xb0
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	58d3      	ldr	r3, [r2, r3]
 800b470:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b472:	1cfb      	adds	r3, r7, #3
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	b25b      	sxtb	r3, r3
 800b478:	2b00      	cmp	r3, #0
 800b47a:	da0c      	bge.n	800b496 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b47c:	1cfb      	adds	r3, r7, #3
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	227f      	movs	r2, #127	@ 0x7f
 800b482:	401a      	ands	r2, r3
 800b484:	68f9      	ldr	r1, [r7, #12]
 800b486:	0013      	movs	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	189b      	adds	r3, r3, r2
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	18cb      	adds	r3, r1, r3
 800b490:	3312      	adds	r3, #18
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	e00d      	b.n	800b4b2 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b496:	1cfb      	adds	r3, r7, #3
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	227f      	movs	r2, #127	@ 0x7f
 800b49c:	401a      	ands	r2, r3
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	23a9      	movs	r3, #169	@ 0xa9
 800b4a2:	0059      	lsls	r1, r3, #1
 800b4a4:	0013      	movs	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	189b      	adds	r3, r3, r2
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	18c3      	adds	r3, r0, r3
 800b4ae:	185b      	adds	r3, r3, r1
 800b4b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	b004      	add	sp, #16
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4bc:	b085      	sub	sp, #20
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	000a      	movs	r2, r1
 800b4c4:	1cfb      	adds	r3, r7, #3
 800b4c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c8:	210f      	movs	r1, #15
 800b4ca:	187b      	adds	r3, r7, r1
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4d0:	260e      	movs	r6, #14
 800b4d2:	19bb      	adds	r3, r7, r6
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	23b0      	movs	r3, #176	@ 0xb0
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	58d2      	ldr	r2, [r2, r3]
 800b4e0:	000d      	movs	r5, r1
 800b4e2:	187c      	adds	r4, r7, r1
 800b4e4:	1cfb      	adds	r3, r7, #3
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	0019      	movs	r1, r3
 800b4ea:	0010      	movs	r0, r2
 800b4ec:	f7f8 f998 	bl	8003820 <HAL_PCD_SetAddress>
 800b4f0:	0003      	movs	r3, r0
 800b4f2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4f4:	19bc      	adds	r4, r7, r6
 800b4f6:	197b      	adds	r3, r7, r5
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	0018      	movs	r0, r3
 800b4fc:	f000 f8a7 	bl	800b64e <USBD_Get_USB_Status>
 800b500:	0003      	movs	r3, r0
 800b502:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b504:	19bb      	adds	r3, r7, r6
 800b506:	781b      	ldrb	r3, [r3, #0]
}
 800b508:	0018      	movs	r0, r3
 800b50a:	46bd      	mov	sp, r7
 800b50c:	b005      	add	sp, #20
 800b50e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b510 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	0008      	movs	r0, r1
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	0019      	movs	r1, r3
 800b51e:	230b      	movs	r3, #11
 800b520:	18fb      	adds	r3, r7, r3
 800b522:	1c02      	adds	r2, r0, #0
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	2408      	movs	r4, #8
 800b528:	193b      	adds	r3, r7, r4
 800b52a:	1c0a      	adds	r2, r1, #0
 800b52c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b52e:	2117      	movs	r1, #23
 800b530:	187b      	adds	r3, r7, r1
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b536:	2516      	movs	r5, #22
 800b538:	197b      	adds	r3, r7, r5
 800b53a:	2200      	movs	r2, #0
 800b53c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	23b0      	movs	r3, #176	@ 0xb0
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	58d0      	ldr	r0, [r2, r3]
 800b546:	193b      	adds	r3, r7, r4
 800b548:	881d      	ldrh	r5, [r3, #0]
 800b54a:	000e      	movs	r6, r1
 800b54c:	187c      	adds	r4, r7, r1
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	230b      	movs	r3, #11
 800b552:	18fb      	adds	r3, r7, r3
 800b554:	7819      	ldrb	r1, [r3, #0]
 800b556:	002b      	movs	r3, r5
 800b558:	f7f8 fa9c 	bl	8003a94 <HAL_PCD_EP_Transmit>
 800b55c:	0003      	movs	r3, r0
 800b55e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b560:	2516      	movs	r5, #22
 800b562:	197c      	adds	r4, r7, r5
 800b564:	19bb      	adds	r3, r7, r6
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	0018      	movs	r0, r3
 800b56a:	f000 f870 	bl	800b64e <USBD_Get_USB_Status>
 800b56e:	0003      	movs	r3, r0
 800b570:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b572:	197b      	adds	r3, r7, r5
 800b574:	781b      	ldrb	r3, [r3, #0]
}
 800b576:	0018      	movs	r0, r3
 800b578:	46bd      	mov	sp, r7
 800b57a:	b007      	add	sp, #28
 800b57c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b57e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b57e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b580:	b087      	sub	sp, #28
 800b582:	af00      	add	r7, sp, #0
 800b584:	60f8      	str	r0, [r7, #12]
 800b586:	0008      	movs	r0, r1
 800b588:	607a      	str	r2, [r7, #4]
 800b58a:	0019      	movs	r1, r3
 800b58c:	230b      	movs	r3, #11
 800b58e:	18fb      	adds	r3, r7, r3
 800b590:	1c02      	adds	r2, r0, #0
 800b592:	701a      	strb	r2, [r3, #0]
 800b594:	2408      	movs	r4, #8
 800b596:	193b      	adds	r3, r7, r4
 800b598:	1c0a      	adds	r2, r1, #0
 800b59a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b59c:	2117      	movs	r1, #23
 800b59e:	187b      	adds	r3, r7, r1
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a4:	2516      	movs	r5, #22
 800b5a6:	197b      	adds	r3, r7, r5
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	23b0      	movs	r3, #176	@ 0xb0
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	58d0      	ldr	r0, [r2, r3]
 800b5b4:	193b      	adds	r3, r7, r4
 800b5b6:	881d      	ldrh	r5, [r3, #0]
 800b5b8:	000e      	movs	r6, r1
 800b5ba:	187c      	adds	r4, r7, r1
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	230b      	movs	r3, #11
 800b5c0:	18fb      	adds	r3, r7, r3
 800b5c2:	7819      	ldrb	r1, [r3, #0]
 800b5c4:	002b      	movs	r3, r5
 800b5c6:	f7f8 fa15 	bl	80039f4 <HAL_PCD_EP_Receive>
 800b5ca:	0003      	movs	r3, r0
 800b5cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ce:	2516      	movs	r5, #22
 800b5d0:	197c      	adds	r4, r7, r5
 800b5d2:	19bb      	adds	r3, r7, r6
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	f000 f839 	bl	800b64e <USBD_Get_USB_Status>
 800b5dc:	0003      	movs	r3, r0
 800b5de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b5e0:	197b      	adds	r3, r7, r5
 800b5e2:	781b      	ldrb	r3, [r3, #0]
}
 800b5e4:	0018      	movs	r0, r3
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	b007      	add	sp, #28
 800b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	000a      	movs	r2, r1
 800b5f6:	1cfb      	adds	r3, r7, #3
 800b5f8:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	23b0      	movs	r3, #176	@ 0xb0
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	58d2      	ldr	r2, [r2, r3]
 800b602:	1cfb      	adds	r3, r7, #3
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	0019      	movs	r1, r3
 800b608:	0010      	movs	r0, r2
 800b60a:	f7f8 fa2a 	bl	8003a62 <HAL_PCD_EP_GetRxCount>
 800b60e:	0003      	movs	r3, r0
}
 800b610:	0018      	movs	r0, r3
 800b612:	46bd      	mov	sp, r7
 800b614:	b002      	add	sp, #8
 800b616:	bd80      	pop	{r7, pc}

0800b618 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b620:	4b02      	ldr	r3, [pc, #8]	@ (800b62c <USBD_static_malloc+0x14>)
}
 800b622:	0018      	movs	r0, r3
 800b624:	46bd      	mov	sp, r7
 800b626:	b002      	add	sp, #8
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	46c0      	nop			@ (mov r8, r8)
 800b62c:	20001394 	.word	0x20001394

0800b630 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]

}
 800b638:	46c0      	nop			@ (mov r8, r8)
 800b63a:	46bd      	mov	sp, r7
 800b63c:	b002      	add	sp, #8
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b644:	f7f4 ff96 	bl	8000574 <SystemClock_Config>
}
 800b648:	46c0      	nop			@ (mov r8, r8)
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	0002      	movs	r2, r0
 800b656:	1dfb      	adds	r3, r7, #7
 800b658:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b65a:	230f      	movs	r3, #15
 800b65c:	18fb      	adds	r3, r7, r3
 800b65e:	2200      	movs	r2, #0
 800b660:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b662:	1dfb      	adds	r3, r7, #7
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b03      	cmp	r3, #3
 800b668:	d017      	beq.n	800b69a <USBD_Get_USB_Status+0x4c>
 800b66a:	dc1b      	bgt.n	800b6a4 <USBD_Get_USB_Status+0x56>
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d00f      	beq.n	800b690 <USBD_Get_USB_Status+0x42>
 800b670:	dc18      	bgt.n	800b6a4 <USBD_Get_USB_Status+0x56>
 800b672:	2b00      	cmp	r3, #0
 800b674:	d002      	beq.n	800b67c <USBD_Get_USB_Status+0x2e>
 800b676:	2b01      	cmp	r3, #1
 800b678:	d005      	beq.n	800b686 <USBD_Get_USB_Status+0x38>
 800b67a:	e013      	b.n	800b6a4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b67c:	230f      	movs	r3, #15
 800b67e:	18fb      	adds	r3, r7, r3
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
    break;
 800b684:	e013      	b.n	800b6ae <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b686:	230f      	movs	r3, #15
 800b688:	18fb      	adds	r3, r7, r3
 800b68a:	2202      	movs	r2, #2
 800b68c:	701a      	strb	r2, [r3, #0]
    break;
 800b68e:	e00e      	b.n	800b6ae <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b690:	230f      	movs	r3, #15
 800b692:	18fb      	adds	r3, r7, r3
 800b694:	2201      	movs	r2, #1
 800b696:	701a      	strb	r2, [r3, #0]
    break;
 800b698:	e009      	b.n	800b6ae <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b69a:	230f      	movs	r3, #15
 800b69c:	18fb      	adds	r3, r7, r3
 800b69e:	2202      	movs	r2, #2
 800b6a0:	701a      	strb	r2, [r3, #0]
    break;
 800b6a2:	e004      	b.n	800b6ae <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800b6a4:	230f      	movs	r3, #15
 800b6a6:	18fb      	adds	r3, r7, r3
 800b6a8:	2202      	movs	r2, #2
 800b6aa:	701a      	strb	r2, [r3, #0]
    break;
 800b6ac:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800b6ae:	230f      	movs	r3, #15
 800b6b0:	18fb      	adds	r3, r7, r3
 800b6b2:	781b      	ldrb	r3, [r3, #0]
}
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	b004      	add	sp, #16
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <siprintf>:
 800b6bc:	b40e      	push	{r1, r2, r3}
 800b6be:	b500      	push	{lr}
 800b6c0:	490b      	ldr	r1, [pc, #44]	@ (800b6f0 <siprintf+0x34>)
 800b6c2:	b09c      	sub	sp, #112	@ 0x70
 800b6c4:	ab1d      	add	r3, sp, #116	@ 0x74
 800b6c6:	9002      	str	r0, [sp, #8]
 800b6c8:	9006      	str	r0, [sp, #24]
 800b6ca:	9107      	str	r1, [sp, #28]
 800b6cc:	9104      	str	r1, [sp, #16]
 800b6ce:	4809      	ldr	r0, [pc, #36]	@ (800b6f4 <siprintf+0x38>)
 800b6d0:	4909      	ldr	r1, [pc, #36]	@ (800b6f8 <siprintf+0x3c>)
 800b6d2:	cb04      	ldmia	r3!, {r2}
 800b6d4:	9105      	str	r1, [sp, #20]
 800b6d6:	6800      	ldr	r0, [r0, #0]
 800b6d8:	a902      	add	r1, sp, #8
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	f000 f8ac 	bl	800b838 <_svfiprintf_r>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	9b02      	ldr	r3, [sp, #8]
 800b6e4:	701a      	strb	r2, [r3, #0]
 800b6e6:	b01c      	add	sp, #112	@ 0x70
 800b6e8:	bc08      	pop	{r3}
 800b6ea:	b003      	add	sp, #12
 800b6ec:	4718      	bx	r3
 800b6ee:	46c0      	nop			@ (mov r8, r8)
 800b6f0:	7fffffff 	.word	0x7fffffff
 800b6f4:	20000194 	.word	0x20000194
 800b6f8:	ffff0208 	.word	0xffff0208

0800b6fc <memset>:
 800b6fc:	0003      	movs	r3, r0
 800b6fe:	1882      	adds	r2, r0, r2
 800b700:	4293      	cmp	r3, r2
 800b702:	d100      	bne.n	800b706 <memset+0xa>
 800b704:	4770      	bx	lr
 800b706:	7019      	strb	r1, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	e7f9      	b.n	800b700 <memset+0x4>

0800b70c <__errno>:
 800b70c:	4b01      	ldr	r3, [pc, #4]	@ (800b714 <__errno+0x8>)
 800b70e:	6818      	ldr	r0, [r3, #0]
 800b710:	4770      	bx	lr
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	20000194 	.word	0x20000194

0800b718 <__libc_init_array>:
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	2600      	movs	r6, #0
 800b71c:	4c0c      	ldr	r4, [pc, #48]	@ (800b750 <__libc_init_array+0x38>)
 800b71e:	4d0d      	ldr	r5, [pc, #52]	@ (800b754 <__libc_init_array+0x3c>)
 800b720:	1b64      	subs	r4, r4, r5
 800b722:	10a4      	asrs	r4, r4, #2
 800b724:	42a6      	cmp	r6, r4
 800b726:	d109      	bne.n	800b73c <__libc_init_array+0x24>
 800b728:	2600      	movs	r6, #0
 800b72a:	f000 fc65 	bl	800bff8 <_init>
 800b72e:	4c0a      	ldr	r4, [pc, #40]	@ (800b758 <__libc_init_array+0x40>)
 800b730:	4d0a      	ldr	r5, [pc, #40]	@ (800b75c <__libc_init_array+0x44>)
 800b732:	1b64      	subs	r4, r4, r5
 800b734:	10a4      	asrs	r4, r4, #2
 800b736:	42a6      	cmp	r6, r4
 800b738:	d105      	bne.n	800b746 <__libc_init_array+0x2e>
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
 800b73c:	00b3      	lsls	r3, r6, #2
 800b73e:	58eb      	ldr	r3, [r5, r3]
 800b740:	4798      	blx	r3
 800b742:	3601      	adds	r6, #1
 800b744:	e7ee      	b.n	800b724 <__libc_init_array+0xc>
 800b746:	00b3      	lsls	r3, r6, #2
 800b748:	58eb      	ldr	r3, [r5, r3]
 800b74a:	4798      	blx	r3
 800b74c:	3601      	adds	r6, #1
 800b74e:	e7f2      	b.n	800b736 <__libc_init_array+0x1e>
 800b750:	0800c414 	.word	0x0800c414
 800b754:	0800c414 	.word	0x0800c414
 800b758:	0800c418 	.word	0x0800c418
 800b75c:	0800c414 	.word	0x0800c414

0800b760 <__retarget_lock_acquire_recursive>:
 800b760:	4770      	bx	lr

0800b762 <__retarget_lock_release_recursive>:
 800b762:	4770      	bx	lr

0800b764 <memcpy>:
 800b764:	2300      	movs	r3, #0
 800b766:	b510      	push	{r4, lr}
 800b768:	429a      	cmp	r2, r3
 800b76a:	d100      	bne.n	800b76e <memcpy+0xa>
 800b76c:	bd10      	pop	{r4, pc}
 800b76e:	5ccc      	ldrb	r4, [r1, r3]
 800b770:	54c4      	strb	r4, [r0, r3]
 800b772:	3301      	adds	r3, #1
 800b774:	e7f8      	b.n	800b768 <memcpy+0x4>
	...

0800b778 <__ssputs_r>:
 800b778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b77a:	688e      	ldr	r6, [r1, #8]
 800b77c:	b085      	sub	sp, #20
 800b77e:	001f      	movs	r7, r3
 800b780:	000c      	movs	r4, r1
 800b782:	680b      	ldr	r3, [r1, #0]
 800b784:	9002      	str	r0, [sp, #8]
 800b786:	9203      	str	r2, [sp, #12]
 800b788:	42be      	cmp	r6, r7
 800b78a:	d830      	bhi.n	800b7ee <__ssputs_r+0x76>
 800b78c:	210c      	movs	r1, #12
 800b78e:	5e62      	ldrsh	r2, [r4, r1]
 800b790:	2190      	movs	r1, #144	@ 0x90
 800b792:	00c9      	lsls	r1, r1, #3
 800b794:	420a      	tst	r2, r1
 800b796:	d028      	beq.n	800b7ea <__ssputs_r+0x72>
 800b798:	2003      	movs	r0, #3
 800b79a:	6921      	ldr	r1, [r4, #16]
 800b79c:	1a5b      	subs	r3, r3, r1
 800b79e:	9301      	str	r3, [sp, #4]
 800b7a0:	6963      	ldr	r3, [r4, #20]
 800b7a2:	4343      	muls	r3, r0
 800b7a4:	9801      	ldr	r0, [sp, #4]
 800b7a6:	0fdd      	lsrs	r5, r3, #31
 800b7a8:	18ed      	adds	r5, r5, r3
 800b7aa:	1c7b      	adds	r3, r7, #1
 800b7ac:	181b      	adds	r3, r3, r0
 800b7ae:	106d      	asrs	r5, r5, #1
 800b7b0:	42ab      	cmp	r3, r5
 800b7b2:	d900      	bls.n	800b7b6 <__ssputs_r+0x3e>
 800b7b4:	001d      	movs	r5, r3
 800b7b6:	0552      	lsls	r2, r2, #21
 800b7b8:	d528      	bpl.n	800b80c <__ssputs_r+0x94>
 800b7ba:	0029      	movs	r1, r5
 800b7bc:	9802      	ldr	r0, [sp, #8]
 800b7be:	f000 f95b 	bl	800ba78 <_malloc_r>
 800b7c2:	1e06      	subs	r6, r0, #0
 800b7c4:	d02c      	beq.n	800b820 <__ssputs_r+0xa8>
 800b7c6:	9a01      	ldr	r2, [sp, #4]
 800b7c8:	6921      	ldr	r1, [r4, #16]
 800b7ca:	f7ff ffcb 	bl	800b764 <memcpy>
 800b7ce:	89a2      	ldrh	r2, [r4, #12]
 800b7d0:	4b18      	ldr	r3, [pc, #96]	@ (800b834 <__ssputs_r+0xbc>)
 800b7d2:	401a      	ands	r2, r3
 800b7d4:	2380      	movs	r3, #128	@ 0x80
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	9b01      	ldr	r3, [sp, #4]
 800b7dc:	6126      	str	r6, [r4, #16]
 800b7de:	18f6      	adds	r6, r6, r3
 800b7e0:	6026      	str	r6, [r4, #0]
 800b7e2:	003e      	movs	r6, r7
 800b7e4:	6165      	str	r5, [r4, #20]
 800b7e6:	1aed      	subs	r5, r5, r3
 800b7e8:	60a5      	str	r5, [r4, #8]
 800b7ea:	42be      	cmp	r6, r7
 800b7ec:	d900      	bls.n	800b7f0 <__ssputs_r+0x78>
 800b7ee:	003e      	movs	r6, r7
 800b7f0:	0032      	movs	r2, r6
 800b7f2:	9903      	ldr	r1, [sp, #12]
 800b7f4:	6820      	ldr	r0, [r4, #0]
 800b7f6:	f000 fb7c 	bl	800bef2 <memmove>
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	68a3      	ldr	r3, [r4, #8]
 800b7fe:	1b9b      	subs	r3, r3, r6
 800b800:	60a3      	str	r3, [r4, #8]
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	199b      	adds	r3, r3, r6
 800b806:	6023      	str	r3, [r4, #0]
 800b808:	b005      	add	sp, #20
 800b80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b80c:	002a      	movs	r2, r5
 800b80e:	9802      	ldr	r0, [sp, #8]
 800b810:	f000 fb40 	bl	800be94 <_realloc_r>
 800b814:	1e06      	subs	r6, r0, #0
 800b816:	d1e0      	bne.n	800b7da <__ssputs_r+0x62>
 800b818:	6921      	ldr	r1, [r4, #16]
 800b81a:	9802      	ldr	r0, [sp, #8]
 800b81c:	f000 fb9a 	bl	800bf54 <_free_r>
 800b820:	230c      	movs	r3, #12
 800b822:	2001      	movs	r0, #1
 800b824:	9a02      	ldr	r2, [sp, #8]
 800b826:	4240      	negs	r0, r0
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	89a2      	ldrh	r2, [r4, #12]
 800b82c:	3334      	adds	r3, #52	@ 0x34
 800b82e:	4313      	orrs	r3, r2
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	e7e9      	b.n	800b808 <__ssputs_r+0x90>
 800b834:	fffffb7f 	.word	0xfffffb7f

0800b838 <_svfiprintf_r>:
 800b838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b83a:	b0a1      	sub	sp, #132	@ 0x84
 800b83c:	9003      	str	r0, [sp, #12]
 800b83e:	001d      	movs	r5, r3
 800b840:	898b      	ldrh	r3, [r1, #12]
 800b842:	000f      	movs	r7, r1
 800b844:	0016      	movs	r6, r2
 800b846:	061b      	lsls	r3, r3, #24
 800b848:	d511      	bpl.n	800b86e <_svfiprintf_r+0x36>
 800b84a:	690b      	ldr	r3, [r1, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10e      	bne.n	800b86e <_svfiprintf_r+0x36>
 800b850:	2140      	movs	r1, #64	@ 0x40
 800b852:	f000 f911 	bl	800ba78 <_malloc_r>
 800b856:	6038      	str	r0, [r7, #0]
 800b858:	6138      	str	r0, [r7, #16]
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d105      	bne.n	800b86a <_svfiprintf_r+0x32>
 800b85e:	230c      	movs	r3, #12
 800b860:	9a03      	ldr	r2, [sp, #12]
 800b862:	6013      	str	r3, [r2, #0]
 800b864:	2001      	movs	r0, #1
 800b866:	4240      	negs	r0, r0
 800b868:	e0cf      	b.n	800ba0a <_svfiprintf_r+0x1d2>
 800b86a:	2340      	movs	r3, #64	@ 0x40
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	2300      	movs	r3, #0
 800b870:	ac08      	add	r4, sp, #32
 800b872:	6163      	str	r3, [r4, #20]
 800b874:	3320      	adds	r3, #32
 800b876:	7663      	strb	r3, [r4, #25]
 800b878:	3310      	adds	r3, #16
 800b87a:	76a3      	strb	r3, [r4, #26]
 800b87c:	9507      	str	r5, [sp, #28]
 800b87e:	0035      	movs	r5, r6
 800b880:	782b      	ldrb	r3, [r5, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <_svfiprintf_r+0x52>
 800b886:	2b25      	cmp	r3, #37	@ 0x25
 800b888:	d148      	bne.n	800b91c <_svfiprintf_r+0xe4>
 800b88a:	1bab      	subs	r3, r5, r6
 800b88c:	9305      	str	r3, [sp, #20]
 800b88e:	42b5      	cmp	r5, r6
 800b890:	d00b      	beq.n	800b8aa <_svfiprintf_r+0x72>
 800b892:	0032      	movs	r2, r6
 800b894:	0039      	movs	r1, r7
 800b896:	9803      	ldr	r0, [sp, #12]
 800b898:	f7ff ff6e 	bl	800b778 <__ssputs_r>
 800b89c:	3001      	adds	r0, #1
 800b89e:	d100      	bne.n	800b8a2 <_svfiprintf_r+0x6a>
 800b8a0:	e0ae      	b.n	800ba00 <_svfiprintf_r+0x1c8>
 800b8a2:	6963      	ldr	r3, [r4, #20]
 800b8a4:	9a05      	ldr	r2, [sp, #20]
 800b8a6:	189b      	adds	r3, r3, r2
 800b8a8:	6163      	str	r3, [r4, #20]
 800b8aa:	782b      	ldrb	r3, [r5, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d100      	bne.n	800b8b2 <_svfiprintf_r+0x7a>
 800b8b0:	e0a6      	b.n	800ba00 <_svfiprintf_r+0x1c8>
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4252      	negs	r2, r2
 800b8b8:	6062      	str	r2, [r4, #4]
 800b8ba:	a904      	add	r1, sp, #16
 800b8bc:	3254      	adds	r2, #84	@ 0x54
 800b8be:	1852      	adds	r2, r2, r1
 800b8c0:	1c6e      	adds	r6, r5, #1
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	60e3      	str	r3, [r4, #12]
 800b8c6:	60a3      	str	r3, [r4, #8]
 800b8c8:	7013      	strb	r3, [r2, #0]
 800b8ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b8cc:	4b54      	ldr	r3, [pc, #336]	@ (800ba20 <_svfiprintf_r+0x1e8>)
 800b8ce:	2205      	movs	r2, #5
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	7831      	ldrb	r1, [r6, #0]
 800b8d4:	9305      	str	r3, [sp, #20]
 800b8d6:	f000 fb31 	bl	800bf3c <memchr>
 800b8da:	1c75      	adds	r5, r6, #1
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d11f      	bne.n	800b920 <_svfiprintf_r+0xe8>
 800b8e0:	6822      	ldr	r2, [r4, #0]
 800b8e2:	06d3      	lsls	r3, r2, #27
 800b8e4:	d504      	bpl.n	800b8f0 <_svfiprintf_r+0xb8>
 800b8e6:	2353      	movs	r3, #83	@ 0x53
 800b8e8:	a904      	add	r1, sp, #16
 800b8ea:	185b      	adds	r3, r3, r1
 800b8ec:	2120      	movs	r1, #32
 800b8ee:	7019      	strb	r1, [r3, #0]
 800b8f0:	0713      	lsls	r3, r2, #28
 800b8f2:	d504      	bpl.n	800b8fe <_svfiprintf_r+0xc6>
 800b8f4:	2353      	movs	r3, #83	@ 0x53
 800b8f6:	a904      	add	r1, sp, #16
 800b8f8:	185b      	adds	r3, r3, r1
 800b8fa:	212b      	movs	r1, #43	@ 0x2b
 800b8fc:	7019      	strb	r1, [r3, #0]
 800b8fe:	7833      	ldrb	r3, [r6, #0]
 800b900:	2b2a      	cmp	r3, #42	@ 0x2a
 800b902:	d016      	beq.n	800b932 <_svfiprintf_r+0xfa>
 800b904:	0035      	movs	r5, r6
 800b906:	2100      	movs	r1, #0
 800b908:	200a      	movs	r0, #10
 800b90a:	68e3      	ldr	r3, [r4, #12]
 800b90c:	782a      	ldrb	r2, [r5, #0]
 800b90e:	1c6e      	adds	r6, r5, #1
 800b910:	3a30      	subs	r2, #48	@ 0x30
 800b912:	2a09      	cmp	r2, #9
 800b914:	d950      	bls.n	800b9b8 <_svfiprintf_r+0x180>
 800b916:	2900      	cmp	r1, #0
 800b918:	d111      	bne.n	800b93e <_svfiprintf_r+0x106>
 800b91a:	e017      	b.n	800b94c <_svfiprintf_r+0x114>
 800b91c:	3501      	adds	r5, #1
 800b91e:	e7af      	b.n	800b880 <_svfiprintf_r+0x48>
 800b920:	9b05      	ldr	r3, [sp, #20]
 800b922:	6822      	ldr	r2, [r4, #0]
 800b924:	1ac0      	subs	r0, r0, r3
 800b926:	2301      	movs	r3, #1
 800b928:	4083      	lsls	r3, r0
 800b92a:	4313      	orrs	r3, r2
 800b92c:	002e      	movs	r6, r5
 800b92e:	6023      	str	r3, [r4, #0]
 800b930:	e7cc      	b.n	800b8cc <_svfiprintf_r+0x94>
 800b932:	9b07      	ldr	r3, [sp, #28]
 800b934:	1d19      	adds	r1, r3, #4
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	9107      	str	r1, [sp, #28]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	db01      	blt.n	800b942 <_svfiprintf_r+0x10a>
 800b93e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b940:	e004      	b.n	800b94c <_svfiprintf_r+0x114>
 800b942:	425b      	negs	r3, r3
 800b944:	60e3      	str	r3, [r4, #12]
 800b946:	2302      	movs	r3, #2
 800b948:	4313      	orrs	r3, r2
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	782b      	ldrb	r3, [r5, #0]
 800b94e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b950:	d10c      	bne.n	800b96c <_svfiprintf_r+0x134>
 800b952:	786b      	ldrb	r3, [r5, #1]
 800b954:	2b2a      	cmp	r3, #42	@ 0x2a
 800b956:	d134      	bne.n	800b9c2 <_svfiprintf_r+0x18a>
 800b958:	9b07      	ldr	r3, [sp, #28]
 800b95a:	3502      	adds	r5, #2
 800b95c:	1d1a      	adds	r2, r3, #4
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	9207      	str	r2, [sp, #28]
 800b962:	2b00      	cmp	r3, #0
 800b964:	da01      	bge.n	800b96a <_svfiprintf_r+0x132>
 800b966:	2301      	movs	r3, #1
 800b968:	425b      	negs	r3, r3
 800b96a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b96c:	4e2d      	ldr	r6, [pc, #180]	@ (800ba24 <_svfiprintf_r+0x1ec>)
 800b96e:	2203      	movs	r2, #3
 800b970:	0030      	movs	r0, r6
 800b972:	7829      	ldrb	r1, [r5, #0]
 800b974:	f000 fae2 	bl	800bf3c <memchr>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d006      	beq.n	800b98a <_svfiprintf_r+0x152>
 800b97c:	2340      	movs	r3, #64	@ 0x40
 800b97e:	1b80      	subs	r0, r0, r6
 800b980:	4083      	lsls	r3, r0
 800b982:	6822      	ldr	r2, [r4, #0]
 800b984:	3501      	adds	r5, #1
 800b986:	4313      	orrs	r3, r2
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	7829      	ldrb	r1, [r5, #0]
 800b98c:	2206      	movs	r2, #6
 800b98e:	4826      	ldr	r0, [pc, #152]	@ (800ba28 <_svfiprintf_r+0x1f0>)
 800b990:	1c6e      	adds	r6, r5, #1
 800b992:	7621      	strb	r1, [r4, #24]
 800b994:	f000 fad2 	bl	800bf3c <memchr>
 800b998:	2800      	cmp	r0, #0
 800b99a:	d038      	beq.n	800ba0e <_svfiprintf_r+0x1d6>
 800b99c:	4b23      	ldr	r3, [pc, #140]	@ (800ba2c <_svfiprintf_r+0x1f4>)
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d122      	bne.n	800b9e8 <_svfiprintf_r+0x1b0>
 800b9a2:	2207      	movs	r2, #7
 800b9a4:	9b07      	ldr	r3, [sp, #28]
 800b9a6:	3307      	adds	r3, #7
 800b9a8:	4393      	bics	r3, r2
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	9307      	str	r3, [sp, #28]
 800b9ae:	6963      	ldr	r3, [r4, #20]
 800b9b0:	9a04      	ldr	r2, [sp, #16]
 800b9b2:	189b      	adds	r3, r3, r2
 800b9b4:	6163      	str	r3, [r4, #20]
 800b9b6:	e762      	b.n	800b87e <_svfiprintf_r+0x46>
 800b9b8:	4343      	muls	r3, r0
 800b9ba:	0035      	movs	r5, r6
 800b9bc:	2101      	movs	r1, #1
 800b9be:	189b      	adds	r3, r3, r2
 800b9c0:	e7a4      	b.n	800b90c <_svfiprintf_r+0xd4>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	200a      	movs	r0, #10
 800b9c6:	0019      	movs	r1, r3
 800b9c8:	3501      	adds	r5, #1
 800b9ca:	6063      	str	r3, [r4, #4]
 800b9cc:	782a      	ldrb	r2, [r5, #0]
 800b9ce:	1c6e      	adds	r6, r5, #1
 800b9d0:	3a30      	subs	r2, #48	@ 0x30
 800b9d2:	2a09      	cmp	r2, #9
 800b9d4:	d903      	bls.n	800b9de <_svfiprintf_r+0x1a6>
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d0c8      	beq.n	800b96c <_svfiprintf_r+0x134>
 800b9da:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9dc:	e7c6      	b.n	800b96c <_svfiprintf_r+0x134>
 800b9de:	4341      	muls	r1, r0
 800b9e0:	0035      	movs	r5, r6
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	1889      	adds	r1, r1, r2
 800b9e6:	e7f1      	b.n	800b9cc <_svfiprintf_r+0x194>
 800b9e8:	aa07      	add	r2, sp, #28
 800b9ea:	9200      	str	r2, [sp, #0]
 800b9ec:	0021      	movs	r1, r4
 800b9ee:	003a      	movs	r2, r7
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800ba30 <_svfiprintf_r+0x1f8>)
 800b9f2:	9803      	ldr	r0, [sp, #12]
 800b9f4:	e000      	b.n	800b9f8 <_svfiprintf_r+0x1c0>
 800b9f6:	bf00      	nop
 800b9f8:	9004      	str	r0, [sp, #16]
 800b9fa:	9b04      	ldr	r3, [sp, #16]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	d1d6      	bne.n	800b9ae <_svfiprintf_r+0x176>
 800ba00:	89bb      	ldrh	r3, [r7, #12]
 800ba02:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ba04:	065b      	lsls	r3, r3, #25
 800ba06:	d500      	bpl.n	800ba0a <_svfiprintf_r+0x1d2>
 800ba08:	e72c      	b.n	800b864 <_svfiprintf_r+0x2c>
 800ba0a:	b021      	add	sp, #132	@ 0x84
 800ba0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0e:	aa07      	add	r2, sp, #28
 800ba10:	9200      	str	r2, [sp, #0]
 800ba12:	0021      	movs	r1, r4
 800ba14:	003a      	movs	r2, r7
 800ba16:	4b06      	ldr	r3, [pc, #24]	@ (800ba30 <_svfiprintf_r+0x1f8>)
 800ba18:	9803      	ldr	r0, [sp, #12]
 800ba1a:	f000 f91d 	bl	800bc58 <_printf_i>
 800ba1e:	e7eb      	b.n	800b9f8 <_svfiprintf_r+0x1c0>
 800ba20:	0800c3e0 	.word	0x0800c3e0
 800ba24:	0800c3e6 	.word	0x0800c3e6
 800ba28:	0800c3ea 	.word	0x0800c3ea
 800ba2c:	00000000 	.word	0x00000000
 800ba30:	0800b779 	.word	0x0800b779

0800ba34 <sbrk_aligned>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	4e0f      	ldr	r6, [pc, #60]	@ (800ba74 <sbrk_aligned+0x40>)
 800ba38:	000d      	movs	r5, r1
 800ba3a:	6831      	ldr	r1, [r6, #0]
 800ba3c:	0004      	movs	r4, r0
 800ba3e:	2900      	cmp	r1, #0
 800ba40:	d102      	bne.n	800ba48 <sbrk_aligned+0x14>
 800ba42:	f000 fa69 	bl	800bf18 <_sbrk_r>
 800ba46:	6030      	str	r0, [r6, #0]
 800ba48:	0029      	movs	r1, r5
 800ba4a:	0020      	movs	r0, r4
 800ba4c:	f000 fa64 	bl	800bf18 <_sbrk_r>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d103      	bne.n	800ba5c <sbrk_aligned+0x28>
 800ba54:	2501      	movs	r5, #1
 800ba56:	426d      	negs	r5, r5
 800ba58:	0028      	movs	r0, r5
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	1cc5      	adds	r5, r0, #3
 800ba60:	439d      	bics	r5, r3
 800ba62:	42a8      	cmp	r0, r5
 800ba64:	d0f8      	beq.n	800ba58 <sbrk_aligned+0x24>
 800ba66:	1a29      	subs	r1, r5, r0
 800ba68:	0020      	movs	r0, r4
 800ba6a:	f000 fa55 	bl	800bf18 <_sbrk_r>
 800ba6e:	3001      	adds	r0, #1
 800ba70:	d1f2      	bne.n	800ba58 <sbrk_aligned+0x24>
 800ba72:	e7ef      	b.n	800ba54 <sbrk_aligned+0x20>
 800ba74:	200016f0 	.word	0x200016f0

0800ba78 <_malloc_r>:
 800ba78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	1ccb      	adds	r3, r1, #3
 800ba7e:	4393      	bics	r3, r2
 800ba80:	3308      	adds	r3, #8
 800ba82:	0005      	movs	r5, r0
 800ba84:	001f      	movs	r7, r3
 800ba86:	2b0c      	cmp	r3, #12
 800ba88:	d234      	bcs.n	800baf4 <_malloc_r+0x7c>
 800ba8a:	270c      	movs	r7, #12
 800ba8c:	42b9      	cmp	r1, r7
 800ba8e:	d833      	bhi.n	800baf8 <_malloc_r+0x80>
 800ba90:	0028      	movs	r0, r5
 800ba92:	f000 f9ef 	bl	800be74 <__malloc_lock>
 800ba96:	4e37      	ldr	r6, [pc, #220]	@ (800bb74 <_malloc_r+0xfc>)
 800ba98:	6833      	ldr	r3, [r6, #0]
 800ba9a:	001c      	movs	r4, r3
 800ba9c:	2c00      	cmp	r4, #0
 800ba9e:	d12f      	bne.n	800bb00 <_malloc_r+0x88>
 800baa0:	0039      	movs	r1, r7
 800baa2:	0028      	movs	r0, r5
 800baa4:	f7ff ffc6 	bl	800ba34 <sbrk_aligned>
 800baa8:	0004      	movs	r4, r0
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	d15f      	bne.n	800bb6e <_malloc_r+0xf6>
 800baae:	6834      	ldr	r4, [r6, #0]
 800bab0:	9400      	str	r4, [sp, #0]
 800bab2:	9b00      	ldr	r3, [sp, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d14a      	bne.n	800bb4e <_malloc_r+0xd6>
 800bab8:	2c00      	cmp	r4, #0
 800baba:	d052      	beq.n	800bb62 <_malloc_r+0xea>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	0028      	movs	r0, r5
 800bac0:	18e3      	adds	r3, r4, r3
 800bac2:	9900      	ldr	r1, [sp, #0]
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	f000 fa27 	bl	800bf18 <_sbrk_r>
 800baca:	9b01      	ldr	r3, [sp, #4]
 800bacc:	4283      	cmp	r3, r0
 800bace:	d148      	bne.n	800bb62 <_malloc_r+0xea>
 800bad0:	6823      	ldr	r3, [r4, #0]
 800bad2:	0028      	movs	r0, r5
 800bad4:	1aff      	subs	r7, r7, r3
 800bad6:	0039      	movs	r1, r7
 800bad8:	f7ff ffac 	bl	800ba34 <sbrk_aligned>
 800badc:	3001      	adds	r0, #1
 800bade:	d040      	beq.n	800bb62 <_malloc_r+0xea>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	19db      	adds	r3, r3, r7
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	6833      	ldr	r3, [r6, #0]
 800bae8:	685a      	ldr	r2, [r3, #4]
 800baea:	2a00      	cmp	r2, #0
 800baec:	d133      	bne.n	800bb56 <_malloc_r+0xde>
 800baee:	9b00      	ldr	r3, [sp, #0]
 800baf0:	6033      	str	r3, [r6, #0]
 800baf2:	e019      	b.n	800bb28 <_malloc_r+0xb0>
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	dac9      	bge.n	800ba8c <_malloc_r+0x14>
 800baf8:	230c      	movs	r3, #12
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	2000      	movs	r0, #0
 800bafe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb00:	6821      	ldr	r1, [r4, #0]
 800bb02:	1bc9      	subs	r1, r1, r7
 800bb04:	d420      	bmi.n	800bb48 <_malloc_r+0xd0>
 800bb06:	290b      	cmp	r1, #11
 800bb08:	d90a      	bls.n	800bb20 <_malloc_r+0xa8>
 800bb0a:	19e2      	adds	r2, r4, r7
 800bb0c:	6027      	str	r7, [r4, #0]
 800bb0e:	42a3      	cmp	r3, r4
 800bb10:	d104      	bne.n	800bb1c <_malloc_r+0xa4>
 800bb12:	6032      	str	r2, [r6, #0]
 800bb14:	6863      	ldr	r3, [r4, #4]
 800bb16:	6011      	str	r1, [r2, #0]
 800bb18:	6053      	str	r3, [r2, #4]
 800bb1a:	e005      	b.n	800bb28 <_malloc_r+0xb0>
 800bb1c:	605a      	str	r2, [r3, #4]
 800bb1e:	e7f9      	b.n	800bb14 <_malloc_r+0x9c>
 800bb20:	6862      	ldr	r2, [r4, #4]
 800bb22:	42a3      	cmp	r3, r4
 800bb24:	d10e      	bne.n	800bb44 <_malloc_r+0xcc>
 800bb26:	6032      	str	r2, [r6, #0]
 800bb28:	0028      	movs	r0, r5
 800bb2a:	f000 f9ab 	bl	800be84 <__malloc_unlock>
 800bb2e:	0020      	movs	r0, r4
 800bb30:	2207      	movs	r2, #7
 800bb32:	300b      	adds	r0, #11
 800bb34:	1d23      	adds	r3, r4, #4
 800bb36:	4390      	bics	r0, r2
 800bb38:	1ac2      	subs	r2, r0, r3
 800bb3a:	4298      	cmp	r0, r3
 800bb3c:	d0df      	beq.n	800bafe <_malloc_r+0x86>
 800bb3e:	1a1b      	subs	r3, r3, r0
 800bb40:	50a3      	str	r3, [r4, r2]
 800bb42:	e7dc      	b.n	800bafe <_malloc_r+0x86>
 800bb44:	605a      	str	r2, [r3, #4]
 800bb46:	e7ef      	b.n	800bb28 <_malloc_r+0xb0>
 800bb48:	0023      	movs	r3, r4
 800bb4a:	6864      	ldr	r4, [r4, #4]
 800bb4c:	e7a6      	b.n	800ba9c <_malloc_r+0x24>
 800bb4e:	9c00      	ldr	r4, [sp, #0]
 800bb50:	6863      	ldr	r3, [r4, #4]
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	e7ad      	b.n	800bab2 <_malloc_r+0x3a>
 800bb56:	001a      	movs	r2, r3
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	d1fb      	bne.n	800bb56 <_malloc_r+0xde>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	e7da      	b.n	800bb18 <_malloc_r+0xa0>
 800bb62:	230c      	movs	r3, #12
 800bb64:	0028      	movs	r0, r5
 800bb66:	602b      	str	r3, [r5, #0]
 800bb68:	f000 f98c 	bl	800be84 <__malloc_unlock>
 800bb6c:	e7c6      	b.n	800bafc <_malloc_r+0x84>
 800bb6e:	6007      	str	r7, [r0, #0]
 800bb70:	e7da      	b.n	800bb28 <_malloc_r+0xb0>
 800bb72:	46c0      	nop			@ (mov r8, r8)
 800bb74:	200016f4 	.word	0x200016f4

0800bb78 <_printf_common>:
 800bb78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb7a:	0016      	movs	r6, r2
 800bb7c:	9301      	str	r3, [sp, #4]
 800bb7e:	688a      	ldr	r2, [r1, #8]
 800bb80:	690b      	ldr	r3, [r1, #16]
 800bb82:	000c      	movs	r4, r1
 800bb84:	9000      	str	r0, [sp, #0]
 800bb86:	4293      	cmp	r3, r2
 800bb88:	da00      	bge.n	800bb8c <_printf_common+0x14>
 800bb8a:	0013      	movs	r3, r2
 800bb8c:	0022      	movs	r2, r4
 800bb8e:	6033      	str	r3, [r6, #0]
 800bb90:	3243      	adds	r2, #67	@ 0x43
 800bb92:	7812      	ldrb	r2, [r2, #0]
 800bb94:	2a00      	cmp	r2, #0
 800bb96:	d001      	beq.n	800bb9c <_printf_common+0x24>
 800bb98:	3301      	adds	r3, #1
 800bb9a:	6033      	str	r3, [r6, #0]
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	069b      	lsls	r3, r3, #26
 800bba0:	d502      	bpl.n	800bba8 <_printf_common+0x30>
 800bba2:	6833      	ldr	r3, [r6, #0]
 800bba4:	3302      	adds	r3, #2
 800bba6:	6033      	str	r3, [r6, #0]
 800bba8:	6822      	ldr	r2, [r4, #0]
 800bbaa:	2306      	movs	r3, #6
 800bbac:	0015      	movs	r5, r2
 800bbae:	401d      	ands	r5, r3
 800bbb0:	421a      	tst	r2, r3
 800bbb2:	d027      	beq.n	800bc04 <_printf_common+0x8c>
 800bbb4:	0023      	movs	r3, r4
 800bbb6:	3343      	adds	r3, #67	@ 0x43
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	1e5a      	subs	r2, r3, #1
 800bbbc:	4193      	sbcs	r3, r2
 800bbbe:	6822      	ldr	r2, [r4, #0]
 800bbc0:	0692      	lsls	r2, r2, #26
 800bbc2:	d430      	bmi.n	800bc26 <_printf_common+0xae>
 800bbc4:	0022      	movs	r2, r4
 800bbc6:	9901      	ldr	r1, [sp, #4]
 800bbc8:	9800      	ldr	r0, [sp, #0]
 800bbca:	9d08      	ldr	r5, [sp, #32]
 800bbcc:	3243      	adds	r2, #67	@ 0x43
 800bbce:	47a8      	blx	r5
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	d025      	beq.n	800bc20 <_printf_common+0xa8>
 800bbd4:	2206      	movs	r2, #6
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	2500      	movs	r5, #0
 800bbda:	4013      	ands	r3, r2
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	d105      	bne.n	800bbec <_printf_common+0x74>
 800bbe0:	6833      	ldr	r3, [r6, #0]
 800bbe2:	68e5      	ldr	r5, [r4, #12]
 800bbe4:	1aed      	subs	r5, r5, r3
 800bbe6:	43eb      	mvns	r3, r5
 800bbe8:	17db      	asrs	r3, r3, #31
 800bbea:	401d      	ands	r5, r3
 800bbec:	68a3      	ldr	r3, [r4, #8]
 800bbee:	6922      	ldr	r2, [r4, #16]
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	dd01      	ble.n	800bbf8 <_printf_common+0x80>
 800bbf4:	1a9b      	subs	r3, r3, r2
 800bbf6:	18ed      	adds	r5, r5, r3
 800bbf8:	2600      	movs	r6, #0
 800bbfa:	42b5      	cmp	r5, r6
 800bbfc:	d120      	bne.n	800bc40 <_printf_common+0xc8>
 800bbfe:	2000      	movs	r0, #0
 800bc00:	e010      	b.n	800bc24 <_printf_common+0xac>
 800bc02:	3501      	adds	r5, #1
 800bc04:	68e3      	ldr	r3, [r4, #12]
 800bc06:	6832      	ldr	r2, [r6, #0]
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	42ab      	cmp	r3, r5
 800bc0c:	ddd2      	ble.n	800bbb4 <_printf_common+0x3c>
 800bc0e:	0022      	movs	r2, r4
 800bc10:	2301      	movs	r3, #1
 800bc12:	9901      	ldr	r1, [sp, #4]
 800bc14:	9800      	ldr	r0, [sp, #0]
 800bc16:	9f08      	ldr	r7, [sp, #32]
 800bc18:	3219      	adds	r2, #25
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	d1f0      	bne.n	800bc02 <_printf_common+0x8a>
 800bc20:	2001      	movs	r0, #1
 800bc22:	4240      	negs	r0, r0
 800bc24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc26:	2030      	movs	r0, #48	@ 0x30
 800bc28:	18e1      	adds	r1, r4, r3
 800bc2a:	3143      	adds	r1, #67	@ 0x43
 800bc2c:	7008      	strb	r0, [r1, #0]
 800bc2e:	0021      	movs	r1, r4
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	3145      	adds	r1, #69	@ 0x45
 800bc34:	7809      	ldrb	r1, [r1, #0]
 800bc36:	18a2      	adds	r2, r4, r2
 800bc38:	3243      	adds	r2, #67	@ 0x43
 800bc3a:	3302      	adds	r3, #2
 800bc3c:	7011      	strb	r1, [r2, #0]
 800bc3e:	e7c1      	b.n	800bbc4 <_printf_common+0x4c>
 800bc40:	0022      	movs	r2, r4
 800bc42:	2301      	movs	r3, #1
 800bc44:	9901      	ldr	r1, [sp, #4]
 800bc46:	9800      	ldr	r0, [sp, #0]
 800bc48:	9f08      	ldr	r7, [sp, #32]
 800bc4a:	321a      	adds	r2, #26
 800bc4c:	47b8      	blx	r7
 800bc4e:	3001      	adds	r0, #1
 800bc50:	d0e6      	beq.n	800bc20 <_printf_common+0xa8>
 800bc52:	3601      	adds	r6, #1
 800bc54:	e7d1      	b.n	800bbfa <_printf_common+0x82>
	...

0800bc58 <_printf_i>:
 800bc58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc5a:	b08b      	sub	sp, #44	@ 0x2c
 800bc5c:	9206      	str	r2, [sp, #24]
 800bc5e:	000a      	movs	r2, r1
 800bc60:	3243      	adds	r2, #67	@ 0x43
 800bc62:	9307      	str	r3, [sp, #28]
 800bc64:	9005      	str	r0, [sp, #20]
 800bc66:	9203      	str	r2, [sp, #12]
 800bc68:	7e0a      	ldrb	r2, [r1, #24]
 800bc6a:	000c      	movs	r4, r1
 800bc6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc6e:	2a78      	cmp	r2, #120	@ 0x78
 800bc70:	d809      	bhi.n	800bc86 <_printf_i+0x2e>
 800bc72:	2a62      	cmp	r2, #98	@ 0x62
 800bc74:	d80b      	bhi.n	800bc8e <_printf_i+0x36>
 800bc76:	2a00      	cmp	r2, #0
 800bc78:	d100      	bne.n	800bc7c <_printf_i+0x24>
 800bc7a:	e0bc      	b.n	800bdf6 <_printf_i+0x19e>
 800bc7c:	497b      	ldr	r1, [pc, #492]	@ (800be6c <_printf_i+0x214>)
 800bc7e:	9104      	str	r1, [sp, #16]
 800bc80:	2a58      	cmp	r2, #88	@ 0x58
 800bc82:	d100      	bne.n	800bc86 <_printf_i+0x2e>
 800bc84:	e090      	b.n	800bda8 <_printf_i+0x150>
 800bc86:	0025      	movs	r5, r4
 800bc88:	3542      	adds	r5, #66	@ 0x42
 800bc8a:	702a      	strb	r2, [r5, #0]
 800bc8c:	e022      	b.n	800bcd4 <_printf_i+0x7c>
 800bc8e:	0010      	movs	r0, r2
 800bc90:	3863      	subs	r0, #99	@ 0x63
 800bc92:	2815      	cmp	r0, #21
 800bc94:	d8f7      	bhi.n	800bc86 <_printf_i+0x2e>
 800bc96:	f7f4 fa3f 	bl	8000118 <__gnu_thumb1_case_shi>
 800bc9a:	0016      	.short	0x0016
 800bc9c:	fff6001f 	.word	0xfff6001f
 800bca0:	fff6fff6 	.word	0xfff6fff6
 800bca4:	001ffff6 	.word	0x001ffff6
 800bca8:	fff6fff6 	.word	0xfff6fff6
 800bcac:	fff6fff6 	.word	0xfff6fff6
 800bcb0:	003600a1 	.word	0x003600a1
 800bcb4:	fff60080 	.word	0xfff60080
 800bcb8:	00b2fff6 	.word	0x00b2fff6
 800bcbc:	0036fff6 	.word	0x0036fff6
 800bcc0:	fff6fff6 	.word	0xfff6fff6
 800bcc4:	0084      	.short	0x0084
 800bcc6:	0025      	movs	r5, r4
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	3542      	adds	r5, #66	@ 0x42
 800bccc:	1d11      	adds	r1, r2, #4
 800bcce:	6019      	str	r1, [r3, #0]
 800bcd0:	6813      	ldr	r3, [r2, #0]
 800bcd2:	702b      	strb	r3, [r5, #0]
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e0a0      	b.n	800be1a <_printf_i+0x1c2>
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	6809      	ldr	r1, [r1, #0]
 800bcdc:	1d02      	adds	r2, r0, #4
 800bcde:	060d      	lsls	r5, r1, #24
 800bce0:	d50b      	bpl.n	800bcfa <_printf_i+0xa2>
 800bce2:	6806      	ldr	r6, [r0, #0]
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	2e00      	cmp	r6, #0
 800bce8:	da03      	bge.n	800bcf2 <_printf_i+0x9a>
 800bcea:	232d      	movs	r3, #45	@ 0x2d
 800bcec:	9a03      	ldr	r2, [sp, #12]
 800bcee:	4276      	negs	r6, r6
 800bcf0:	7013      	strb	r3, [r2, #0]
 800bcf2:	4b5e      	ldr	r3, [pc, #376]	@ (800be6c <_printf_i+0x214>)
 800bcf4:	270a      	movs	r7, #10
 800bcf6:	9304      	str	r3, [sp, #16]
 800bcf8:	e018      	b.n	800bd2c <_printf_i+0xd4>
 800bcfa:	6806      	ldr	r6, [r0, #0]
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	0649      	lsls	r1, r1, #25
 800bd00:	d5f1      	bpl.n	800bce6 <_printf_i+0x8e>
 800bd02:	b236      	sxth	r6, r6
 800bd04:	e7ef      	b.n	800bce6 <_printf_i+0x8e>
 800bd06:	6808      	ldr	r0, [r1, #0]
 800bd08:	6819      	ldr	r1, [r3, #0]
 800bd0a:	c940      	ldmia	r1!, {r6}
 800bd0c:	0605      	lsls	r5, r0, #24
 800bd0e:	d402      	bmi.n	800bd16 <_printf_i+0xbe>
 800bd10:	0640      	lsls	r0, r0, #25
 800bd12:	d500      	bpl.n	800bd16 <_printf_i+0xbe>
 800bd14:	b2b6      	uxth	r6, r6
 800bd16:	6019      	str	r1, [r3, #0]
 800bd18:	4b54      	ldr	r3, [pc, #336]	@ (800be6c <_printf_i+0x214>)
 800bd1a:	270a      	movs	r7, #10
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	2a6f      	cmp	r2, #111	@ 0x6f
 800bd20:	d100      	bne.n	800bd24 <_printf_i+0xcc>
 800bd22:	3f02      	subs	r7, #2
 800bd24:	0023      	movs	r3, r4
 800bd26:	2200      	movs	r2, #0
 800bd28:	3343      	adds	r3, #67	@ 0x43
 800bd2a:	701a      	strb	r2, [r3, #0]
 800bd2c:	6863      	ldr	r3, [r4, #4]
 800bd2e:	60a3      	str	r3, [r4, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	db03      	blt.n	800bd3c <_printf_i+0xe4>
 800bd34:	2104      	movs	r1, #4
 800bd36:	6822      	ldr	r2, [r4, #0]
 800bd38:	438a      	bics	r2, r1
 800bd3a:	6022      	str	r2, [r4, #0]
 800bd3c:	2e00      	cmp	r6, #0
 800bd3e:	d102      	bne.n	800bd46 <_printf_i+0xee>
 800bd40:	9d03      	ldr	r5, [sp, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00c      	beq.n	800bd60 <_printf_i+0x108>
 800bd46:	9d03      	ldr	r5, [sp, #12]
 800bd48:	0030      	movs	r0, r6
 800bd4a:	0039      	movs	r1, r7
 800bd4c:	f7f4 fa74 	bl	8000238 <__aeabi_uidivmod>
 800bd50:	9b04      	ldr	r3, [sp, #16]
 800bd52:	3d01      	subs	r5, #1
 800bd54:	5c5b      	ldrb	r3, [r3, r1]
 800bd56:	702b      	strb	r3, [r5, #0]
 800bd58:	0033      	movs	r3, r6
 800bd5a:	0006      	movs	r6, r0
 800bd5c:	429f      	cmp	r7, r3
 800bd5e:	d9f3      	bls.n	800bd48 <_printf_i+0xf0>
 800bd60:	2f08      	cmp	r7, #8
 800bd62:	d109      	bne.n	800bd78 <_printf_i+0x120>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	07db      	lsls	r3, r3, #31
 800bd68:	d506      	bpl.n	800bd78 <_printf_i+0x120>
 800bd6a:	6862      	ldr	r2, [r4, #4]
 800bd6c:	6923      	ldr	r3, [r4, #16]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	dc02      	bgt.n	800bd78 <_printf_i+0x120>
 800bd72:	2330      	movs	r3, #48	@ 0x30
 800bd74:	3d01      	subs	r5, #1
 800bd76:	702b      	strb	r3, [r5, #0]
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	1b5b      	subs	r3, r3, r5
 800bd7c:	6123      	str	r3, [r4, #16]
 800bd7e:	9b07      	ldr	r3, [sp, #28]
 800bd80:	0021      	movs	r1, r4
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	9805      	ldr	r0, [sp, #20]
 800bd86:	9b06      	ldr	r3, [sp, #24]
 800bd88:	aa09      	add	r2, sp, #36	@ 0x24
 800bd8a:	f7ff fef5 	bl	800bb78 <_printf_common>
 800bd8e:	3001      	adds	r0, #1
 800bd90:	d148      	bne.n	800be24 <_printf_i+0x1cc>
 800bd92:	2001      	movs	r0, #1
 800bd94:	4240      	negs	r0, r0
 800bd96:	b00b      	add	sp, #44	@ 0x2c
 800bd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	6809      	ldr	r1, [r1, #0]
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	6022      	str	r2, [r4, #0]
 800bda2:	2278      	movs	r2, #120	@ 0x78
 800bda4:	4932      	ldr	r1, [pc, #200]	@ (800be70 <_printf_i+0x218>)
 800bda6:	9104      	str	r1, [sp, #16]
 800bda8:	0021      	movs	r1, r4
 800bdaa:	3145      	adds	r1, #69	@ 0x45
 800bdac:	700a      	strb	r2, [r1, #0]
 800bdae:	6819      	ldr	r1, [r3, #0]
 800bdb0:	6822      	ldr	r2, [r4, #0]
 800bdb2:	c940      	ldmia	r1!, {r6}
 800bdb4:	0610      	lsls	r0, r2, #24
 800bdb6:	d402      	bmi.n	800bdbe <_printf_i+0x166>
 800bdb8:	0650      	lsls	r0, r2, #25
 800bdba:	d500      	bpl.n	800bdbe <_printf_i+0x166>
 800bdbc:	b2b6      	uxth	r6, r6
 800bdbe:	6019      	str	r1, [r3, #0]
 800bdc0:	07d3      	lsls	r3, r2, #31
 800bdc2:	d502      	bpl.n	800bdca <_printf_i+0x172>
 800bdc4:	2320      	movs	r3, #32
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	2e00      	cmp	r6, #0
 800bdcc:	d001      	beq.n	800bdd2 <_printf_i+0x17a>
 800bdce:	2710      	movs	r7, #16
 800bdd0:	e7a8      	b.n	800bd24 <_printf_i+0xcc>
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	4393      	bics	r3, r2
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	e7f8      	b.n	800bdce <_printf_i+0x176>
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	680d      	ldr	r5, [r1, #0]
 800bde0:	1d10      	adds	r0, r2, #4
 800bde2:	6949      	ldr	r1, [r1, #20]
 800bde4:	6018      	str	r0, [r3, #0]
 800bde6:	6813      	ldr	r3, [r2, #0]
 800bde8:	062e      	lsls	r6, r5, #24
 800bdea:	d501      	bpl.n	800bdf0 <_printf_i+0x198>
 800bdec:	6019      	str	r1, [r3, #0]
 800bdee:	e002      	b.n	800bdf6 <_printf_i+0x19e>
 800bdf0:	066d      	lsls	r5, r5, #25
 800bdf2:	d5fb      	bpl.n	800bdec <_printf_i+0x194>
 800bdf4:	8019      	strh	r1, [r3, #0]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	9d03      	ldr	r5, [sp, #12]
 800bdfa:	6123      	str	r3, [r4, #16]
 800bdfc:	e7bf      	b.n	800bd7e <_printf_i+0x126>
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	1d11      	adds	r1, r2, #4
 800be02:	6019      	str	r1, [r3, #0]
 800be04:	6815      	ldr	r5, [r2, #0]
 800be06:	2100      	movs	r1, #0
 800be08:	0028      	movs	r0, r5
 800be0a:	6862      	ldr	r2, [r4, #4]
 800be0c:	f000 f896 	bl	800bf3c <memchr>
 800be10:	2800      	cmp	r0, #0
 800be12:	d001      	beq.n	800be18 <_printf_i+0x1c0>
 800be14:	1b40      	subs	r0, r0, r5
 800be16:	6060      	str	r0, [r4, #4]
 800be18:	6863      	ldr	r3, [r4, #4]
 800be1a:	6123      	str	r3, [r4, #16]
 800be1c:	2300      	movs	r3, #0
 800be1e:	9a03      	ldr	r2, [sp, #12]
 800be20:	7013      	strb	r3, [r2, #0]
 800be22:	e7ac      	b.n	800bd7e <_printf_i+0x126>
 800be24:	002a      	movs	r2, r5
 800be26:	6923      	ldr	r3, [r4, #16]
 800be28:	9906      	ldr	r1, [sp, #24]
 800be2a:	9805      	ldr	r0, [sp, #20]
 800be2c:	9d07      	ldr	r5, [sp, #28]
 800be2e:	47a8      	blx	r5
 800be30:	3001      	adds	r0, #1
 800be32:	d0ae      	beq.n	800bd92 <_printf_i+0x13a>
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	079b      	lsls	r3, r3, #30
 800be38:	d415      	bmi.n	800be66 <_printf_i+0x20e>
 800be3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be3c:	68e0      	ldr	r0, [r4, #12]
 800be3e:	4298      	cmp	r0, r3
 800be40:	daa9      	bge.n	800bd96 <_printf_i+0x13e>
 800be42:	0018      	movs	r0, r3
 800be44:	e7a7      	b.n	800bd96 <_printf_i+0x13e>
 800be46:	0022      	movs	r2, r4
 800be48:	2301      	movs	r3, #1
 800be4a:	9906      	ldr	r1, [sp, #24]
 800be4c:	9805      	ldr	r0, [sp, #20]
 800be4e:	9e07      	ldr	r6, [sp, #28]
 800be50:	3219      	adds	r2, #25
 800be52:	47b0      	blx	r6
 800be54:	3001      	adds	r0, #1
 800be56:	d09c      	beq.n	800bd92 <_printf_i+0x13a>
 800be58:	3501      	adds	r5, #1
 800be5a:	68e3      	ldr	r3, [r4, #12]
 800be5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be5e:	1a9b      	subs	r3, r3, r2
 800be60:	42ab      	cmp	r3, r5
 800be62:	dcf0      	bgt.n	800be46 <_printf_i+0x1ee>
 800be64:	e7e9      	b.n	800be3a <_printf_i+0x1e2>
 800be66:	2500      	movs	r5, #0
 800be68:	e7f7      	b.n	800be5a <_printf_i+0x202>
 800be6a:	46c0      	nop			@ (mov r8, r8)
 800be6c:	0800c3f1 	.word	0x0800c3f1
 800be70:	0800c402 	.word	0x0800c402

0800be74 <__malloc_lock>:
 800be74:	b510      	push	{r4, lr}
 800be76:	4802      	ldr	r0, [pc, #8]	@ (800be80 <__malloc_lock+0xc>)
 800be78:	f7ff fc72 	bl	800b760 <__retarget_lock_acquire_recursive>
 800be7c:	bd10      	pop	{r4, pc}
 800be7e:	46c0      	nop			@ (mov r8, r8)
 800be80:	200016ec 	.word	0x200016ec

0800be84 <__malloc_unlock>:
 800be84:	b510      	push	{r4, lr}
 800be86:	4802      	ldr	r0, [pc, #8]	@ (800be90 <__malloc_unlock+0xc>)
 800be88:	f7ff fc6b 	bl	800b762 <__retarget_lock_release_recursive>
 800be8c:	bd10      	pop	{r4, pc}
 800be8e:	46c0      	nop			@ (mov r8, r8)
 800be90:	200016ec 	.word	0x200016ec

0800be94 <_realloc_r>:
 800be94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be96:	0006      	movs	r6, r0
 800be98:	000c      	movs	r4, r1
 800be9a:	0015      	movs	r5, r2
 800be9c:	2900      	cmp	r1, #0
 800be9e:	d105      	bne.n	800beac <_realloc_r+0x18>
 800bea0:	0011      	movs	r1, r2
 800bea2:	f7ff fde9 	bl	800ba78 <_malloc_r>
 800bea6:	0004      	movs	r4, r0
 800bea8:	0020      	movs	r0, r4
 800beaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800beac:	2a00      	cmp	r2, #0
 800beae:	d103      	bne.n	800beb8 <_realloc_r+0x24>
 800beb0:	f000 f850 	bl	800bf54 <_free_r>
 800beb4:	2400      	movs	r4, #0
 800beb6:	e7f7      	b.n	800bea8 <_realloc_r+0x14>
 800beb8:	f000 f896 	bl	800bfe8 <_malloc_usable_size_r>
 800bebc:	0007      	movs	r7, r0
 800bebe:	4285      	cmp	r5, r0
 800bec0:	d802      	bhi.n	800bec8 <_realloc_r+0x34>
 800bec2:	0843      	lsrs	r3, r0, #1
 800bec4:	42ab      	cmp	r3, r5
 800bec6:	d3ef      	bcc.n	800bea8 <_realloc_r+0x14>
 800bec8:	0029      	movs	r1, r5
 800beca:	0030      	movs	r0, r6
 800becc:	f7ff fdd4 	bl	800ba78 <_malloc_r>
 800bed0:	9001      	str	r0, [sp, #4]
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d0ee      	beq.n	800beb4 <_realloc_r+0x20>
 800bed6:	002a      	movs	r2, r5
 800bed8:	42bd      	cmp	r5, r7
 800beda:	d900      	bls.n	800bede <_realloc_r+0x4a>
 800bedc:	003a      	movs	r2, r7
 800bede:	0021      	movs	r1, r4
 800bee0:	9801      	ldr	r0, [sp, #4]
 800bee2:	f7ff fc3f 	bl	800b764 <memcpy>
 800bee6:	0021      	movs	r1, r4
 800bee8:	0030      	movs	r0, r6
 800beea:	f000 f833 	bl	800bf54 <_free_r>
 800beee:	9c01      	ldr	r4, [sp, #4]
 800bef0:	e7da      	b.n	800bea8 <_realloc_r+0x14>

0800bef2 <memmove>:
 800bef2:	b510      	push	{r4, lr}
 800bef4:	4288      	cmp	r0, r1
 800bef6:	d806      	bhi.n	800bf06 <memmove+0x14>
 800bef8:	2300      	movs	r3, #0
 800befa:	429a      	cmp	r2, r3
 800befc:	d008      	beq.n	800bf10 <memmove+0x1e>
 800befe:	5ccc      	ldrb	r4, [r1, r3]
 800bf00:	54c4      	strb	r4, [r0, r3]
 800bf02:	3301      	adds	r3, #1
 800bf04:	e7f9      	b.n	800befa <memmove+0x8>
 800bf06:	188b      	adds	r3, r1, r2
 800bf08:	4298      	cmp	r0, r3
 800bf0a:	d2f5      	bcs.n	800bef8 <memmove+0x6>
 800bf0c:	3a01      	subs	r2, #1
 800bf0e:	d200      	bcs.n	800bf12 <memmove+0x20>
 800bf10:	bd10      	pop	{r4, pc}
 800bf12:	5c8b      	ldrb	r3, [r1, r2]
 800bf14:	5483      	strb	r3, [r0, r2]
 800bf16:	e7f9      	b.n	800bf0c <memmove+0x1a>

0800bf18 <_sbrk_r>:
 800bf18:	2300      	movs	r3, #0
 800bf1a:	b570      	push	{r4, r5, r6, lr}
 800bf1c:	4d06      	ldr	r5, [pc, #24]	@ (800bf38 <_sbrk_r+0x20>)
 800bf1e:	0004      	movs	r4, r0
 800bf20:	0008      	movs	r0, r1
 800bf22:	602b      	str	r3, [r5, #0]
 800bf24:	f7f5 f8c2 	bl	80010ac <_sbrk>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d103      	bne.n	800bf34 <_sbrk_r+0x1c>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d000      	beq.n	800bf34 <_sbrk_r+0x1c>
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	bd70      	pop	{r4, r5, r6, pc}
 800bf36:	46c0      	nop			@ (mov r8, r8)
 800bf38:	200016f8 	.word	0x200016f8

0800bf3c <memchr>:
 800bf3c:	b2c9      	uxtb	r1, r1
 800bf3e:	1882      	adds	r2, r0, r2
 800bf40:	4290      	cmp	r0, r2
 800bf42:	d101      	bne.n	800bf48 <memchr+0xc>
 800bf44:	2000      	movs	r0, #0
 800bf46:	4770      	bx	lr
 800bf48:	7803      	ldrb	r3, [r0, #0]
 800bf4a:	428b      	cmp	r3, r1
 800bf4c:	d0fb      	beq.n	800bf46 <memchr+0xa>
 800bf4e:	3001      	adds	r0, #1
 800bf50:	e7f6      	b.n	800bf40 <memchr+0x4>
	...

0800bf54 <_free_r>:
 800bf54:	b570      	push	{r4, r5, r6, lr}
 800bf56:	0005      	movs	r5, r0
 800bf58:	1e0c      	subs	r4, r1, #0
 800bf5a:	d010      	beq.n	800bf7e <_free_r+0x2a>
 800bf5c:	3c04      	subs	r4, #4
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	da00      	bge.n	800bf66 <_free_r+0x12>
 800bf64:	18e4      	adds	r4, r4, r3
 800bf66:	0028      	movs	r0, r5
 800bf68:	f7ff ff84 	bl	800be74 <__malloc_lock>
 800bf6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bfe4 <_free_r+0x90>)
 800bf6e:	6813      	ldr	r3, [r2, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d105      	bne.n	800bf80 <_free_r+0x2c>
 800bf74:	6063      	str	r3, [r4, #4]
 800bf76:	6014      	str	r4, [r2, #0]
 800bf78:	0028      	movs	r0, r5
 800bf7a:	f7ff ff83 	bl	800be84 <__malloc_unlock>
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	42a3      	cmp	r3, r4
 800bf82:	d908      	bls.n	800bf96 <_free_r+0x42>
 800bf84:	6820      	ldr	r0, [r4, #0]
 800bf86:	1821      	adds	r1, r4, r0
 800bf88:	428b      	cmp	r3, r1
 800bf8a:	d1f3      	bne.n	800bf74 <_free_r+0x20>
 800bf8c:	6819      	ldr	r1, [r3, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	1809      	adds	r1, r1, r0
 800bf92:	6021      	str	r1, [r4, #0]
 800bf94:	e7ee      	b.n	800bf74 <_free_r+0x20>
 800bf96:	001a      	movs	r2, r3
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d001      	beq.n	800bfa2 <_free_r+0x4e>
 800bf9e:	42a3      	cmp	r3, r4
 800bfa0:	d9f9      	bls.n	800bf96 <_free_r+0x42>
 800bfa2:	6811      	ldr	r1, [r2, #0]
 800bfa4:	1850      	adds	r0, r2, r1
 800bfa6:	42a0      	cmp	r0, r4
 800bfa8:	d10b      	bne.n	800bfc2 <_free_r+0x6e>
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	1809      	adds	r1, r1, r0
 800bfae:	1850      	adds	r0, r2, r1
 800bfb0:	6011      	str	r1, [r2, #0]
 800bfb2:	4283      	cmp	r3, r0
 800bfb4:	d1e0      	bne.n	800bf78 <_free_r+0x24>
 800bfb6:	6818      	ldr	r0, [r3, #0]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	1841      	adds	r1, r0, r1
 800bfbc:	6011      	str	r1, [r2, #0]
 800bfbe:	6053      	str	r3, [r2, #4]
 800bfc0:	e7da      	b.n	800bf78 <_free_r+0x24>
 800bfc2:	42a0      	cmp	r0, r4
 800bfc4:	d902      	bls.n	800bfcc <_free_r+0x78>
 800bfc6:	230c      	movs	r3, #12
 800bfc8:	602b      	str	r3, [r5, #0]
 800bfca:	e7d5      	b.n	800bf78 <_free_r+0x24>
 800bfcc:	6820      	ldr	r0, [r4, #0]
 800bfce:	1821      	adds	r1, r4, r0
 800bfd0:	428b      	cmp	r3, r1
 800bfd2:	d103      	bne.n	800bfdc <_free_r+0x88>
 800bfd4:	6819      	ldr	r1, [r3, #0]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	1809      	adds	r1, r1, r0
 800bfda:	6021      	str	r1, [r4, #0]
 800bfdc:	6063      	str	r3, [r4, #4]
 800bfde:	6054      	str	r4, [r2, #4]
 800bfe0:	e7ca      	b.n	800bf78 <_free_r+0x24>
 800bfe2:	46c0      	nop			@ (mov r8, r8)
 800bfe4:	200016f4 	.word	0x200016f4

0800bfe8 <_malloc_usable_size_r>:
 800bfe8:	1f0b      	subs	r3, r1, #4
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	1f18      	subs	r0, r3, #4
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	da01      	bge.n	800bff6 <_malloc_usable_size_r+0xe>
 800bff2:	580b      	ldr	r3, [r1, r0]
 800bff4:	18c0      	adds	r0, r0, r3
 800bff6:	4770      	bx	lr

0800bff8 <_init>:
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	46c0      	nop			@ (mov r8, r8)
 800bffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffe:	bc08      	pop	{r3}
 800c000:	469e      	mov	lr, r3
 800c002:	4770      	bx	lr

0800c004 <_fini>:
 800c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c006:	46c0      	nop			@ (mov r8, r8)
 800c008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00a:	bc08      	pop	{r3}
 800c00c:	469e      	mov	lr, r3
 800c00e:	4770      	bx	lr
